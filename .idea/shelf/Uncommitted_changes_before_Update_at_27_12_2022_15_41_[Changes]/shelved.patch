Index: local/modules/sprint.migration/templates/IblockElementsExport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\n/**\r\n * @var $version\r\n * @var $description\r\n * @var $updateMode\r\n * @var $extendUse\r\n * @var $extendClass\r\n * @var $moduleVersion\r\n * @var $iblockElementsFile\r\n * @formatter:off\r\n */\r\n\r\n?><?php echo \"<?php\\n\" ?>\r\n\r\nnamespace Sprint\\Migration;\r\n\r\n<?php echo $extendUse ?>\r\n\r\nclass <?php echo $version ?> extends <?php echo $extendClass ?>\r\n\r\n{\r\n    protected $description = \"<?php echo $description ?>\";\r\n\r\n    protected $moduleVersion = \"<?php echo $moduleVersion ?>\";\r\n\r\n    /**\r\n     * @throws Exceptions\\ExchangeException\r\n     * @throws Exceptions\\RestartException\r\n     * @return bool|void\r\n     */\r\n    public function up()\r\n    {\r\n        $this->getExchangeManager()\r\n            ->IblockElementsImport()\r\n            ->setExchangeResource('iblock_elements.xml')\r\n            ->setLimit(20)\r\n            ->execute(function ($item) {\r\n<?php if ($updateMode == 'code') { ?>\r\n                $this->getHelperManager()\r\n                    ->Iblock()\r\n                    ->saveElement(\r\n                        $item['iblock_id'],\r\n                        $item['fields'],\r\n                        $item['properties']\r\n                    );\r\n<?php } elseif($updateMode == 'xml_id') { ?>\r\n                $this->getHelperManager()\r\n                    ->Iblock()\r\n                    ->saveElementByXmlId(\r\n                        $item['iblock_id'],\r\n                        $item['fields'],\r\n                        $item['properties']\r\n                    );\r\n<?php } else { ?>\r\n                $this->getHelperManager()\r\n                    ->Iblock()\r\n                    ->addElement(\r\n                        $item['iblock_id'],\r\n                        $item['fields'],\r\n                        $item['properties']\r\n                    );\r\n<?php } ?>\r\n            });\r\n    }\r\n\r\n    public function down()\r\n    {\r\n        //your code ...\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/templates/IblockElementsExport.php b/local/modules/sprint.migration/templates/IblockElementsExport.php
--- a/local/modules/sprint.migration/templates/IblockElementsExport.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/templates/IblockElementsExport.php	(date 1670844554000)
@@ -7,65 +7,95 @@
  * @var $extendUse
  * @var $extendClass
  * @var $moduleVersion
- * @var $iblockElementsFile
  * @formatter:off
  */
 
+use Sprint\Migration\Exchange\IblockElementsExport;
+
 ?><?php echo "<?php\n" ?>
 
 namespace Sprint\Migration;
-
 <?php echo $extendUse ?>
 
 class <?php echo $version ?> extends <?php echo $extendClass ?>
 
 {
-    protected $description = "<?php echo $description ?>";
-
+    protected $description   = "<?php echo $description ?>";
     protected $moduleVersion = "<?php echo $moduleVersion ?>";
 
     /**
-     * @throws Exceptions\ExchangeException
+     * @throws Exceptions\MigrationException
      * @throws Exceptions\RestartException
      * @return bool|void
      */
     public function up()
     {
         $this->getExchangeManager()
-            ->IblockElementsImport()
-            ->setExchangeResource('iblock_elements.xml')
-            ->setLimit(20)
-            ->execute(function ($item) {
-<?php if ($updateMode == 'code') { ?>
-                $this->getHelperManager()
-                    ->Iblock()
-                    ->saveElement(
-                        $item['iblock_id'],
-                        $item['fields'],
-                        $item['properties']
-                    );
-<?php } elseif($updateMode == 'xml_id') { ?>
-                $this->getHelperManager()
-                    ->Iblock()
-                    ->saveElementByXmlId(
-                        $item['iblock_id'],
-                        $item['fields'],
-                        $item['properties']
-                    );
+             ->IblockElementsImport()
+             ->setExchangeResource('iblock_elements.xml')
+             ->setLimit(20)
+             ->execute(function ($item) {
+<?php if ($updateMode == IblockElementsExport::UPDATE_MODE_CODE) { ?>
+                 $this->getHelperManager()
+                      ->Iblock()
+                      ->saveElement(
+                          $item['iblock_id'],
+                          $item['fields'],
+                          $item['properties']
+                      );
+<?php } elseif($updateMode == IblockElementsExport::UPDATE_MODE_XML_ID) { ?>
+                 $this->getHelperManager()
+                      ->Iblock()
+                      ->saveElementByXmlId(
+                          $item['iblock_id'],
+                          $item['fields'],
+                          $item['properties']
+                      );
 <?php } else { ?>
-                $this->getHelperManager()
-                    ->Iblock()
-                    ->addElement(
-                        $item['iblock_id'],
-                        $item['fields'],
-                        $item['properties']
-                    );
+                 $this->getHelperManager()
+                      ->Iblock()
+                      ->addElement(
+                          $item['iblock_id'],
+                          $item['fields'],
+                          $item['properties']
+                      );
 <?php } ?>
-            });
+             });
     }
 
+    /**
+     * @throws Exceptions\MigrationException
+     * @throws Exceptions\RestartException
+     * @return bool|void
+     */
     public function down()
     {
-        //your code ...
+<?php if ($updateMode == IblockElementsExport::UPDATE_MODE_CODE) { ?>
+        $this->getExchangeManager()
+             ->IblockElementsImport()
+             ->setExchangeResource('iblock_elements.xml')
+             ->setLimit(10)
+             ->execute(function ($item) {
+                 $this->getHelperManager()
+                      ->Iblock()
+                      ->deleteElementByCode(
+                          $item['iblock_id'],
+                          $item['fields']['CODE']
+                 );
+             });
+<?php } elseif($updateMode == IblockElementsExport::UPDATE_MODE_XML_ID) { ?>
+        $this->getExchangeManager()
+             ->IblockElementsImport()
+             ->setExchangeResource('iblock_elements.xml')
+             ->setLimit(10)
+             ->execute(function ($item) {
+                 $this->getHelperManager()
+                     ->Iblock()
+                     ->deleteElementByXmlId(
+                         $item['iblock_id'],
+                         $item['fields']['XML_ID']
+                     );
+             });
+<?php } ?>
     }
 }
Index: local/modules/sprint.migration/lib/versionconfig.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse DirectoryIterator;\r\nuse Exception;\r\nuse Sprint\\Migration\\Builders\\AgentBuilder;\r\nuse Sprint\\Migration\\Builders\\BlankBuilder;\r\nuse Sprint\\Migration\\Builders\\CacheCleanerBuilder;\r\nuse Sprint\\Migration\\Builders\\EventBuilder;\r\nuse Sprint\\Migration\\Builders\\FormBuilder;\r\nuse Sprint\\Migration\\Builders\\HlblockBuilder;\r\nuse Sprint\\Migration\\Builders\\HlblockElementsBuilder;\r\nuse Sprint\\Migration\\Builders\\IblockBuilder;\r\nuse Sprint\\Migration\\Builders\\IblockCategoryBuilder;\r\nuse Sprint\\Migration\\Builders\\IblockElementsBuilder;\r\nuse Sprint\\Migration\\Builders\\MarkerBuilder;\r\nuse Sprint\\Migration\\Builders\\MedialibElementsBuilder;\r\nuse Sprint\\Migration\\Builders\\OptionBuilder;\r\nuse Sprint\\Migration\\Builders\\TransferBuilder;\r\nuse Sprint\\Migration\\Builders\\UserGroupBuilder;\r\nuse Sprint\\Migration\\Builders\\UserOptionsBuilder;\r\nuse Sprint\\Migration\\Builders\\UserTypeEntitiesBuilder;\r\nuse Sprint\\Migration\\Enum\\EventsEnum;\r\nuse Sprint\\Migration\\Enum\\VersionEnum;\r\nuse Sprint\\Migration\\Exceptions\\MigrationException;\r\nuse Sprint\\Migration\\Schema\\AgentSchema;\r\nuse Sprint\\Migration\\Schema\\EventSchema;\r\nuse Sprint\\Migration\\Schema\\GroupSchema;\r\nuse Sprint\\Migration\\Schema\\HlblockSchema;\r\nuse Sprint\\Migration\\Schema\\IblockSchema;\r\nuse Sprint\\Migration\\Schema\\OptionSchema;\r\nuse Sprint\\Migration\\Schema\\UserTypeEntitiesSchema;\r\n\r\nclass VersionConfig\r\n{\r\n    private $configCurrent = '';\r\n    private $configList    = [];\r\n    private $availablekeys = [\r\n        'migration_table',\r\n        'migration_extend_class',\r\n        'stop_on_errors',\r\n        'migration_dir',\r\n        'migration_dir_absolute',\r\n        'version_prefix',\r\n        'version_filter',\r\n        'version_builders',\r\n        'version_schemas',\r\n        'show_admin_interface',\r\n        'version_name_template',\r\n        'console_user',\r\n        'console_auth_events_disable',\r\n        'tracker_task_url',\r\n    ];\r\n\r\n    /**\r\n     * VersionConfig constructor.\r\n     *\r\n     * @param string $configName\r\n     * @param array  $configValues\r\n     *\r\n     * @throws MigrationException\r\n     */\r\n    public function __construct($configName = '', $configValues = [])\r\n    {\r\n        if (!is_string($configName) || !is_array($configValues)) {\r\n            throw new MigrationException(\"Config params error\");\r\n        }\r\n\r\n        if (!empty($configName) && !empty($configValues)) {\r\n            $this->initializeByValues($configName, $configValues);\r\n        } else {\r\n            $this->initializeByName($configName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $configName\r\n     * @param $configValues\r\n     *\r\n     * @throws MigrationException\r\n     */\r\n    protected function initializeByValues($configName, $configValues)\r\n    {\r\n        $this->configList = [\r\n            $configName => $this->prepare($configName, $configValues),\r\n        ];\r\n\r\n        $this->configCurrent = $configName;\r\n    }\r\n\r\n    /**\r\n     * @param $configName\r\n     *\r\n     * @throws MigrationException\r\n     */\r\n    protected function initializeByName($configName)\r\n    {\r\n        $this->configList = $this->searchConfigs(Module::getPhpInterfaceDir());\r\n\r\n        $events = GetModuleEvents(Module::ID, EventsEnum::ON_SEARCH_CONFIG_FILES, true);\r\n\r\n        foreach ($events as $aEvent) {\r\n            $customPath = (string)ExecuteModuleEventEx($aEvent);\r\n            $this->configList = array_merge($this->configList, $this->searchConfigs($customPath));\r\n        }\r\n\r\n        if (!isset($this->configList[VersionEnum::CONFIG_DEFAULT])) {\r\n            $this->configList[VersionEnum::CONFIG_DEFAULT] = $this->prepare(VersionEnum::CONFIG_DEFAULT);\r\n        }\r\n\r\n        uasort(\r\n            $this->configList, function ($a, $b) {\r\n            return ($a['sort'] >= $b['sort']);\r\n        }\r\n        );\r\n\r\n        if (isset($this->configList[$configName])) {\r\n            $this->configCurrent = $configName;\r\n        } else {\r\n            $this->configCurrent = VersionEnum::CONFIG_DEFAULT;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param string $key\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function getCurrent($key = '')\r\n    {\r\n        return ($key) ? $this->configList[$this->configCurrent][$key] : $this->configList[$this->configCurrent];\r\n    }\r\n\r\n    public function getList(): array\r\n    {\r\n        return $this->configList;\r\n    }\r\n\r\n    public function getName()\r\n    {\r\n        return $this->configList[$this->configCurrent]['name'];\r\n    }\r\n\r\n    protected function searchConfigs($directory)\r\n    {\r\n        $result = [];\r\n        $directory = new DirectoryIterator($directory);\r\n        foreach ($directory as $item) {\r\n            if (!$item->isFile()) {\r\n                continue;\r\n            }\r\n\r\n            $configName = $this->getConfigName($item->getFilename());\r\n            if (!$configName) {\r\n                continue;\r\n            }\r\n\r\n            $values = include $item->getPathname();\r\n            if (!$this->isValuesValid($values)) {\r\n                continue;\r\n            }\r\n\r\n            $result[$configName] = $this->prepare($configName, $values, $item->getPathname());\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * @param $fileName\r\n     *\r\n     * @return string\r\n     */\r\n    protected function getConfigName($fileName): string\r\n    {\r\n        if (preg_match('/^migrations\\.([a-z0-9_-]*)\\.php$/i', $fileName, $matches)) {\r\n            return $matches[1];\r\n        }\r\n        return '';\r\n    }\r\n\r\n    protected function isValuesValid($values): bool\r\n    {\r\n        foreach ($this->availablekeys as $key) {\r\n            if (isset($values[$key])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param       $configName\r\n     * @param array $configValues\r\n     * @param false $file\r\n     *\r\n     * @throws MigrationException\r\n     * @return array\r\n     */\r\n    protected function prepare($configName, $configValues = [], $file = false): array\r\n    {\r\n        $configValues = $this->prepareValues($configValues);\r\n\r\n        if (!empty($configValues['title'])) {\r\n            $title = sprintf('%s (%s)', $configValues['title'], $configName);\r\n        } else {\r\n            $title = sprintf('%s (%s)', Locale::getMessage('CFG_TITLE'), $configName);\r\n        }\r\n\r\n        if (!empty($configValues['schema_title'])) {\r\n            $schemaTitle = sprintf('%s (%s)', $configValues['schema_title'], $configName);\r\n        } else {\r\n            $schemaTitle = sprintf('%s (%s)', Locale::getMessage('SCH_TITLE'), $configName);\r\n        }\r\n\r\n        if (isset($configValues['title'])) {\r\n            unset($configValues['title']);\r\n        }\r\n        if (isset($configValues['schema_title'])) {\r\n            unset($configValues['schema_title']);\r\n        }\r\n\r\n        return [\r\n            'name'         => $configName,\r\n            'sort'         => $this->getSort($configName),\r\n            'title'        => $title,\r\n            'schema_title' => $schemaTitle,\r\n            'file'         => $file,\r\n            'values'       => $configValues,\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * @param array $values\r\n     *\r\n     * @throws MigrationException\r\n     * @return array\r\n     */\r\n    protected function prepareValues(array $values = []): array\r\n    {\r\n        if (empty($values['migration_extend_class'])) {\r\n            $values['migration_extend_class'] = 'Version';\r\n        }\r\n\r\n        if (empty($values['migration_table'])) {\r\n            $values['migration_table'] = 'sprint_migration_versions';\r\n        }\r\n\r\n        if (empty($values['migration_dir'])) {\r\n            $values['migration_dir'] = Module::getPhpInterfaceDir() . '/migrations';\r\n        } elseif (empty($values['migration_dir_absolute'])) {\r\n            $values['migration_dir'] = Module::getDocRoot() . $values['migration_dir'];\r\n        }\r\n\r\n        if (!is_dir($values['migration_dir'])) {\r\n            Module::createDir($values['migration_dir']);\r\n            $values['migration_dir'] = realpath($values['migration_dir']);\r\n        } else {\r\n            $values['migration_dir'] = realpath($values['migration_dir']);\r\n        }\r\n\r\n        if (empty($values['version_prefix'])) {\r\n            $values['version_prefix'] = 'Version';\r\n        }\r\n\r\n        if (!isset($values['version_filter']) || !is_array($values['version_filter'])) {\r\n            $values['version_filter'] = [];\r\n        }\r\n\r\n        if (isset($values['show_admin_interface'])) {\r\n            $values['show_admin_interface'] = (bool)$values['show_admin_interface'];\r\n        } else {\r\n            $values['show_admin_interface'] = true;\r\n        }\r\n\r\n        if (isset($values['stop_on_errors'])) {\r\n            $values['stop_on_errors'] = (bool)$values['stop_on_errors'];\r\n        } else {\r\n            $values['stop_on_errors'] = false;\r\n        }\r\n\r\n        if (isset($values['console_auth_events_disable'])) {\r\n            $values['console_auth_events_disable'] = (bool)$values['console_auth_events_disable'];\r\n        } else {\r\n            $values['console_auth_events_disable'] = true;\r\n        }\r\n\r\n        $cond1 = isset($values['console_user']);\r\n        $cond2 = ($cond1 && $values['console_user'] === false);\r\n        $cond3 = ($cond1 && strpos($values['console_user'], 'login:') === 0);\r\n\r\n        $values['console_user'] = ($cond2 || $cond3) ? $values['console_user'] : 'admin';\r\n\r\n        if (empty($values['version_builders']) || !is_array($values['version_builders'])) {\r\n            $values['version_builders'] = VersionConfig::getDefaultBuilders();\r\n        }\r\n\r\n        if (!empty($values['version_schemas']) || !is_array($values['version_schemas'])) {\r\n            $values['version_schemas'] = VersionConfig::getDefaultSchemas();\r\n        }\r\n\r\n        if (empty($values['tracker_task_url'])) {\r\n            $values['tracker_task_url'] = '';\r\n        }\r\n\r\n        if (empty($values['version_name_template'])) {\r\n            $values['version_name_template'] = '#NAME##TIMESTAMP#';\r\n        }\r\n\r\n        if (\r\n            (strpos($values['version_name_template'], '#TIMESTAMP#') === false)\r\n            || (strpos($values['version_name_template'], '#NAME#') === false)\r\n        ) {\r\n            throw new MigrationException(\"Config version_name_template format error\");\r\n        }\r\n\r\n        ksort($values);\r\n        return $values;\r\n    }\r\n\r\n    /**\r\n     * @param array $values\r\n     *\r\n     * @return array|mixed\r\n     */\r\n    public function humanValues($values = [])\r\n    {\r\n        foreach ($values as $key => $val) {\r\n            if ($val === true || $val === false) {\r\n                $val = ($val) ? 'yes' : 'no';\r\n                $val = Locale::getMessage('CONFIG_' . $val);\r\n            } elseif (is_array($val)) {\r\n                $fres = [];\r\n                foreach ($val as $fkey => $fval) {\r\n                    $fres[] = '[' . $fkey . '] => ' . $fval;\r\n                }\r\n                $val = implode(PHP_EOL, $fres);\r\n            }\r\n            $values[$key] = (string)$val;\r\n        }\r\n        return $values;\r\n    }\r\n\r\n    /**\r\n     * @param        $name\r\n     * @param string $default\r\n     *\r\n     * @return bool|mixed|string\r\n     */\r\n    public function getVal($name, $default = '')\r\n    {\r\n        $values = $this->configList[$this->configCurrent]['values'];\r\n\r\n        if (isset($values[$name])) {\r\n            if (is_bool($values[$name])) {\r\n                return $values[$name];\r\n            } elseif (!empty($values[$name])) {\r\n                return $values[$name];\r\n            }\r\n        }\r\n\r\n        return $default;\r\n    }\r\n\r\n    /**\r\n     * @param string $configName\r\n     * @param array  $configValues\r\n     *\r\n     * @return bool\r\n     */\r\n    public function createConfig($configName, $configValues = []): bool\r\n    {\r\n        $fileName = 'migrations.' . $configName . '.php';\r\n        if (!$this->getConfigName($fileName)) {\r\n            return false;\r\n        }\r\n\r\n        $configPath = Module::getPhpInterfaceDir() . '/' . $fileName;\r\n        if (is_file($configPath)) {\r\n            return false;\r\n        }\r\n\r\n        if (isset($this->configList[$configName])) {\r\n            $curValues = $this->configList[$configName]['values'];\r\n            $configDefaults = [\r\n                'migration_dir'   => Module::getRelativeDir($curValues['migration_dir']),\r\n                'migration_table' => $curValues['migration_table'],\r\n            ];\r\n        } else {\r\n            $configDefaults = [\r\n                'migration_dir'   => $this->getSiblingDir($configName, true),\r\n                'migration_table' => 'sprint_migration_' . $configName,\r\n            ];\r\n        }\r\n\r\n        $configValues = array_merge($configDefaults, $configValues);\r\n\r\n        file_put_contents($configPath, '<?php return ' . var_export($configValues, 1) . ';');\r\n        return is_file($configPath);\r\n    }\r\n\r\n    public function createConfigArchive(): bool\r\n    {\r\n        return $this->createConfig(\r\n            VersionEnum::CONFIG_ARCHIVE,\r\n            [\r\n                'title'           => Locale::getMessage('CONFIG_archive'),\r\n                'migration_dir'   => $this->getSiblingDir('archive', true),\r\n                'migration_table' => 'sprint_migration_archive',\r\n            ]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param $configName\r\n     *\r\n     * @throws Exception\r\n     * @return bool\r\n     */\r\n    public function deleteConfig($configName)\r\n    {\r\n        $fileName = 'migrations.' . $configName . '.php';\r\n        if (!$this->getConfigName($fileName)) {\r\n            return false;\r\n        }\r\n\r\n        if (!isset($this->configList[$configName])) {\r\n            return false;\r\n        }\r\n\r\n        $configFile = $this->configList[$configName]['file'];\r\n\r\n        $vmFrom = new VersionManager($configName);\r\n        $vmFrom->clean();\r\n\r\n        if (!empty($configFile) && is_file($configFile)) {\r\n            unlink($configFile);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param        $dirname\r\n     * @param false  $relative\r\n     * @param string $configName\r\n     *\r\n     * @return false|string|string[]\r\n     */\r\n    public function getSiblingDir($dirname, $relative = false, $configName = VersionEnum::CONFIG_DEFAULT)\r\n    {\r\n        $def = $this->configList[$configName];\r\n        $dir = rtrim($def['values']['migration_dir'], '/');\r\n        $dir = $dir . '.' . trim($dirname, '/') . '/';\r\n\r\n        return ($relative) ? Module::getRelativeDir($dir) : $dir;\r\n    }\r\n\r\n    /**\r\n     * @param $configName\r\n     *\r\n     * @return int\r\n     */\r\n    protected function getSort($configName)\r\n    {\r\n        if ($configName == VersionEnum::CONFIG_ARCHIVE) {\r\n            return 110;\r\n        } elseif ($configName == VersionEnum::CONFIG_DEFAULT) {\r\n            return 100;\r\n        } else {\r\n            return 500;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод должен быть публичным для работы со сторонним кодом\r\n     *\r\n     * @return string[]\r\n     */\r\n    public static function getDefaultBuilders()\r\n    {\r\n        return [\r\n            'UserGroupBuilder'        => UserGroupBuilder::class,\r\n            'IblockBuilder'           => IblockBuilder::class,\r\n            'HlblockBuilder'          => HlblockBuilder::class,\r\n            'IblockElementsBuilder'   => IblockElementsBuilder::class,\r\n            'IblockCategoryBuilder'   => IblockCategoryBuilder::class,\r\n            'HlblockElementsBuilder'  => HlblockElementsBuilder::class,\r\n            'UserTypeEntitiesBuilder' => UserTypeEntitiesBuilder::class,\r\n            'AgentBuilder'            => AgentBuilder::class,\r\n            'OptionBuilder'           => OptionBuilder::class,\r\n            'FormBuilder'             => FormBuilder::class,\r\n            'EventBuilder'            => EventBuilder::class,\r\n            'UserOptionsBuilder'      => UserOptionsBuilder::class,\r\n            'MedialibElementsBuilder' => MedialibElementsBuilder::class,\r\n            'BlankBuilder'            => BlankBuilder::class,\r\n            'CacheCleanerBuilder'     => CacheCleanerBuilder::class,\r\n            'MarkerBuilder'           => MarkerBuilder::class,\r\n            'TransferBuilder'         => TransferBuilder::class,\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Метод должен быть публичным для работы со сторонним кодом\r\n     *\r\n     * @return string[]\r\n     */\r\n    public static function getDefaultSchemas()\r\n    {\r\n        return [\r\n            'IblockSchema'           => IblockSchema::class,\r\n            'HlblockSchema'          => HlblockSchema::class,\r\n            'UserTypeEntitiesSchema' => UserTypeEntitiesSchema::class,\r\n            'AgentSchema'            => AgentSchema::class,\r\n            'GroupSchema'            => GroupSchema::class,\r\n            'OptionSchema'           => OptionSchema::class,\r\n            'EventSchema'            => EventSchema::class,\r\n        ];\r\n    }\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/versionconfig.php b/local/modules/sprint.migration/lib/versionconfig.php
--- a/local/modules/sprint.migration/lib/versionconfig.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/versionconfig.php	(date 1670844554000)
@@ -39,11 +39,11 @@
     private $availablekeys = [
         'migration_table',
         'migration_extend_class',
-        'stop_on_errors',
         'migration_dir',
         'migration_dir_absolute',
+        'exchange_dir',
+        'exchange_dir_absolute',
         'version_prefix',
-        'version_filter',
         'version_builders',
         'version_schemas',
         'show_admin_interface',
@@ -260,26 +260,25 @@
             $values['migration_dir'] = realpath($values['migration_dir']);
         }
 
+        if (empty($values['exchange_dir'])) {
+            $values['exchange_dir'] = $values['migration_dir'];
+        } else {
+            $values['exchange_dir'] = rtrim($values['exchange_dir'], DIRECTORY_SEPARATOR);
+            if (empty($values['exchange_dir_absolute'])) {
+                $values['exchange_dir'] = Module::getDocRoot() . $values['exchange_dir'];
+            }
+        }
+
         if (empty($values['version_prefix'])) {
             $values['version_prefix'] = 'Version';
         }
 
-        if (!isset($values['version_filter']) || !is_array($values['version_filter'])) {
-            $values['version_filter'] = [];
-        }
-
         if (isset($values['show_admin_interface'])) {
             $values['show_admin_interface'] = (bool)$values['show_admin_interface'];
         } else {
             $values['show_admin_interface'] = true;
         }
 
-        if (isset($values['stop_on_errors'])) {
-            $values['stop_on_errors'] = (bool)$values['stop_on_errors'];
-        } else {
-            $values['stop_on_errors'] = false;
-        }
-
         if (isset($values['console_auth_events_disable'])) {
             $values['console_auth_events_disable'] = (bool)$values['console_auth_events_disable'];
         } else {
@@ -431,7 +430,9 @@
 
         $configFile = $this->configList[$configName]['file'];
 
-        $vmFrom = new VersionManager($configName);
+        $vmFrom = new VersionManager(
+            new VersionConfig($configName)
+        );
         $vmFrom->clean();
 
         if (!empty($configFile) && is_file($configFile)) {
Index: local/modules/sprint.migration/lib/exchangeentity.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse ReflectionClass;\r\nuse ReflectionException;\r\nuse Sprint\\Migration\\Exceptions\\ExchangeException;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\n\r\nabstract class ExchangeEntity\r\n{\r\n    use OutTrait;\r\n\r\n    /**\r\n     * @var array\r\n     */\r\n    protected $params = [];\r\n\r\n    /**\r\n     * @throws RestartException\r\n     */\r\n    public function restart()\r\n    {\r\n        throw new RestartException();\r\n    }\r\n\r\n    /**\r\n     * @return array\r\n     */\r\n    public function getRestartParams()\r\n    {\r\n        return $this->params;\r\n    }\r\n\r\n    /**\r\n     * @param array $params\r\n     */\r\n    public function setRestartParams($params = [])\r\n    {\r\n        $this->params = $params;\r\n    }\r\n\r\n    /**\r\n     * @param $name\r\n     *\r\n     * @throws ExchangeException\r\n     * @return string\r\n     */\r\n    public function getResourceFile($name)\r\n    {\r\n        $classInfo = new ReflectionClass($this);\r\n        return dirname($classInfo->getFileName()) . '/' . $classInfo->getShortName() . '_files/' . $name;\r\n    }\r\n\r\n    /**\r\n     * @throws ExchangeException\r\n     * @return string\r\n     */\r\n    public function getClassName()\r\n    {\r\n        $classInfo = new ReflectionClass($this);\r\n        $name = $classInfo->getShortName();\r\n\r\n        $this->exitIfEmpty(\r\n            $name,\r\n            Locale::getMessage(\r\n                'ERR_CLASS_NOT_FOUND',\r\n                [\r\n                    '#NAME#' => $name,\r\n                ]\r\n            )\r\n        );\r\n        return $name;\r\n    }\r\n\r\n    /**\r\n     * @param $msg\r\n     *\r\n     * @throws ExchangeException\r\n     */\r\n    public function exitWithMessage($msg)\r\n    {\r\n        throw new ExchangeException($msg);\r\n    }\r\n\r\n    /**\r\n     * @param $cond\r\n     * @param $msg\r\n     *\r\n     * @throws ExchangeException\r\n     */\r\n    public function exitIf($cond, $msg)\r\n    {\r\n        if ($cond) {\r\n            throw new ExchangeException($msg);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $var\r\n     * @param $msg\r\n     *\r\n     * @throws ExchangeException\r\n     */\r\n    public function exitIfEmpty($var, $msg)\r\n    {\r\n        if (empty($var)) {\r\n            throw new ExchangeException($msg);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/exchangeentity.php b/local/modules/sprint.migration/lib/exchangeentity.php
--- a/local/modules/sprint.migration/lib/exchangeentity.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/exchangeentity.php	(date 1670844554000)
@@ -3,18 +3,40 @@
 namespace Sprint\Migration;
 
 use ReflectionClass;
-use ReflectionException;
-use Sprint\Migration\Exceptions\ExchangeException;
+use Sprint\Migration\Exceptions\MigrationException;
 use Sprint\Migration\Exceptions\RestartException;
 
 abstract class ExchangeEntity
 {
-    use OutTrait;
-
     /**
      * @var array
      */
     protected $params = [];
+    private   $versionConfig;
+
+    /**
+     * @return VersionConfig
+     */
+    public function getVersionConfig()
+    {
+        return $this->versionConfig;
+    }
+
+    /**
+     * Не использовать
+     * @param VersionConfig $versionConfig
+     *
+     * @return void
+     */
+    public function setVersionConfig(VersionConfig $versionConfig)
+    {
+        $this->versionConfig = $versionConfig;
+    }
+
+    public function getClassName()
+    {
+        return (new ReflectionClass($this))->getShortName();
+    }
 
     /**
      * @throws RestartException
@@ -39,73 +61,4 @@
     {
         $this->params = $params;
     }
-
-    /**
-     * @param $name
-     *
-     * @throws ExchangeException
-     * @return string
-     */
-    public function getResourceFile($name)
-    {
-        $classInfo = new ReflectionClass($this);
-        return dirname($classInfo->getFileName()) . '/' . $classInfo->getShortName() . '_files/' . $name;
-    }
-
-    /**
-     * @throws ExchangeException
-     * @return string
-     */
-    public function getClassName()
-    {
-        $classInfo = new ReflectionClass($this);
-        $name = $classInfo->getShortName();
-
-        $this->exitIfEmpty(
-            $name,
-            Locale::getMessage(
-                'ERR_CLASS_NOT_FOUND',
-                [
-                    '#NAME#' => $name,
-                ]
-            )
-        );
-        return $name;
-    }
-
-    /**
-     * @param $msg
-     *
-     * @throws ExchangeException
-     */
-    public function exitWithMessage($msg)
-    {
-        throw new ExchangeException($msg);
-    }
-
-    /**
-     * @param $cond
-     * @param $msg
-     *
-     * @throws ExchangeException
-     */
-    public function exitIf($cond, $msg)
-    {
-        if ($cond) {
-            throw new ExchangeException($msg);
-        }
-    }
-
-    /**
-     * @param $var
-     * @param $msg
-     *
-     * @throws ExchangeException
-     */
-    public function exitIfEmpty($var, $msg)
-    {
-        if (empty($var)) {
-            throw new ExchangeException($msg);
-        }
-    }
 }
Index: local/modules/sprint.migration/lib/versionmanager.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse CMain;\r\nuse DirectoryIterator;\r\nuse Exception;\r\nuse ReflectionClass;\r\nuse SplFileInfo;\r\nuse Sprint\\Migration\\Enum\\VersionEnum;\r\nuse Sprint\\Migration\\Exceptions\\MigrationException;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\nuse Sprint\\Migration\\Tables\\VersionTable;\r\nuse Throwable;\r\n\r\nclass VersionManager\r\n{\r\n    /** @var VersionConfig */\r\n    private $versionConfig = null;\r\n    /** @var VersionTable */\r\n    private $versionTable = null;\r\n    private $restarts = [];\r\n    private $lastException = null;\r\n\r\n    /**\r\n     * VersionManager constructor.\r\n     *\r\n     * @param string $configName\r\n     *\r\n     * @throws Exception\r\n     */\r\n    public function __construct($configName = '')\r\n    {\r\n        if ($configName instanceof VersionConfig) {\r\n            $this->versionConfig = $configName;\r\n        } else {\r\n            $this->versionConfig = new VersionConfig(\r\n                $configName\r\n            );\r\n        }\r\n\r\n        $this->versionTable = new VersionTable(\r\n            $this->getVersionConfig()->getVal('migration_table')\r\n        );\r\n\r\n        $this->lastException = new Exception();\r\n    }\r\n\r\n    public function getVersionConfig()\r\n    {\r\n        return $this->versionConfig;\r\n    }\r\n\r\n    public function getVersionTable()\r\n    {\r\n        return $this->versionTable;\r\n    }\r\n\r\n    /**\r\n     * @param        $versionName\r\n     * @param string $action\r\n     * @param array  $params\r\n     * @param bool   $force\r\n     * @param string $tag\r\n     *\r\n     * @return bool\r\n     */\r\n    public function startMigration(\r\n        $versionName,\r\n        $action = VersionEnum::ACTION_UP,\r\n        $params = [],\r\n        $force = false,\r\n        $tag = ''\r\n    ) {\r\n        if (isset($this->restarts[$versionName])) {\r\n            unset($this->restarts[$versionName]);\r\n        }\r\n\r\n        $this->lastException = new Exception();\r\n\r\n        try {\r\n            $meta = $this->getVersionByName($versionName);\r\n\r\n            if (!$meta || empty($meta['class'])) {\r\n                throw new MigrationException('failed to initialize migration');\r\n            }\r\n\r\n            if ($meta['older']) {\r\n                throw new MigrationException('unsupported version ' . $meta['older']);\r\n            }\r\n\r\n            if (!$force) {\r\n                if ($action == VersionEnum::ACTION_UP && $meta['status'] != VersionEnum::STATUS_NEW) {\r\n                    throw new MigrationException('migration already up');\r\n                }\r\n\r\n                if ($action == VersionEnum::ACTION_DOWN && $meta['status'] != VersionEnum::STATUS_INSTALLED) {\r\n                    throw new MigrationException('migration already down');\r\n                }\r\n            }\r\n\r\n            /** @var $versionInstance Version */\r\n            $versionInstance = new $meta['class'];\r\n\r\n            $versionInstance->setRestartParams($params);\r\n\r\n            if ($action == VersionEnum::ACTION_UP) {\r\n                $this->checkResultAfterStart($versionInstance->up());\r\n\r\n                $meta['tag'] = $tag;\r\n\r\n                $this->getVersionTable()->addRecord($meta);\r\n            } else {\r\n                $this->checkResultAfterStart($versionInstance->down());\r\n\r\n                $this->getVersionTable()->removeRecord($meta);\r\n            }\r\n\r\n            return true;\r\n        } catch (RestartException $e) {\r\n            $this->restarts[$versionName] = isset($versionInstance) ? $versionInstance->getRestartParams() : [];\r\n        } catch (Throwable $e) {\r\n            $this->lastException = $e;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param $versionName\r\n     *\r\n     * @throws MigrationException\r\n     * @return array|bool\r\n     */\r\n    public function getVersionByName($versionName)\r\n    {\r\n        if ($this->checkVersionName($versionName)) {\r\n            return $this->prepVersionMeta(\r\n                $versionName,\r\n                $this->getFileIfExists($versionName),\r\n                $this->getRecordIfExists($versionName)\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param array $filter\r\n     *\r\n     * @throws MigrationException\r\n     * @return array\r\n     */\r\n    public function getVersions($filter = [])\r\n    {\r\n        /** @var  $versionFilter array */\r\n        $versionFilter = $this->getVersionConfig()->getVal('version_filter', []);\r\n\r\n        $filter = array_merge(\r\n            $versionFilter, [\r\n            'status'   => '',\r\n            'search'   => '',\r\n            'tag'      => '',\r\n            'modified' => '',\r\n            'older'    => '',\r\n        ], $filter\r\n        );\r\n\r\n        $merge = [];\r\n\r\n        $records = $this->getRecords();\r\n        $files = $this->getFiles();\r\n\r\n        foreach ($records as $item) {\r\n            $merge[$item['version']] = $item['ts'];\r\n        }\r\n\r\n        foreach ($files as $item) {\r\n            $merge[$item['version']] = $item['ts'];\r\n        }\r\n\r\n        if ($filter['status'] == VersionEnum::STATUS_INSTALLED || $filter['status'] == VersionEnum::STATUS_UNKNOWN) {\r\n            arsort($merge);\r\n        } else {\r\n            asort($merge);\r\n        }\r\n\r\n        $result = [];\r\n        foreach ($merge as $version => $ts) {\r\n            $record = isset($records[$version]) ? $records[$version] : 0;\r\n            $file = isset($files[$version]) ? $files[$version] : 0;\r\n\r\n            $meta = $this->prepVersionMeta($version, $file, $record);\r\n\r\n            if (\r\n                $this->isVersionEnabled($meta)\r\n                && $this->containsFilterStatus($meta, $filter)\r\n                && $this->containsFilterSearch($meta, $filter)\r\n                && $this->containsFilterTag($meta, $filter)\r\n                && $this->containsFilterModified($meta, $filter)\r\n                && $this->containsFilterOlder($meta, $filter)\r\n                && $this->containsFilterVersion($meta, $filter)\r\n            ) {\r\n                $result[] = $meta;\r\n            }\r\n        }\r\n        return $result;\r\n    }\r\n\r\n    public function needRestart($version)\r\n    {\r\n        return (isset($this->restarts[$version])) ? 1 : 0;\r\n    }\r\n\r\n    public function getRestartParams($version)\r\n    {\r\n        return $this->restarts[$version];\r\n    }\r\n\r\n    public function getLastException()\r\n    {\r\n        return $this->lastException;\r\n    }\r\n\r\n    /**\r\n     * @param $name\r\n     * @param $params\r\n     *\r\n     * @return bool|AbstractBuilder\r\n     */\r\n    public function createBuilder($name, $params = [])\r\n    {\r\n        $builders = $this->getVersionConfig()->getVal('version_builders', []);\r\n\r\n        if (empty($builders[$name])) {\r\n            return false;\r\n        }\r\n\r\n        $class = $builders[$name];\r\n\r\n        if (!class_exists($class)) {\r\n            return false;\r\n        }\r\n\r\n        /** @var  $builder AbstractBuilder */\r\n        $builder = new $class($this->getVersionConfig(), $name, $params);\r\n\r\n        if (!$builder->isEnabled()) {\r\n            return false;\r\n        }\r\n\r\n        $builder->initializeBuilder();\r\n        return $builder;\r\n    }\r\n\r\n    /**\r\n     * @param $search\r\n     * @param $status\r\n     *\r\n     * @throws MigrationException\r\n     * @return array\r\n     */\r\n    public function markMigration($search, $status)\r\n    {\r\n        // $search - VersionName | new | installed | unknown\r\n        // $status - new | installed\r\n\r\n        $search = trim($search);\r\n        $status = trim($status);\r\n\r\n        $result = [];\r\n        if (in_array(\r\n            $status, [\r\n            VersionEnum::STATUS_NEW,\r\n            VersionEnum::STATUS_INSTALLED,\r\n        ]\r\n        )) {\r\n            if ($this->checkVersionName($search)) {\r\n                $meta = $this->getVersionByName($search);\r\n                $meta = !empty($meta) ? $meta : ['version' => $search];\r\n                $result[] = $this->markMigrationByMeta($meta, $status);\r\n            } elseif (in_array(\r\n                $search,\r\n                [\r\n                    VersionEnum::STATUS_NEW,\r\n                    VersionEnum::STATUS_INSTALLED,\r\n                    VersionEnum::STATUS_UNKNOWN,\r\n                ]\r\n            )) {\r\n                $metas = $this->getVersions(['status' => $search]);\r\n                foreach ($metas as $meta) {\r\n                    $result[] = $this->markMigrationByMeta($meta, $status);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (empty($result)) {\r\n            $result[] = [\r\n                'message' => Locale::getMessage('MARK_ERROR4'),\r\n                'success' => false,\r\n            ];\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    public function getVersionFile($versionName)\r\n    {\r\n        $dir = $this->getVersionConfig()->getVal('migration_dir');\r\n        return $dir . '/' . $versionName . '.php';\r\n    }\r\n\r\n    public function checkVersionName($versionName)\r\n    {\r\n        return $this->getVersionTimestamp($versionName) ? true : false;\r\n    }\r\n\r\n    public function getVersionTimestamp($versionName)\r\n    {\r\n        $matches = [];\r\n        if (preg_match('/20\\d{12}/', $versionName, $matches)) {\r\n            return end($matches);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public function getWebDir()\r\n    {\r\n        $dir = $this->getVersionConfig()->getVal('migration_dir');\r\n        if (strpos($dir, Module::getDocRoot()) === 0) {\r\n            return substr($dir, strlen(Module::getDocRoot()));\r\n        }\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @return array\r\n     */\r\n    public function getRecords()\r\n    {\r\n        $result = [];\r\n\r\n        $records = $this->getVersionTable()->getRecords();\r\n        foreach ($records as $item) {\r\n            if (empty($item['version'])) {\r\n                continue;\r\n            }\r\n\r\n            $timestamp = $this->getVersionTimestamp($item['version']);\r\n            if (!$timestamp) {\r\n                continue;\r\n            }\r\n\r\n            $item['ts'] = $timestamp;\r\n\r\n            $result[$item['version']] = $item;\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    public function getFiles()\r\n    {\r\n        $dir = $this->getVersionConfig()->getVal('migration_dir');\r\n        $files = [];\r\n\r\n        /* @var $item SplFileInfo */\r\n        $items = new DirectoryIterator($dir);\r\n        foreach ($items as $item) {\r\n            if (!$item->isFile()) {\r\n                continue;\r\n            }\r\n\r\n            if ($item->getExtension() != 'php') {\r\n                continue;\r\n            }\r\n\r\n            $filename = pathinfo($item->getPathname(), PATHINFO_FILENAME);\r\n            $timestamp = $this->getVersionTimestamp($filename);\r\n\r\n            if (!$timestamp) {\r\n                continue;\r\n            }\r\n\r\n            $files[$filename] = [\r\n                'version'  => $filename,\r\n                'location' => $item->getPathname(),\r\n                'ts'       => $timestamp,\r\n            ];\r\n        }\r\n\r\n        return $files;\r\n    }\r\n\r\n    public function clean()\r\n    {\r\n        $dir = $this->getVersionConfig()->getVal('migration_dir');\r\n\r\n        $files = $this->getFiles();\r\n        foreach ($files as $meta) {\r\n            unlink($meta['location']);\r\n        }\r\n\r\n        if (!empty($dir) && is_dir($dir)) {\r\n            if (count(scandir($dir)) == 2) {\r\n                rmdir($dir);\r\n            }\r\n        }\r\n\r\n        $this->getVersionTable()\r\n             ->deleteTable();\r\n    }\r\n\r\n    /**\r\n     * @param $versionName\r\n     *\r\n     * @throws MigrationException\r\n     * @return array\r\n     */\r\n    public function deleteMigration($versionName)\r\n    {\r\n        $result = [];\r\n\r\n        if (in_array(\r\n            $versionName, [\r\n            VersionEnum::STATUS_NEW,\r\n            VersionEnum::STATUS_INSTALLED,\r\n            VersionEnum::STATUS_UNKNOWN,\r\n        ]\r\n        )) {\r\n            $metas = $this->getVersions(['status' => $versionName]);\r\n        } elseif ($meta = $this->getVersionByName($versionName)) {\r\n            $metas = [$meta];\r\n        }\r\n\r\n        if (!empty($metas)) {\r\n            foreach ($metas as $meta) {\r\n                $result[] = $this->deleteMigratioByMeta($meta);\r\n            }\r\n        } else {\r\n            $result[] = [\r\n                'message' => Locale::getMessage('DELETE_ERROR1'),\r\n                'success' => 0,\r\n            ];\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * @param        $versionName\r\n     * @param string $tag\r\n     *\r\n     * @throws MigrationException\r\n     * @return array\r\n     */\r\n    public function setMigrationTag($versionName, $tag = '')\r\n    {\r\n        $result = [];\r\n\r\n        if (in_array(\r\n            $versionName, [\r\n            VersionEnum::STATUS_INSTALLED,\r\n            VersionEnum::STATUS_UNKNOWN,\r\n        ]\r\n        )) {\r\n            $metas = $this->getVersions(['status' => $versionName]);\r\n        } elseif ($meta = $this->getVersionByName($versionName)) {\r\n            $metas = [$meta];\r\n        }\r\n\r\n        if (!empty($metas)) {\r\n            foreach ($metas as $meta) {\r\n                $result[] = $this->setMigrationTagByMeta($meta, $tag);\r\n            }\r\n        } else {\r\n            $result[] = [\r\n                'message' => Locale::getMessage('SETTAG_ERROR1'),\r\n                'success' => 0,\r\n            ];\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * @param                $versionName\r\n     * @param VersionManager $vmTo\r\n     *\r\n     * @throws MigrationException\r\n     * @return array\r\n     */\r\n    public function transferMigration($versionName, VersionManager $vmTo)\r\n    {\r\n        $result = [];\r\n\r\n        if ($this->getVersionConfig()->getName() == $vmTo->getVersionConfig()->getName()) {\r\n            $result[] = [\r\n                'message' => Locale::getMessage('TRANSFER_ERROR2'),\r\n                'success' => 0,\r\n            ];\r\n            return $result;\r\n        }\r\n\r\n        if (in_array(\r\n            $versionName, [\r\n            VersionEnum::STATUS_NEW,\r\n            VersionEnum::STATUS_INSTALLED,\r\n            VersionEnum::STATUS_UNKNOWN,\r\n        ]\r\n        )) {\r\n            $metas = $this->getVersions(['status' => $versionName]);\r\n        } elseif ($versionName == 'all') {\r\n            $metas = $this->getVersions([]);\r\n        } elseif ($meta = $this->getVersionByName($versionName)) {\r\n            $metas = [$meta];\r\n        }\r\n\r\n        if (!empty($metas)) {\r\n            foreach ($metas as $meta) {\r\n                $result[] = $this->transferMigrationByMeta($meta, $vmTo);\r\n            }\r\n        } else {\r\n            $result[] = [\r\n                'message' => Locale::getMessage('TRANSFER_ERROR1'),\r\n                'success' => 0,\r\n            ];\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * @param $meta\r\n     * @param $status\r\n     *\r\n     * @return array\r\n     */\r\n    protected function markMigrationByMeta($meta, $status)\r\n    {\r\n        $msg = 'MARK_ERROR3';\r\n        $success = false;\r\n\r\n        if ($status == VersionEnum::STATUS_NEW) {\r\n            if ($meta['is_record']) {\r\n                $this->getVersionTable()->removeRecord($meta);\r\n                if ($meta['is_file']) {\r\n                    $msg = 'MARK_SUCCESS1';\r\n                    $success = true;\r\n                } else {\r\n                    $msg = 'MARK_SUCCESS3';\r\n                    $success = true;\r\n                }\r\n            } else {\r\n                $msg = 'MARK_ERROR1';\r\n            }\r\n        } elseif ($status == VersionEnum::STATUS_INSTALLED) {\r\n            if (!$meta['is_record']) {\r\n                $this->getVersionTable()->addRecord($meta);\r\n                $msg = 'MARK_SUCCESS2';\r\n                $success = true;\r\n            } else {\r\n                $msg = 'MARK_ERROR2';\r\n            }\r\n        }\r\n\r\n        return [\r\n            'message' => Locale::getMessage($msg, ['#VERSION#' => $meta['version']]),\r\n            'success' => $success,\r\n        ];\r\n    }\r\n\r\n    protected function isVersionEnabled($meta)\r\n    {\r\n        return (isset($meta['enabled']) && $meta['enabled']);\r\n    }\r\n\r\n    protected function containsFilterVersion($meta, $filter)\r\n    {\r\n        unset($filter['status']);\r\n        unset($filter['search']);\r\n        unset($filter['tag']);\r\n        unset($filter['modified']);\r\n        unset($filter['older']);\r\n\r\n        foreach ($filter as $k => $v) {\r\n            if (empty($meta['version_filter'][$k]) || $meta['version_filter'][$k] != $v) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected function containsFilterTag($meta, $filter)\r\n    {\r\n        if (empty($filter['tag'])) {\r\n            return true;\r\n        }\r\n\r\n        return ($meta['tag'] == $filter['tag']);\r\n    }\r\n\r\n    protected function containsFilterModified($meta, $filter)\r\n    {\r\n        if (empty($filter['modified'])) {\r\n            return true;\r\n        }\r\n\r\n        return ($meta['modified']);\r\n    }\r\n\r\n    protected function containsFilterOlder($meta, $filter)\r\n    {\r\n        if (empty($filter['older'])) {\r\n            return true;\r\n        }\r\n\r\n        return ($meta['older']);\r\n    }\r\n\r\n    protected function containsFilterSearch($meta, $filter)\r\n    {\r\n        if (empty($filter['search'])) {\r\n            return true;\r\n        }\r\n\r\n        $textindex = $meta['version'] . $meta['description'] . $meta['tag'];\r\n        $searchword = $filter['search'];\r\n\r\n        $textindex = Locale::convertToUtf8IfNeed($textindex);\r\n        $searchword = Locale::convertToUtf8IfNeed($searchword);\r\n\r\n        $searchword = trim($searchword);\r\n\r\n        if (false !== mb_stripos($textindex, $searchword, null, 'utf-8')) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected function containsFilterStatus($meta, $filter)\r\n    {\r\n        if (empty($filter['status'])) {\r\n            return true;\r\n        }\r\n\r\n        if ($filter['status'] == $meta['status']) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param $versionName\r\n     * @param $file\r\n     * @param $record\r\n     *\r\n     * @throws MigrationException\r\n     * @return array|bool\r\n     */\r\n    protected function prepVersionMeta($versionName, $file, $record)\r\n    {\r\n        $isFile = ($file) ? 1 : 0;\r\n        $isRecord = ($record) ? 1 : 0;\r\n\r\n        $meta = [\r\n            'is_file'   => $isFile,\r\n            'is_record' => $isRecord,\r\n            'version'   => $versionName,\r\n            'enabled'   => true,\r\n            'modified'  => false,\r\n            'older'     => false,\r\n            'hash'      => '',\r\n            'tag'       => '',\r\n        ];\r\n\r\n        if ($isRecord && $isFile) {\r\n            $meta['status'] = VersionEnum::STATUS_INSTALLED;\r\n        } elseif (!$isRecord && $isFile) {\r\n            $meta['status'] = VersionEnum::STATUS_NEW;\r\n        } elseif ($isRecord && !$isFile) {\r\n            $meta['status'] = VersionEnum::STATUS_UNKNOWN;\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n        if ($isRecord) {\r\n            $meta['tag'] = $record['tag'];\r\n        }\r\n\r\n        if (!$isFile) {\r\n            return $meta;\r\n        }\r\n\r\n        $meta['location'] = $file['location'];\r\n\r\n        try {\r\n            require_once($file['location']);\r\n\r\n            $class = 'Sprint\\Migration\\\\' . $versionName;\r\n            if (!class_exists($class)) {\r\n                return $meta;\r\n            }\r\n\r\n            /** @var $versionInstance Version */\r\n            $versionInstance = (new ReflectionClass($class))\r\n                ->newInstanceWithoutConstructor();\r\n            $meta['class'] = $class;\r\n            $meta['description'] = $this->purifyDescriptionForMeta(\r\n                $versionInstance->getDescription()\r\n            );\r\n            $meta['version_filter'] = $versionInstance->getVersionFilter();\r\n            $meta['enabled'] = $versionInstance->isVersionEnabled();\r\n\r\n            $v1 = $versionInstance->getModuleVersion();\r\n            $v2 = Module::getVersion();\r\n\r\n            if ($v1 && version_compare($v1, $v2, '>')) {\r\n                $meta['older'] = $v1;\r\n            }\r\n\r\n            $meta['hash'] = md5(file_get_contents($meta['location']));\r\n            if (!empty($record['hash'])) {\r\n                $meta['modified'] = ($meta['hash'] != $record['hash']);\r\n            }\r\n        } catch (Throwable $e) {\r\n        }\r\n\r\n        return $meta;\r\n    }\r\n\r\n    protected function getFileIfExists($versionName)\r\n    {\r\n        $file = $this->getVersionFile($versionName);\r\n        return file_exists($file) ? [\r\n            'version'  => $versionName,\r\n            'location' => $file,\r\n        ] : 0;\r\n    }\r\n\r\n    /**\r\n     * @param $versionName\r\n     *\r\n     * @return array|false|int\r\n     */\r\n    protected function getRecordIfExists($versionName)\r\n    {\r\n        $record = $this->getVersionTable()->getRecord($versionName);\r\n        return ($record && isset($record['version'])) ? $record : 0;\r\n    }\r\n\r\n    protected function purifyDescriptionForMeta($descr = '')\r\n    {\r\n        $descr = (string)$descr;\r\n        $descr = str_replace([\"\\n\\r\", \"\\r\\n\", \"\\n\", \"\\r\"], ' ', $descr);\r\n        $descr = strip_tags($descr);\r\n        $descr = stripslashes($descr);\r\n        return $descr;\r\n    }\r\n\r\n    protected function transferMigrationByMeta($meta, VersionManager $vmTo)\r\n    {\r\n        $success = 0;\r\n\r\n        if ($meta['is_file']) {\r\n            $source = $meta['location'];\r\n            $dest = $vmTo->getVersionFile($meta['version']);\r\n\r\n            if (is_file($dest)) {\r\n                unlink($source);\r\n            } else {\r\n                rename($source, $dest);\r\n            }\r\n\r\n            $success = 1;\r\n        }\r\n\r\n        if ($meta['is_record']) {\r\n            $this->getVersionTable()->removeRecord($meta);\r\n            $vmTo->getVersionTable()->addRecord($meta);\r\n\r\n            $success = 1;\r\n        }\r\n\r\n        return [\r\n            'message' => Locale::getMessage('TRANSFER_OK', ['#VERSION#' => $meta['version']]),\r\n            'success' => $success,\r\n        ];\r\n    }\r\n\r\n    protected function deleteMigratioByMeta($meta)\r\n    {\r\n        $success = 0;\r\n\r\n        if ($meta['is_record']) {\r\n            $this->getVersionTable()->removeRecord($meta);\r\n            $success = 1;\r\n        }\r\n\r\n        if ($meta && $meta['is_file']) {\r\n            unlink($meta['location']);\r\n            $success = 1;\r\n        }\r\n\r\n        $msg = $success ? 'DELETE_OK' : 'DELETE_ERROR2';\r\n\r\n        return [\r\n            'message' => Locale::getMessage($msg, ['#VERSION#' => $meta['version']]),\r\n            'success' => $success,\r\n        ];\r\n    }\r\n\r\n    protected function setMigrationTagByMeta($meta, $tag = '')\r\n    {\r\n        $success = 0;\r\n\r\n        if ($meta['is_record']) {\r\n            $this->getVersionTable()->updateTag($meta['version'], $tag);\r\n            $success = 1;\r\n        }\r\n\r\n        $msg = $success ? 'SETTAG_OK' : 'SETTAG_ERROR2';\r\n\r\n        return [\r\n            'message' => Locale::getMessage($msg, ['#VERSION#' => $meta['version']]),\r\n            'success' => $success,\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * @param $ok\r\n     *\r\n     * @throws MigrationException\r\n     */\r\n    protected function checkResultAfterStart($ok)\r\n    {\r\n        /* @global $APPLICATION CMain */\r\n        global $APPLICATION;\r\n\r\n        if ($APPLICATION->GetException()) {\r\n            throw new MigrationException($APPLICATION->GetException()->GetString());\r\n        }\r\n\r\n        if ($ok === false) {\r\n            throw new MigrationException('migration return false');\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/versionmanager.php b/local/modules/sprint.migration/lib/versionmanager.php
--- a/local/modules/sprint.migration/lib/versionmanager.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/versionmanager.php	(date 1670844554000)
@@ -18,16 +18,17 @@
     /** @var VersionConfig */
     private $versionConfig = null;
     /** @var VersionTable */
-    private $versionTable = null;
-    private $restarts = [];
-    private $lastException = null;
+    private $versionTable      = null;
+    private $isRestart         = false;
+    private $lastRestartParams = [];
+    private $lastException     = null;
 
     /**
      * VersionManager constructor.
      *
      * @param string $configName
      *
-     * @throws Exception
+     * @throws MigrationException
      */
     public function __construct($configName = '')
     {
@@ -57,10 +58,9 @@
     }
 
     /**
-     * @param        $versionName
+     * @param string $versionName
      * @param string $action
      * @param array  $params
-     * @param bool   $force
      * @param string $tag
      *
      * @return bool
@@ -69,13 +69,10 @@
         $versionName,
         $action = VersionEnum::ACTION_UP,
         $params = [],
-        $force = false,
         $tag = ''
     ) {
-        if (isset($this->restarts[$versionName])) {
-            unset($this->restarts[$versionName]);
-        }
-
+        $this->isRestart = false;
+        $this->lastRestartParams = [];
         $this->lastException = new Exception();
 
         try {
@@ -89,19 +86,23 @@
                 throw new MigrationException('unsupported version ' . $meta['older']);
             }
 
-            if (!$force) {
-                if ($action == VersionEnum::ACTION_UP && $meta['status'] != VersionEnum::STATUS_NEW) {
-                    throw new MigrationException('migration already up');
-                }
+            if (!empty($meta['required_versions'])) {
+                if ($action == VersionEnum::ACTION_UP) {
+                    $this->checkRequiredVersions($meta['required_versions']);
+                }
+            }
+
+            if ($action == VersionEnum::ACTION_UP && $meta['status'] != VersionEnum::STATUS_NEW) {
+                throw new MigrationException('migration already up');
+            }
 
-                if ($action == VersionEnum::ACTION_DOWN && $meta['status'] != VersionEnum::STATUS_INSTALLED) {
-                    throw new MigrationException('migration already down');
-                }
+            if ($action == VersionEnum::ACTION_DOWN && $meta['status'] != VersionEnum::STATUS_INSTALLED) {
+                throw new MigrationException('migration already down');
             }
 
             /** @var $versionInstance Version */
             $versionInstance = new $meta['class'];
-
+            $versionInstance->setVersionConfig($this->versionConfig);
             $versionInstance->setRestartParams($params);
 
             if ($action == VersionEnum::ACTION_UP) {
@@ -115,17 +116,17 @@
 
                 $this->getVersionTable()->removeRecord($meta);
             }
-
-            return true;
         } catch (RestartException $e) {
-            $this->restarts[$versionName] = isset($versionInstance) ? $versionInstance->getRestartParams() : [];
+            $this->isRestart = true;
+            $this->lastRestartParams = isset($versionInstance) ? $versionInstance->getRestartParams() : [];
         } catch (Throwable $e) {
             $this->lastException = $e;
-        }
-
-        return false;
-    }
+            return false;
+        }
 
+        return true;
+    }
+
     /**
      * @param $versionName
      *
@@ -152,19 +153,7 @@
      */
     public function getVersions($filter = [])
     {
-        /** @var  $versionFilter array */
-        $versionFilter = $this->getVersionConfig()->getVal('version_filter', []);
-
-        $filter = array_merge(
-            $versionFilter, [
-            'status'   => '',
-            'search'   => '',
-            'tag'      => '',
-            'modified' => '',
-            'older'    => '',
-        ], $filter
-        );
-
+        $filter = array_merge(['status' => ''], $filter);
         $merge = [];
 
         $records = $this->getRecords();
@@ -186,19 +175,17 @@
 
         $result = [];
         foreach ($merge as $version => $ts) {
-            $record = isset($records[$version]) ? $records[$version] : 0;
-            $file = isset($files[$version]) ? $files[$version] : 0;
+            $record = $records[$version] ?? 0;
+            $file = $files[$version] ?? 0;
 
             $meta = $this->prepVersionMeta($version, $file, $record);
 
             if (
-                $this->isVersionEnabled($meta)
-                && $this->containsFilterStatus($meta, $filter)
+                $this->containsFilterStatus($meta, $filter)
                 && $this->containsFilterSearch($meta, $filter)
                 && $this->containsFilterTag($meta, $filter)
                 && $this->containsFilterModified($meta, $filter)
                 && $this->containsFilterOlder($meta, $filter)
-                && $this->containsFilterVersion($meta, $filter)
             ) {
                 $result[] = $meta;
             }
@@ -206,14 +193,14 @@
         return $result;
     }
 
-    public function needRestart($version)
+    public function needRestart()
     {
-        return (isset($this->restarts[$version])) ? 1 : 0;
+        return $this->isRestart;
     }
 
-    public function getRestartParams($version)
+    public function getRestartParams()
     {
-        return $this->restarts[$version];
+        return $this->lastRestartParams;
     }
 
     public function getLastException()
@@ -270,9 +257,9 @@
         $result = [];
         if (in_array(
             $status, [
-            VersionEnum::STATUS_NEW,
-            VersionEnum::STATUS_INSTALLED,
-        ]
+                VersionEnum::STATUS_NEW,
+                VersionEnum::STATUS_INSTALLED,
+            ]
         )) {
             if ($this->checkVersionName($search)) {
                 $meta = $this->getVersionByName($search);
@@ -311,7 +298,7 @@
 
     public function checkVersionName($versionName)
     {
-        return $this->getVersionTimestamp($versionName) ? true : false;
+        return (bool)$this->getVersionTimestamp($versionName);
     }
 
     public function getVersionTimestamp($versionName)
@@ -423,10 +410,10 @@
 
         if (in_array(
             $versionName, [
-            VersionEnum::STATUS_NEW,
-            VersionEnum::STATUS_INSTALLED,
-            VersionEnum::STATUS_UNKNOWN,
-        ]
+                VersionEnum::STATUS_NEW,
+                VersionEnum::STATUS_INSTALLED,
+                VersionEnum::STATUS_UNKNOWN,
+            ]
         )) {
             $metas = $this->getVersions(['status' => $versionName]);
         } elseif ($meta = $this->getVersionByName($versionName)) {
@@ -448,7 +435,7 @@
     }
 
     /**
-     * @param        $versionName
+     * @param string $versionName
      * @param string $tag
      *
      * @throws MigrationException
@@ -460,9 +447,9 @@
 
         if (in_array(
             $versionName, [
-            VersionEnum::STATUS_INSTALLED,
-            VersionEnum::STATUS_UNKNOWN,
-        ]
+                VersionEnum::STATUS_INSTALLED,
+                VersionEnum::STATUS_UNKNOWN,
+            ]
         )) {
             $metas = $this->getVersions(['status' => $versionName]);
         } elseif ($meta = $this->getVersionByName($versionName)) {
@@ -484,7 +471,7 @@
     }
 
     /**
-     * @param                $versionName
+     * @param string         $versionName
      * @param VersionManager $vmTo
      *
      * @throws MigrationException
@@ -504,10 +491,10 @@
 
         if (in_array(
             $versionName, [
-            VersionEnum::STATUS_NEW,
-            VersionEnum::STATUS_INSTALLED,
-            VersionEnum::STATUS_UNKNOWN,
-        ]
+                VersionEnum::STATUS_NEW,
+                VersionEnum::STATUS_INSTALLED,
+                VersionEnum::STATUS_UNKNOWN,
+            ]
         )) {
             $metas = $this->getVersions(['status' => $versionName]);
         } elseif ($versionName == 'all') {
@@ -570,28 +557,6 @@
         ];
     }
 
-    protected function isVersionEnabled($meta)
-    {
-        return (isset($meta['enabled']) && $meta['enabled']);
-    }
-
-    protected function containsFilterVersion($meta, $filter)
-    {
-        unset($filter['status']);
-        unset($filter['search']);
-        unset($filter['tag']);
-        unset($filter['modified']);
-        unset($filter['older']);
-
-        foreach ($filter as $k => $v) {
-            if (empty($meta['version_filter'][$k]) || $meta['version_filter'][$k] != $v) {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
     protected function containsFilterTag($meta, $filter)
     {
         if (empty($filter['tag'])) {
@@ -670,7 +635,6 @@
             'is_file'   => $isFile,
             'is_record' => $isRecord,
             'version'   => $versionName,
-            'enabled'   => true,
             'modified'  => false,
             'older'     => false,
             'hash'      => '',
@@ -700,7 +664,7 @@
         try {
             require_once($file['location']);
 
-            $class = 'Sprint\Migration\\' . $versionName;
+            $class = __NAMESPACE__ . '\\' . $versionName;
             if (!class_exists($class)) {
                 return $meta;
             }
@@ -712,8 +676,7 @@
             $meta['description'] = $this->purifyDescriptionForMeta(
                 $versionInstance->getDescription()
             );
-            $meta['version_filter'] = $versionInstance->getVersionFilter();
-            $meta['enabled'] = $versionInstance->isVersionEnabled();
+            $meta['required_versions'] = $versionInstance->getRequiredVersions();
 
             $v1 = $versionInstance->getModuleVersion();
             $v2 = Module::getVersion();
@@ -848,4 +811,22 @@
             throw new MigrationException('migration return false');
         }
     }
+
+    /**
+     * @throws MigrationException
+     */
+    public function checkRequiredVersions(array $versionNames)
+    {
+        foreach ($versionNames as $versionName) {
+            if (strpos($versionName, '\\') !== false) {
+                $versionName = substr(strrchr($versionName, '\\'), 1);
+            }
+            if (!$this->checkVersionName($versionName)) {
+                throw new MigrationException(sprintf('Required "%s" not found', $versionName));
+            }
+            if (!$this->getRecordIfExists($versionName)) {
+                throw new MigrationException(sprintf('Required "%s" not installed', $versionName));
+            }
+        }
+    }
 }
Index: local/modules/sprint.migration/templates/HlblockElementsExport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\n/**\r\n * @var $version\r\n * @var $description\r\n * @var $extendUse\r\n * @var $extendClass\r\n * @var $moduleVersion\r\n * @var $iblockElementsFile\r\n * @formatter:off\r\n */\r\n\r\n?><?php echo \"<?php\\n\" ?>\r\n\r\nnamespace Sprint\\Migration;\r\n\r\n<?php echo $extendUse ?>\r\n\r\nclass <?php echo $version ?> extends <?php echo $extendClass ?>\r\n\r\n{\r\n    protected $description = \"<?php echo $description ?>\";\r\n\r\n    protected $moduleVersion = \"<?php echo $moduleVersion ?>\";\r\n\r\n    /**\r\n     * @throws Exceptions\\ExchangeException\r\n     * @throws Exceptions\\RestartException\r\n     * @throws Exceptions\\HelperException\r\n     * @return bool|void\r\n     */\r\n    public function up()\r\n    {\r\n        $this->getExchangeManager()\r\n            ->HlblockElementsImport()\r\n            ->setExchangeResource('hlblock_elements.xml')\r\n            ->setLimit(20)\r\n            ->execute(function ($item) {\r\n                $this->getHelperManager()\r\n                    ->Hlblock()\r\n                    ->addElement(\r\n                        $item['hlblock_id'],\r\n                        $item['fields']\r\n                    );\r\n            });\r\n    }\r\n\r\n    public function down()\r\n    {\r\n        //your code ...\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/templates/HlblockElementsExport.php b/local/modules/sprint.migration/templates/HlblockElementsExport.php
--- a/local/modules/sprint.migration/templates/HlblockElementsExport.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/templates/HlblockElementsExport.php	(date 1670844554000)
@@ -6,10 +6,12 @@
  * @var $extendUse
  * @var $extendClass
  * @var $moduleVersion
- * @var $iblockElementsFile
+ * @var $updateMode
  * @formatter:off
  */
 
+use Sprint\Migration\Exchange\HlblockElementsExport;
+
 ?><?php echo "<?php\n" ?>
 
 namespace Sprint\Migration;
@@ -19,12 +21,11 @@
 class <?php echo $version ?> extends <?php echo $extendClass ?>
 
 {
-    protected $description = "<?php echo $description ?>";
-
+    protected $description   = "<?php echo $description ?>";
     protected $moduleVersion = "<?php echo $moduleVersion ?>";
 
     /**
-     * @throws Exceptions\ExchangeException
+     * @throws Exceptions\MigrationException
      * @throws Exceptions\RestartException
      * @throws Exceptions\HelperException
      * @return bool|void
@@ -32,21 +33,51 @@
     public function up()
     {
         $this->getExchangeManager()
-            ->HlblockElementsImport()
-            ->setExchangeResource('hlblock_elements.xml')
-            ->setLimit(20)
-            ->execute(function ($item) {
-                $this->getHelperManager()
-                    ->Hlblock()
-                    ->addElement(
-                        $item['hlblock_id'],
-                        $item['fields']
-                    );
-            });
+             ->HlblockElementsImport()
+             ->setExchangeResource('hlblock_elements.xml')
+             ->setLimit(20)
+             ->execute(function ($item) {
+<?php if ($updateMode == HlblockElementsExport::UPDATE_MODE_XML_ID) { ?>
+                 $this->getHelperManager()
+                      ->Hlblock()
+                      ->saveElementByXmlId(
+                          $item['hlblock_id'],
+                          $item['fields']
+                      );
+<?php } else { ?>
+                 $this->getHelperManager()
+                      ->Hlblock()
+                      ->addElement(
+                          $item['hlblock_id'],
+                          $item['fields']
+                      );
+<?php } ?>
+             });
     }
 
+    /**
+     * @throws Exceptions\MigrationException
+     * @throws Exceptions\RestartException
+     * @throws Exceptions\HelperException
+     * @return bool|void
+     */
     public function down()
     {
-        //your code ...
+<?php if ($updateMode == HlblockElementsExport::UPDATE_MODE_XML_ID) { ?>
+        $this->getExchangeManager()
+             ->HlblockElementsImport()
+             ->setExchangeResource('hlblock_elements.xml')
+             ->setLimit(20)
+             ->execute(function ($item) {
+                 $this->getHelperManager()
+                      ->Hlblock()
+                      ->deleteElementByXmlId(
+                          $item['hlblock_id'],
+                          $item['fields']['UF_XML_ID']
+                      );
+             });
+<?php } ?>
     }
+
+
 }
Index: local/modules/sprint.migration/lib/schemamanager.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse Exception;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\nuse Sprint\\Migration\\Traits\\HelperManagerTrait;\r\n\r\nclass SchemaManager extends ExchangeEntity\r\n{\r\n    use HelperManagerTrait;\r\n\r\n    /** @var VersionConfig */\r\n    protected $versionConfig = null;\r\n\r\n    private $progress = [];\r\n\r\n    protected $testMode = 0;\r\n\r\n    /**\r\n     * SchemaManager constructor.\r\n     * @param string $configName\r\n     * @param array $params\r\n     * @throws Exception\r\n     */\r\n    public function __construct($configName = '', $params = [])\r\n    {\r\n        if ($configName instanceof VersionConfig) {\r\n            $this->versionConfig = $configName;\r\n        } else {\r\n            $this->versionConfig = new VersionConfig(\r\n                $configName\r\n            );\r\n        }\r\n        $this->params = $params;\r\n    }\r\n\r\n    public function setTestMode($testMode = 1)\r\n    {\r\n        $this->testMode = $testMode;\r\n    }\r\n\r\n    /**\r\n     * @return AbstractSchema[]\r\n     */\r\n    public function getEnabledSchemas()\r\n    {\r\n        $result = [];\r\n        $schemas = $this->getVersionSchemas();\r\n        $schemas = array_keys($schemas);\r\n        foreach ($schemas as $name) {\r\n            $schema = $this->createSchema($name);\r\n            if ($schema->isEnabled()) {\r\n                $result[] = $schema;\r\n            }\r\n        }\r\n        return $result;\r\n    }\r\n\r\n    protected function getVersionSchemas($filter = [])\r\n    {\r\n        $schemas = $this->getVersionConfig()->getVal('version_schemas');\r\n        $schemas = is_array($schemas) ? $schemas : [];\r\n\r\n        if (!isset($filter['name'])) {\r\n            return $schemas;\r\n        }\r\n\r\n        if (!is_array($filter['name'])) {\r\n            $filter['name'] = [$filter['name']];\r\n        }\r\n\r\n        $filtered = [];\r\n        foreach ($schemas as $name => $class) {\r\n            if (in_array($name, $filter['name'])) {\r\n                $filtered[$name] = $class;\r\n            }\r\n        }\r\n\r\n        return $filtered;\r\n\r\n    }\r\n\r\n    /**\r\n     * @param array $filter\r\n     * @throws RestartException\r\n     */\r\n    public function export($filter = [])\r\n    {\r\n        $schemas = $this->getVersionSchemas($filter);\r\n        $schemas = array_keys($schemas);\r\n\r\n        if (!isset($this->params['schema'])) {\r\n            $this->params['schema'] = 0;\r\n        }\r\n\r\n        if (isset($schemas[$this->params['schema']])) {\r\n            $name = $schemas[$this->params['schema']];\r\n            $this->exportSchema($name);\r\n\r\n            $this->setProgress('full', $this->params['schema'] + 1, count($schemas));\r\n            $this->params['schema']++;\r\n            $this->restart();\r\n        }\r\n\r\n        unset($this->params['schema']);\r\n    }\r\n\r\n    /**\r\n     * @param array $filter\r\n     * @throws RestartException\r\n     */\r\n    public function import($filter = [])\r\n    {\r\n        $this->progress = [];\r\n\r\n        $schemas = $this->getVersionSchemas($filter);\r\n        $schemas = array_keys($schemas);\r\n\r\n        if (!isset($this->params['schema'])) {\r\n            $this->params['schema'] = 0;\r\n        }\r\n\r\n        if (isset($schemas[$this->params['schema']])) {\r\n            $name = $schemas[$this->params['schema']];\r\n            $this->importSchema($name);\r\n\r\n            $this->setProgress('full', $this->params['schema'] + 1, count($schemas));\r\n            $this->params['schema']++;\r\n            $this->restart();\r\n        }\r\n\r\n        unset($this->params['schema']);\r\n    }\r\n\r\n    public function getProgress($type = false)\r\n    {\r\n        return ($type) ? $this->progress[$type] : $this->progress;\r\n    }\r\n\r\n    protected function setProgress($type, $index, $cnt)\r\n    {\r\n        if ($cnt > 0) {\r\n            $this->progress[$type] = round($index / $cnt * 100);\r\n        } else {\r\n            $this->progress[$type] = 0;\r\n        }\r\n    }\r\n\r\n    protected function exportSchema($name)\r\n    {\r\n        $schema = $this->createSchema($name);\r\n        if (!$schema->isEnabled()) {\r\n            return false;\r\n        }\r\n\r\n        $schema->deleteSchemaFiles();\r\n\r\n        $schema->export();\r\n\r\n        $schema->outSchemaFiles();\r\n\r\n        if (!$this->testMode) {\r\n            $schema->setModified();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param $name\r\n     * @throws RestartException\r\n     * @throws Exception\r\n     * @return bool\r\n     */\r\n    protected function importSchema($name)\r\n    {\r\n        $schema = $this->createSchema($name);\r\n        if (!$schema->isEnabled()) {\r\n            return false;\r\n        }\r\n\r\n        $schema->setTestMode($this->testMode);\r\n\r\n        $title = $this->testMode ? 'diff' : 'import';\r\n\r\n        if (!isset($this->params['index'])) {\r\n            $this->outInfo('%s (%s) start', $schema->getTitle(), $title);\r\n\r\n            $this->params['index'] = 0;\r\n            $schema->import();\r\n            $this->saveQueue($schema);\r\n        }\r\n\r\n        $queue = $this->loadQueue($schema);\r\n\r\n        if (isset($queue[$this->params['index']])) {\r\n            $this->setProgress('current', $this->params['index'] + 1, count($queue));\r\n\r\n            $item = $queue[$this->params['index']];\r\n            $schema->executeQueue($item);\r\n\r\n            $this->params['index']++;\r\n            $this->restart();\r\n        }\r\n\r\n        unset($this->params['index']);\r\n\r\n        if (!$this->testMode) {\r\n            $schema->setModified();\r\n        }\r\n\r\n        $this->removeQueue($schema);\r\n        $this->out('%s (%s) success', $schema->getTitle(), $title);\r\n\r\n        return true;\r\n    }\r\n\r\n    protected function getVersionConfig()\r\n    {\r\n        return $this->versionConfig;\r\n    }\r\n\r\n    /**\r\n     * @param $name\r\n     * @return AbstractSchema\r\n     */\r\n    protected function createSchema($name)\r\n    {\r\n        $schemas = $this->getVersionSchemas();\r\n        $class = $schemas[$name];\r\n\r\n        return new $class($this->getVersionConfig(), $name);\r\n    }\r\n\r\n    protected function removeQueue(AbstractSchema $schema)\r\n    {\r\n        $file = $this->getQueueFile($schema->getName());\r\n        if (is_file($file)) {\r\n            unlink($file);\r\n        }\r\n    }\r\n\r\n    protected function loadQueue(AbstractSchema $schema)\r\n    {\r\n        $file = $this->getQueueFile($schema->getName());\r\n        if (is_file($file)) {\r\n            /** @noinspection PhpIncludeInspection */\r\n            $items = include $file;\r\n            if (\r\n                $items &&\r\n                isset($items['items']) &&\r\n                is_array($items['items'])\r\n            ) {\r\n                return $items['items'];\r\n            }\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * @param AbstractSchema $schema\r\n     * @throws Exception\r\n     */\r\n    protected function saveQueue(AbstractSchema $schema)\r\n    {\r\n        $file = $this->getQueueFile($schema->getName());\r\n        $data = $schema->getQueue();\r\n\r\n        Module::createDir(dirname($file));\r\n        file_put_contents($file, '<?php return ' . var_export(['items' => $data], 1) . ';');\r\n    }\r\n\r\n    protected function getQueueFile($name)\r\n    {\r\n        $name = 'queue__' . strtolower($name);\r\n        return Module::getDocRoot() . '/bitrix/tmp/'.Module::ID.'/' . $name . '.php';\r\n    }\r\n\r\n    /**\r\n     * @return ExchangeManager\r\n     */\r\n    protected function getExchangeManager()\r\n    {\r\n        return new ExchangeManager($this);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/schemamanager.php b/local/modules/sprint.migration/lib/schemamanager.php
--- a/local/modules/sprint.migration/lib/schemamanager.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/schemamanager.php	(date 1670844554000)
@@ -9,9 +9,7 @@
 class SchemaManager extends ExchangeEntity
 {
     use HelperManagerTrait;
-
-    /** @var VersionConfig */
-    protected $versionConfig = null;
+    use OutTrait;
 
     private $progress = [];
 
@@ -19,19 +17,14 @@
 
     /**
      * SchemaManager constructor.
-     * @param string $configName
+     * @param VersionConfig $configName
      * @param array $params
      * @throws Exception
      */
-    public function __construct($configName = '', $params = [])
+    public function __construct(VersionConfig $versionConfig, $params = [])
     {
-        if ($configName instanceof VersionConfig) {
-            $this->versionConfig = $configName;
-        } else {
-            $this->versionConfig = new VersionConfig(
-                $configName
-            );
-        }
+        $this->setVersionConfig($versionConfig);
+        $this->setRestartParams($params);
         $this->params = $params;
     }
 
@@ -215,12 +208,6 @@
 
         return true;
     }
-
-    protected function getVersionConfig()
-    {
-        return $this->versionConfig;
-    }
-
     /**
      * @param $name
      * @return AbstractSchema
@@ -278,11 +265,4 @@
         return Module::getDocRoot() . '/bitrix/tmp/'.Module::ID.'/' . $name . '.php';
     }
 
-    /**
-     * @return ExchangeManager
-     */
-    protected function getExchangeManager()
-    {
-        return new ExchangeManager($this);
-    }
 }
Index: local/modules/sprint.migration/lib/abstractschema.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse DirectoryIterator;\r\nuse Exception;\r\nuse SplFileInfo;\r\nuse Sprint\\Migration\\Traits\\HelperManagerTrait;\r\n\r\nabstract class AbstractSchema extends ExchangeEntity\r\n{\r\n    use HelperManagerTrait;\r\n\r\n    private $name;\r\n    /** @var VersionConfig */\r\n    private   $versionConfig;\r\n    private   $queue     = [];\r\n    protected $testMode  = 0;\r\n    protected $info      = [\r\n        'title' => '',\r\n    ];\r\n    private   $filecache = [];\r\n\r\n    abstract public function export();\r\n\r\n    abstract public function import();\r\n\r\n    abstract protected function initialize();\r\n\r\n    abstract public function outDescription();\r\n\r\n    abstract public function getMap();\r\n\r\n    public function __construct(VersionConfig $versionConfig, $name, $params = [])\r\n    {\r\n        $this->versionConfig = $versionConfig;\r\n        $this->name = $name;\r\n        $this->params = $params;\r\n        $this->initialize();\r\n    }\r\n\r\n    protected function isBuilderEnabled()\r\n    {\r\n        //your code\r\n\r\n        return false;\r\n    }\r\n\r\n    public function setTestMode($testMode = 1)\r\n    {\r\n        $this->testMode = ($testMode) ? 1 : 0;\r\n    }\r\n\r\n    public function getName()\r\n    {\r\n        return $this->name;\r\n    }\r\n\r\n    public function isEnabled()\r\n    {\r\n        try {\r\n            return $this->isBuilderEnabled();\r\n        } catch (Exception $e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public function isModified()\r\n    {\r\n        $opt = strtolower('schema_' . $this->getName());\r\n        $oldhash = Module::getDbOption($opt);\r\n\r\n        $data = $this->loadSchemas($this->getMap());\r\n        $newhash = md5(serialize($data));\r\n        return ($newhash != $oldhash);\r\n    }\r\n\r\n    public function setModified()\r\n    {\r\n        $data = $this->loadSchemas($this->getMap());\r\n        $newhash = md5(serialize($data));\r\n\r\n        $opt = strtolower('schema_' . $this->getName());\r\n        Module::setDbOption($opt, $newhash);\r\n    }\r\n\r\n    protected function setTitle($title = '')\r\n    {\r\n        $this->info['title'] = $title;\r\n    }\r\n\r\n    public function getTitle()\r\n    {\r\n        return $this->info['title'];\r\n    }\r\n\r\n    public function outTitle($fullname = true)\r\n    {\r\n        $title = ($fullname) ? $this->getName() . ' (' . $this->getTitle() . ')' : $this->getTitle();\r\n        if ($this->isModified()) {\r\n            $this->out('[new]' . $title . '[/]');\r\n        } else {\r\n            $this->out('[installed]' . $title . '[/]');\r\n        }\r\n    }\r\n\r\n    protected function getSchemaDir()\r\n    {\r\n        return $this->getVersionConfig()->getSiblingDir(\r\n            'schema',\r\n            false,\r\n            $this->getVersionConfig()->getName()\r\n        );\r\n    }\r\n\r\n    protected function getSchemaSubDir($name)\r\n    {\r\n        return $this->getSchemaDir() . $name;\r\n    }\r\n\r\n    protected function getSchemaFile($name)\r\n    {\r\n        return $this->getSchemaDir() . $name . '.json';\r\n    }\r\n\r\n    /**\r\n     * @param $name\r\n     * @param $data\r\n     *\r\n     * @throws Exception\r\n     */\r\n    protected function saveSchema($name, $data)\r\n    {\r\n        $file = $this->getSchemaFile($name);\r\n        Module::createDir(dirname($file));\r\n\r\n        file_put_contents(\r\n            $file,\r\n            json_encode($data, JSON_UNESCAPED_UNICODE + JSON_PRETTY_PRINT)\r\n        );\r\n    }\r\n\r\n    public function deleteSchemaFiles()\r\n    {\r\n        $names = $this->getSchemas($this->getMap());\r\n        foreach ($names as $name) {\r\n            $file = $this->getSchemaFile($name);\r\n            unlink($file);\r\n        }\r\n    }\r\n\r\n    public function outSchemaFiles()\r\n    {\r\n        $files = [];\r\n        $names = $this->getSchemas($this->getMap());\r\n        foreach ($names as $name) {\r\n            $files[] = Module::getRelativeDir($this->getSchemaFile($name));\r\n        }\r\n\r\n        if (!empty($files)) {\r\n            $this->outNotice(\r\n                Locale::getMessage(\r\n                    'ERR_SCHEMA_CREATED',\r\n                    [\r\n                        '#NAME#' => $this->getTitle(),\r\n\r\n                    ]\r\n                )\r\n            );\r\n            foreach ($files as $file) {\r\n                $this->out($file);\r\n            }\r\n        } else {\r\n            $this->outWarning(\r\n                Locale::getMessage(\r\n                    'ERR_SCHEMA_EMPTY',\r\n                    [\r\n                        '#NAME#' => $this->getTitle(),\r\n\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    protected function getSchemas($map)\r\n    {\r\n        $map = is_array($map) ? $map : [$map];\r\n        $result = [];\r\n\r\n        foreach ($map as $path) {\r\n            $dir = $this->getSchemaSubDir($path);\r\n            $file = $this->getSchemaFile($path);\r\n\r\n            if (is_dir($dir)) {\r\n                /* @var $item SplFileInfo */\r\n                $items = new DirectoryIterator($dir);\r\n                foreach ($items as $item) {\r\n                    if ($item->isFile() && $item->getExtension() == 'json') {\r\n                        $result[] = $path . $item->getBasename('.json');\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (is_file($file)) {\r\n                $result[] = $path;\r\n            }\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    protected function loadSchema($name, $merge = [])\r\n    {\r\n        if (!isset($this->filecache[$name])) {\r\n            $this->filecache[$name] = $this->loadSchemaFile($name);\r\n        }\r\n\r\n        return array_merge($merge, $this->filecache[$name]);\r\n    }\r\n\r\n    private function loadSchemaFile($name)\r\n    {\r\n        $file = $this->getSchemaFile($name);\r\n\r\n        if (!is_file($file)) {\r\n            return [];\r\n        }\r\n\r\n        $json = file_get_contents($file);\r\n        $json = json_decode($json, true);\r\n\r\n        if (json_last_error() != JSON_ERROR_NONE) {\r\n            return [];\r\n        }\r\n\r\n        if (!is_array($json)) {\r\n            return [];\r\n        }\r\n\r\n        return $json;\r\n    }\r\n\r\n    protected function loadSchemas($map, $merge = [])\r\n    {\r\n        $names = $this->getSchemas($map);\r\n        $schemas = [];\r\n        foreach ($names as $name) {\r\n            $schemas[$name] = $this->loadSchema($name, $merge);\r\n        }\r\n        return $schemas;\r\n    }\r\n\r\n    public function getQueue()\r\n    {\r\n        return $this->queue;\r\n    }\r\n\r\n    protected function addToQueue($method, ...$vars)\r\n    {\r\n        $args = func_get_args();\r\n        $method = array_shift($args);\r\n        $this->queue[] = [$method, $args];\r\n    }\r\n\r\n    public function executeQueue($item)\r\n    {\r\n        if (method_exists($this, $item[0])) {\r\n            call_user_func_array([$this, $item[0]], $item[1]);\r\n        } else {\r\n            $this->outError(\r\n                Locale::getMessage(\r\n                    'ERR_METHOD_NOT_FOUND', [\r\n                        '#NAME#' => $item[0],\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    protected function getVersionConfig()\r\n    {\r\n        return $this->versionConfig;\r\n    }\r\n\r\n    /**\r\n     * @return ExchangeManager\r\n     */\r\n    protected function getExchangeManager()\r\n    {\r\n        return new ExchangeManager($this);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/abstractschema.php b/local/modules/sprint.migration/lib/abstractschema.php
--- a/local/modules/sprint.migration/lib/abstractschema.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/abstractschema.php	(date 1670844554000)
@@ -10,6 +10,7 @@
 abstract class AbstractSchema extends ExchangeEntity
 {
     use HelperManagerTrait;
+    use OutTrait;
 
     private $name;
     /** @var VersionConfig */
@@ -33,9 +34,11 @@
 
     public function __construct(VersionConfig $versionConfig, $name, $params = [])
     {
-        $this->versionConfig = $versionConfig;
         $this->name = $name;
-        $this->params = $params;
+
+        $this->setVersionConfig($versionConfig);
+        $this->setRestartParams($params);
+
         $this->initialize();
     }
 
@@ -278,16 +281,4 @@
         }
     }
 
-    protected function getVersionConfig()
-    {
-        return $this->versionConfig;
-    }
-
-    /**
-     * @return ExchangeManager
-     */
-    protected function getExchangeManager()
-    {
-        return new ExchangeManager($this);
-    }
 }
Index: local/modules/sprint.migration/templates/MedialibElementsExport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\n/**\r\n * @var $version\r\n * @var $description\r\n * @var $extendUse\r\n * @var $extendClass\r\n * @var $moduleVersion\r\n * @var $iblockElementsFile\r\n * @formatter:off\r\n */\r\n\r\n?><?php echo \"<?php\\n\" ?>\r\n\r\nnamespace Sprint\\Migration;\r\n\r\n<?php echo $extendUse ?>\r\n\r\nclass <?php echo $version ?> extends <?php echo $extendClass ?>\r\n\r\n{\r\n    protected $description = \"<?php echo $description ?>\";\r\n\r\n    protected $moduleVersion = \"<?php echo $moduleVersion ?>\";\r\n\r\n    /**\r\n     * @throws Exceptions\\ExchangeException\r\n     * @throws Exceptions\\RestartException\r\n     * @throws Exceptions\\HelperException\r\n     * @return bool|void\r\n     */\r\n    public function up()\r\n    {\r\n        $this->getExchangeManager()\r\n             ->MedialibElementsImport()\r\n             ->setExchangeResource('medialib_elements.xml')\r\n             ->setLimit(20)\r\n             ->execute(\r\n                 function ($item) {\r\n                     $this->getHelperManager()\r\n                          ->Medialib()\r\n                          ->saveElement($item);\r\n                 }\r\n             );\r\n    }\r\n\r\n    public function down()\r\n    {\r\n        //your code ...\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/templates/MedialibElementsExport.php b/local/modules/sprint.migration/templates/MedialibElementsExport.php
--- a/local/modules/sprint.migration/templates/MedialibElementsExport.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/templates/MedialibElementsExport.php	(date 1670844554000)
@@ -24,7 +24,7 @@
     protected $moduleVersion = "<?php echo $moduleVersion ?>";
 
     /**
-     * @throws Exceptions\ExchangeException
+     * @throws Exceptions\MigrationException
      * @throws Exceptions\RestartException
      * @throws Exceptions\HelperException
      * @return bool|void
Index: local/modules/sprint.migration/lib/installer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse Exception;\r\nuse Sprint\\Migration\\Enum\\VersionEnum;\r\nuse Sprint\\Migration\\Exceptions\\MigrationException;\r\n\r\nclass Installer\r\n{\r\n    private $versionManager;\r\n\r\n    /**\r\n     * Installer constructor.\r\n     *\r\n     * @param array $configValues\r\n     *\r\n     * @throws Exception\r\n     */\r\n    public function __construct($configValues = [])\r\n    {\r\n        $this->versionManager = new VersionManager(\r\n            new VersionConfig('installer', $configValues)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @throws MigrationException\r\n     */\r\n    public function up()\r\n    {\r\n        $this->executeAll(\r\n            [\r\n                'status' => VersionEnum::STATUS_NEW,\r\n            ]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @throws MigrationException\r\n     */\r\n    public function down()\r\n    {\r\n        $this->executeAll(\r\n            [\r\n                'status' => VersionEnum::STATUS_INSTALLED,\r\n            ]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param $filter\r\n     *\r\n     * @throws MigrationException\r\n     */\r\n    protected function executeAll($filter)\r\n    {\r\n        $versions = $this->versionManager->getVersions($filter);\r\n        $action = ($filter['status'] == VersionEnum::STATUS_NEW) ? VersionEnum::ACTION_UP : VersionEnum::ACTION_DOWN;\r\n\r\n        foreach ($versions as $item) {\r\n            $this->executeVersion($item['version'], $action);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param string $version\r\n     * @param string $action\r\n     *\r\n     * @throws MigrationException\r\n     * @return bool\r\n     */\r\n    protected function executeVersion($version, $action = VersionEnum::ACTION_UP)\r\n    {\r\n        $params = [];\r\n        do {\r\n            $exec = 0;\r\n\r\n            $success = $this->versionManager->startMigration(\r\n                $version,\r\n                $action,\r\n                $params\r\n            );\r\n\r\n            $restart = $this->versionManager->needRestart($version);\r\n\r\n            if ($restart) {\r\n                $params = $this->versionManager->getRestartParams($version);\r\n                $exec = 1;\r\n            }\r\n\r\n            if (!$success && !$restart) {\r\n                throw new MigrationException(\r\n                    $this->versionManager->getLastException()->getMessage()\r\n                );\r\n            }\r\n        } while ($exec == 1);\r\n\r\n        return $success;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/installer.php b/local/modules/sprint.migration/lib/installer.php
--- a/local/modules/sprint.migration/lib/installer.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/installer.php	(date 1670844554000)
@@ -82,10 +82,10 @@
                 $params
             );
 
-            $restart = $this->versionManager->needRestart($version);
+            $restart = $this->versionManager->needRestart();
 
             if ($restart) {
-                $params = $this->versionManager->getRestartParams($version);
+                $params = $this->versionManager->getRestartParams();
                 $exec = 1;
             }
 
Index: local/modules/sprint.migration/lib/out.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse CAdminMessage;\r\nuse Throwable;\r\n\r\nclass Out\r\n{\r\n    protected static $colors  = [\r\n        '/'            => [\"\\x1b[0m\", '</span>'],\r\n        'is_unknown'   => [\"\\x1b[0;34m\", '<span style=\"color:#00a\">'],\r\n        'is_installed' => [\"\\x1b[0;32m\", '<span style=\"color:#080\">'],\r\n        'is_new'       => [\"\\x1b[0;31m\", '<span style=\"color:#a00\">'],\r\n        'unknown'      => [\"\\x1b[0;34m\", '<span style=\"color:#00a\">'],\r\n        'installed'    => [\"\\x1b[0;32m\", '<span style=\"color:#080\">'],\r\n        'new'          => [\"\\x1b[0;31m\", '<span style=\"color:#a00\">'],\r\n        'blue'         => [\"\\x1b[0;34m\", '<span style=\"color:#00a\">'],\r\n        'green'        => [\"\\x1b[0;32m\", '<span style=\"color:#080\">'],\r\n        'up'           => [\"\\x1b[0;32m\", '<span style=\"color:#080\">'],\r\n        'red'          => [\"\\x1b[0;31m\", '<span style=\"color:#a00\">'],\r\n        'down'         => [\"\\x1b[0;31m\", '<span style=\"color:#a00\">'],\r\n        'yellow'       => [\"\\x1b[1;33m\", '<span style=\"color:#aa0\">'],\r\n        'b'            => [\"\\x1b[1m\", '<span style=\"font-weight:bold;color:#000\">'],\r\n    ];\r\n    protected static $needEol = false;\r\n\r\n    public static function outProgress($msg, $val, $total)\r\n    {\r\n        $val = (int)$val;\r\n        $total = (int)$total;\r\n\r\n        self::$needEol = true;\r\n\r\n        if (self::canOutProgressBar()) {\r\n            $mess = [\r\n                \"MESSAGE\"        => $msg,\r\n                \"DETAILS\"        => \"#PROGRESS_BAR#\",\r\n                \"HTML\"           => true,\r\n                \"TYPE\"           => \"PROGRESS\",\r\n                \"PROGRESS_TOTAL\" => $total,\r\n                \"PROGRESS_VALUE\" => $val,\r\n            ];\r\n\r\n            echo '<div class=\"sp-progress\">' . (new CAdminMessage($mess))->Show() . '</div>';\r\n        } elseif (self::canOutAsHtml()) {\r\n            $msg = self::prepareToHtml($msg);\r\n            echo '<div class=\"sp-progress\">' . \"$msg $val/$total\" . '</div>';\r\n        } else {\r\n            $msg = self::prepareToConsole($msg);\r\n            fwrite(STDOUT, \"\\r$msg $val/$total\");\r\n        }\r\n    }\r\n\r\n    protected static function canOutProgressBar()\r\n    {\r\n        return method_exists('\\CAdminMessage', '_getProgressHtml') ? 1 : 0;\r\n    }\r\n\r\n    protected static function canOutAsHtml()\r\n    {\r\n        return (php_sapi_name() == 'cli') ? 0 : 1;\r\n    }\r\n\r\n    public static function prepareToHtml($msg, $options = [])\r\n    {\r\n        $msg = nl2br($msg);\r\n\r\n        $msg = str_replace('[t]', '&rarr;', $msg);\r\n\r\n        foreach (self::$colors as $key => $val) {\r\n            $msg = str_replace('[' . $key . ']', $val[1], $msg);\r\n        }\r\n\r\n        if (isset($options['tracker_task_url'])) {\r\n            $msg = self::makeTaskUrl($msg, $options['tracker_task_url']);\r\n        }\r\n\r\n        $msg = self::makeLinksHtml($msg);\r\n\r\n        $msg = Locale::convertToWin1251IfNeed($msg);\r\n        return $msg;\r\n    }\r\n\r\n    protected static function makeTaskUrl($msg, $taskUrl = '')\r\n    {\r\n        if (false !== strpos($taskUrl, '$1')) {\r\n            $msg = preg_replace('/\\#([a-z0-9_\\-]*)/i', $taskUrl, $msg);\r\n        }\r\n\r\n        return $msg;\r\n    }\r\n\r\n    protected static function makeLinksHtml($msg)\r\n    {\r\n        $reg_exUrl = \"/(http|https)\\:\\/\\/[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(\\/\\S*)?/\";\r\n        if (preg_match($reg_exUrl, $msg, $url)) {\r\n            $msg = preg_replace($reg_exUrl, '<a target=\"_blank\" href=\"' . $url[0] . '\">' . $url[0] . '</a>', $msg);\r\n        }\r\n\r\n        return $msg;\r\n    }\r\n\r\n    public static function prepareToConsole($msg, $options = [])\r\n    {\r\n        foreach (self::$colors as $key => $val) {\r\n            $msg = str_replace('[' . $key . ']', $val[0], $msg);\r\n        }\r\n\r\n        if (isset($options['tracker_task_url'])) {\r\n            $msg = self::makeTaskUrl($msg, $options['tracker_task_url']);\r\n        }\r\n\r\n        $msg = Locale::convertToUtf8IfNeed($msg);\r\n        return $msg;\r\n    }\r\n\r\n    public static function outInfo($msg, ...$vars)\r\n    {\r\n        if (func_num_args() > 1) {\r\n            $params = func_get_args();\r\n            $msg = call_user_func_array('sprintf', $params);\r\n        }\r\n\r\n        $msg = '[blue]' . $msg . '[/]';\r\n        if (self::canOutAsHtml()) {\r\n            self::outToHtml($msg);\r\n        } else {\r\n            self::outToConsole($msg);\r\n        }\r\n    }\r\n\r\n    protected static function outToHtml($msg)\r\n    {\r\n        $msg = self::prepareToHtml($msg);\r\n        echo '<div class=\"sp-out\">' . $msg . '</div>';\r\n    }\r\n\r\n    protected static function outToConsole($msg, $rightEol = PHP_EOL)\r\n    {\r\n        $msg = self::prepareToConsole($msg);\r\n        if (self::$needEol) {\r\n            self::$needEol = false;\r\n            fwrite(STDOUT, PHP_EOL . $msg . $rightEol);\r\n        } else {\r\n            fwrite(STDOUT, $msg . $rightEol);\r\n        }\r\n    }\r\n\r\n    public static function outIf($cond, $msg, ...$vars)\r\n    {\r\n        $args = func_get_args();\r\n        $cond = array_shift($args);\r\n        if ($cond) {\r\n            call_user_func_array([__CLASS__, 'out'], $args);\r\n        }\r\n    }\r\n\r\n    public static function outInfoIf($cond, $msg, ...$vars)\r\n    {\r\n        $args = func_get_args();\r\n        $cond = array_shift($args);\r\n        if ($cond) {\r\n            call_user_func_array([__CLASS__, 'outInfo'], $args);\r\n        }\r\n    }\r\n\r\n    public static function outWarningIf($cond, $msg, ...$vars)\r\n    {\r\n        $args = func_get_args();\r\n        $cond = array_shift($args);\r\n        if ($cond) {\r\n            call_user_func_array([__CLASS__, 'outWarning'], $args);\r\n        }\r\n    }\r\n\r\n    public static function outErrorIf($cond, $msg, ...$vars)\r\n    {\r\n        $args = func_get_args();\r\n        $cond = array_shift($args);\r\n        if ($cond) {\r\n            call_user_func_array([__CLASS__, 'outError'], $args);\r\n        }\r\n    }\r\n\r\n    public static function outNoticeIf($cond, $msg, ...$vars)\r\n    {\r\n        $args = func_get_args();\r\n        $cond = array_shift($args);\r\n        if ($cond) {\r\n            call_user_func_array([__CLASS__, 'outNotice'], $args);\r\n        }\r\n    }\r\n\r\n    public static function outSuccessIf($cond, $msg, ...$vars)\r\n    {\r\n        $args = func_get_args();\r\n        $cond = array_shift($args);\r\n        if ($cond) {\r\n            call_user_func_array([__CLASS__, 'outSuccess'], $args);\r\n        }\r\n    }\r\n\r\n    public static function input($field)\r\n    {\r\n        if (self::canOutAsHtml()) {\r\n            return false;\r\n        }\r\n\r\n        if (!empty($field['items'])) {\r\n            self::inputStructure($field);\r\n        } elseif (!empty($field['select'])) {\r\n            self::inputSelect($field);\r\n        } else {\r\n            self::inputText($field);\r\n        }\r\n\r\n        $val = fgets(STDIN);\r\n        $val = trim($val);\r\n\r\n        if ($field['multiple']) {\r\n            $val = explode(' ', $val);\r\n            $val = array_filter($val);\r\n        }\r\n\r\n        return $val;\r\n    }\r\n\r\n    protected static function inputStructure($field)\r\n    {\r\n        foreach ($field['items'] as $group) {\r\n            self::outToConsole('---' . $group['title']);\r\n            foreach ($group['items'] as $item) {\r\n                self::outToConsole(' > ' . $item['value'] . ' (' . $item['title'] . ')');\r\n            }\r\n        }\r\n        self::outToConsole($field['title'] . ':', '');\r\n    }\r\n\r\n    protected static function inputSelect($field)\r\n    {\r\n        foreach ($field['select'] as $item) {\r\n            self::outToConsole(' > ' . $item['value'] . ' (' . $item['title'] . ')');\r\n        }\r\n        self::outToConsole($field['title'] . ':', '');\r\n    }\r\n\r\n    protected static function inputText($field)\r\n    {\r\n        self::outToConsole($field['title'] . ':', '');\r\n    }\r\n\r\n    public static function outDiffIf($cond, $arr1, $arr2)\r\n    {\r\n        if ($cond) {\r\n            self::outDiff($arr1, $arr2);\r\n        }\r\n    }\r\n\r\n    public static function outDiff($arr1, $arr2)\r\n    {\r\n        $diff1 = self::getArrayFlat(\r\n            self::getArrayDiff($arr2, $arr1)\r\n        );\r\n\r\n        $diff2 = self::getArrayFlat(\r\n            self::getArrayDiff($arr1, $arr2)\r\n        );\r\n\r\n        $diff = array_merge($diff1, $diff2);\r\n\r\n        foreach ($diff as $k => $v) {\r\n            if (isset($diff1[$k]) && isset($diff2[$k])) {\r\n                self::out($k . ': [red]' . $diff2[$k] . '[/] -> [green]' . $diff1[$k] . '[/]');\r\n            } elseif (isset($diff1[$k])) {\r\n                self::out($k . ': [green]' . $diff1[$k] . '[/]');\r\n            } else {\r\n                self::out($k . ': [red]' . $diff2[$k] . '[/]');\r\n            }\r\n        }\r\n    }\r\n\r\n    protected static function getArrayFlat($arr)\r\n    {\r\n        $out = [];\r\n        self::makeArrayFlatRecursive($out, '', $arr);\r\n        return $out;\r\n    }\r\n\r\n    protected static function makeArrayFlatRecursive(array &$out, $key, array $in)\r\n    {\r\n        foreach ($in as $k => $v) {\r\n            if (is_array($v)) {\r\n                self::makeArrayFlatRecursive($out, $key . $k . '.', $v);\r\n            } else {\r\n                $out[$key . $k] = $v;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected static function getArrayDiff($array1, $array2)\r\n    {\r\n        return self::makeArrayDiffRecursive($array1, $array2);\r\n    }\r\n\r\n    protected static function makeArrayDiffRecursive(array $array1, array $array2)\r\n    {\r\n        $diff = [];\r\n        foreach ($array1 as $key => $value) {\r\n            if (is_array($value)) {\r\n                if (!array_key_exists($key, $array2) || !is_array($array2[$key])) {\r\n                    $diff[$key] = $value;\r\n                } else {\r\n                    $newDiff = self::makeArrayDiffRecursive($value, $array2[$key]);\r\n                    if (!empty($newDiff)) {\r\n                        $diff[$key] = $newDiff;\r\n                    }\r\n                }\r\n            } elseif (!array_key_exists($key, $array2) || $array2[$key] !== $value) {\r\n                $diff[$key] = $value;\r\n            }\r\n        }\r\n        return $diff;\r\n    }\r\n\r\n    public static function out($msg, ...$vars)\r\n    {\r\n        if (func_num_args() > 1) {\r\n            $params = func_get_args();\r\n            $msg = call_user_func_array('sprintf', $params);\r\n        }\r\n        if (self::canOutAsHtml()) {\r\n            self::outToHtml($msg);\r\n        } else {\r\n            self::outToConsole($msg);\r\n        }\r\n    }\r\n\r\n    public static function outMessages($messages = [])\r\n    {\r\n        foreach ($messages as $val) {\r\n            if ($val['success']) {\r\n                self::outSuccess($val['message']);\r\n            } else {\r\n                self::outError($val['message']);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static function outSuccess($msg, ...$vars)\r\n    {\r\n        if (func_num_args() > 1) {\r\n            $params = func_get_args();\r\n            $msg = call_user_func_array('sprintf', $params);\r\n        }\r\n\r\n        if (self::canOutAsAdminMessage()) {\r\n            echo (new CAdminMessage(\r\n                [\r\n                    \"MESSAGE\" => self::prepareToHtml($msg),\r\n                    'HTML'    => true,\r\n                    'TYPE'    => 'OK',\r\n                ]\r\n            ))->Show();\r\n        } else {\r\n            self::outNotice($msg);\r\n        }\r\n    }\r\n\r\n    protected static function canOutAsAdminMessage()\r\n    {\r\n        return (self::canOutAsHtml() && class_exists('\\CAdminMessage')) ? 1 : 0;\r\n    }\r\n\r\n    public static function outNotice($msg, ...$vars)\r\n    {\r\n        if (func_num_args() > 1) {\r\n            $params = func_get_args();\r\n            $msg = call_user_func_array('sprintf', $params);\r\n        }\r\n\r\n        $msg = '[green]' . $msg . '[/]';\r\n        if (self::canOutAsHtml()) {\r\n            self::outToHtml($msg);\r\n        } else {\r\n            self::outToConsole($msg);\r\n        }\r\n    }\r\n\r\n    public static function outError($msg, ...$vars)\r\n    {\r\n        if (func_num_args() > 1) {\r\n            $params = func_get_args();\r\n            $msg = call_user_func_array('sprintf', $params);\r\n        }\r\n\r\n        if (self::canOutAsAdminMessage()) {\r\n            echo (new CAdminMessage(\r\n                [\r\n                    \"MESSAGE\" => self::prepareToHtml($msg),\r\n                    'HTML'    => true,\r\n                    'TYPE'    => 'ERROR',\r\n                ]\r\n            ))->Show();\r\n        } else {\r\n            self::outWarning($msg);\r\n        }\r\n    }\r\n\r\n    public static function outWarning($msg, ...$vars)\r\n    {\r\n        if (func_num_args() > 1) {\r\n            $params = func_get_args();\r\n            $msg = call_user_func_array('sprintf', $params);\r\n        }\r\n\r\n        $msg = '[red]' . $msg . '[/]';\r\n        if (self::canOutAsHtml()) {\r\n            self::outToHtml($msg);\r\n        } else {\r\n            self::outToConsole($msg);\r\n        }\r\n    }\r\n\r\n    public static function outException(Throwable $exception)\r\n    {\r\n        self::outWarning(self::getExceptionAsString($exception));\r\n    }\r\n\r\n    public static function getExceptionAsString(Throwable $exception): string\r\n    {\r\n        return sprintf(\r\n            \"[%s] %s (%s) in %s:%d\",\r\n            get_class($exception),\r\n            $exception->getMessage(),\r\n            $exception->getCode(),\r\n            $exception->getFile(),\r\n            $exception->getLine()\r\n        );\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/out.php b/local/modules/sprint.migration/lib/out.php
--- a/local/modules/sprint.migration/lib/out.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/out.php	(date 1670844554000)
@@ -72,14 +72,15 @@
             $msg = str_replace('[' . $key . ']', $val[1], $msg);
         }
 
-        if (isset($options['tracker_task_url'])) {
+        if (!empty($options['tracker_task_url'])) {
             $msg = self::makeTaskUrl($msg, $options['tracker_task_url']);
         }
 
-        $msg = self::makeLinksHtml($msg);
+        if (!empty($options['make_links'])) {
+            $msg = self::makeLinksHtml($msg);
+        }
 
-        $msg = Locale::convertToWin1251IfNeed($msg);
-        return $msg;
+        return Locale::convertToWin1251IfNeed($msg);
     }
 
     protected static function makeTaskUrl($msg, $taskUrl = '')
@@ -107,12 +108,11 @@
             $msg = str_replace('[' . $key . ']', $val[0], $msg);
         }
 
-        if (isset($options['tracker_task_url'])) {
+        if (!empty($options['tracker_task_url'])) {
             $msg = self::makeTaskUrl($msg, $options['tracker_task_url']);
         }
 
-        $msg = Locale::convertToUtf8IfNeed($msg);
-        return $msg;
+        return Locale::convertToUtf8IfNeed($msg);
     }
 
     public static function outInfo($msg, ...$vars)
@@ -271,11 +271,11 @@
 
         foreach ($diff as $k => $v) {
             if (isset($diff1[$k]) && isset($diff2[$k])) {
-                self::out($k . ': [red]' . $diff2[$k] . '[/] -> [green]' . $diff1[$k] . '[/]');
+                self::out($k . ': [red]' . htmlspecialchars($diff2[$k]) . '[/] -> [green]' . htmlspecialchars($diff1[$k]) . '[/]');
             } elseif (isset($diff1[$k])) {
-                self::out($k . ': [green]' . $diff1[$k] . '[/]');
+                self::out($k . ': [green]' . htmlspecialchars($diff1[$k]) . '[/]');
             } else {
-                self::out($k . ': [red]' . $diff2[$k] . '[/]');
+                self::out($k . ': [red]' . htmlspecialchars($diff2[$k]) . '[/]');
             }
         }
     }
Index: local/modules/sprint.migration/lib/version.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\nuse Sprint\\Migration\\Traits\\HelperManagerTrait;\r\n\r\n/**\r\n * Class Version\r\n * @package Sprint\\Migration\r\n */\r\nclass Version extends ExchangeEntity\r\n{\r\n    use HelperManagerTrait;\r\n\r\n    /**\r\n     * @var string\r\n     */\r\n    protected $description = \"\";\r\n    /**\r\n     * @var string\r\n     */\r\n    protected $moduleVersion = \"\";\r\n    /**\r\n     * @var array\r\n     */\r\n    protected $versionFilter = [];\r\n    /**\r\n     * @var string\r\n     */\r\n    protected $storageName = 'default';\r\n\r\n    /**\r\n     * your code for up\r\n     * @throws RestartException\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function up()\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * your code for down\r\n     * @throws RestartException\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function down()\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return bool\r\n     */\r\n    public function isVersionEnabled()\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @throws Exceptions\\ExchangeException\r\n     * @return string\r\n     */\r\n    public function getVersionName()\r\n    {\r\n        return $this->getClassName();\r\n    }\r\n\r\n    /**\r\n     * @return string\r\n     */\r\n    public function getDescription()\r\n    {\r\n        return $this->description;\r\n    }\r\n\r\n    /**\r\n     * @return string\r\n     */\r\n    public function getModuleVersion()\r\n    {\r\n        return $this->moduleVersion;\r\n    }\r\n\r\n    /**\r\n     * @return array\r\n     */\r\n    public function getVersionFilter()\r\n    {\r\n        return $this->versionFilter;\r\n    }\r\n\r\n    /**\r\n     * @param $name\r\n     * @param $data\r\n     * @throws Exceptions\\ExchangeException\r\n     */\r\n    public function saveData($name, $data)\r\n    {\r\n        $this->getStorageManager()->saveData($this->getVersionName(), $name, $data);\r\n    }\r\n\r\n    /**\r\n     * @param $name\r\n     * @throws Exceptions\\ExchangeException\r\n     * @return mixed|string\r\n     *\r\n     */\r\n    public function getSavedData($name)\r\n    {\r\n        return $this->getStorageManager()->getSavedData($this->getVersionName(), $name);\r\n    }\r\n\r\n    /**\r\n     * @param bool $name\r\n     * @throws Exceptions\\ExchangeException\r\n     */\r\n    public function deleteSavedData($name = false)\r\n    {\r\n        $this->getStorageManager()->deleteSavedData($this->getVersionName(), $name);\r\n    }\r\n\r\n    /**\r\n     * @return StorageManager\r\n     */\r\n    protected function getStorageManager()\r\n    {\r\n        return new StorageManager($this->storageName);\r\n    }\r\n\r\n    /**\r\n     * @return ExchangeManager\r\n     */\r\n    protected function getExchangeManager()\r\n    {\r\n        return new ExchangeManager($this);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/version.php b/local/modules/sprint.migration/lib/version.php
--- a/local/modules/sprint.migration/lib/version.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/version.php	(date 1670844554000)
@@ -3,36 +3,36 @@
 namespace Sprint\Migration;
 
 use Sprint\Migration\Exceptions\HelperException;
+use Sprint\Migration\Exceptions\MigrationException;
 use Sprint\Migration\Exceptions\RestartException;
+use Sprint\Migration\Traits\ExitMessageTrait;
 use Sprint\Migration\Traits\HelperManagerTrait;
 
 /**
  * Class Version
+ *
  * @package Sprint\Migration
  */
 class Version extends ExchangeEntity
 {
     use HelperManagerTrait;
+    use ExitMessageTrait;
+    use OutTrait;
 
-    /**
-     * @var string
-     */
-    protected $description = "";
-    /**
-     * @var string
-     */
+    protected $description   = "";
     protected $moduleVersion = "";
-    /**
-     * @var array
-     */
-    protected $versionFilter = [];
+
     /**
-     * @var string
+     * Миграции, которые должны быть установлены перед установкой текущей
+     * $this->requiredVersions = ['Version1','Version1']
+     * или
+     * $this->requiredVersions = [Version1::class,Version2::class]
      */
-    protected $storageName = 'default';
+    protected $requiredVersions = [];
 
     /**
      * your code for up
+     *
      * @throws RestartException
      * @throws HelperException
      * @return bool
@@ -44,6 +44,7 @@
 
     /**
      * your code for down
+     *
      * @throws RestartException
      * @throws HelperException
      * @return bool
@@ -53,23 +54,6 @@
         return true;
     }
 
-    /**
-     * @return bool
-     */
-    public function isVersionEnabled()
-    {
-        return true;
-    }
-
-    /**
-     * @throws Exceptions\ExchangeException
-     * @return string
-     */
-    public function getVersionName()
-    {
-        return $this->getClassName();
-    }
-
     /**
      * @return string
      */
@@ -89,47 +73,30 @@
     /**
      * @return array
      */
-    public function getVersionFilter()
-    {
-        return $this->versionFilter;
-    }
-
-    /**
-     * @param $name
-     * @param $data
-     * @throws Exceptions\ExchangeException
-     */
-    public function saveData($name, $data)
+    public function getRequiredVersions()
     {
-        $this->getStorageManager()->saveData($this->getVersionName(), $name, $data);
+        return $this->requiredVersions;
     }
 
     /**
-     * @param $name
-     * @throws Exceptions\ExchangeException
-     * @return mixed|string
-     *
+     * @throws MigrationException
      */
-    public function getSavedData($name)
+    public function checkRequiredVersions($versionNames)
     {
-        return $this->getStorageManager()->getSavedData($this->getVersionName(), $name);
+        (new VersionManager($this->getVersionConfig()))->checkRequiredVersions($versionNames);
     }
 
     /**
-     * @param bool $name
-     * @throws Exceptions\ExchangeException
-     */
-    public function deleteSavedData($name = false)
-    {
-        $this->getStorageManager()->deleteSavedData($this->getVersionName(), $name);
-    }
-
-    /**
+     * @throws MigrationException
      * @return StorageManager
      */
-    protected function getStorageManager()
+    protected function getStorageManager($versionName = '')
     {
-        return new StorageManager($this->storageName);
+        if (empty($versionName)) {
+            $versionName = $this->getClassName();
+        }
+
+        return new StorageManager('default', $versionName);
     }
 
     /**
@@ -139,7 +106,6 @@
     {
         return new ExchangeManager($this);
     }
-
 }
 
 
Index: local/modules/sprint.migration/lib/helper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse Bitrix\\Main\\Loader;\r\nuse Bitrix\\Main\\LoaderException;\r\nuse CDBResult;\r\nuse CMain;\r\nuse ReflectionClass;\r\nuse ReflectionException;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\n\r\nclass Helper\r\n{\r\n    use OutTrait;\r\n\r\n    /**\r\n     * @var string\r\n     * @deprecated\r\n     */\r\n    public  $lastError = '';\r\n    private $mode      = [\r\n        'test'      => 0,\r\n        'out_equal' => 0,\r\n    ];\r\n\r\n    /**\r\n     * Helper constructor.\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    public function __construct()\r\n    {\r\n        if (!$this->isEnabled()) {\r\n            $this->throwException(\r\n                __METHOD__,\r\n                Locale::getMessage(\r\n                    'ERR_HELPER_DISABLED',\r\n                    [\r\n                        '#NAME#' => $this->getHelperName(),\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return string\r\n     * @deprecated\r\n     */\r\n    public function getLastError()\r\n    {\r\n        return $this->lastError;\r\n    }\r\n\r\n    public function getMode($key = false)\r\n    {\r\n        if ($key) {\r\n            return $this->mode[$key] ?? 0;\r\n        } else {\r\n            return $this->mode;\r\n        }\r\n    }\r\n\r\n    public function setMode($key, $val = 1)\r\n    {\r\n        if ($key instanceof Helper) {\r\n            $this->mode = $key->getMode();\r\n        } else {\r\n            $val = ($val) ? 1 : 0;\r\n            $this->mode[$key] = $val;\r\n        }\r\n    }\r\n\r\n    public function setTestMode($val = 1)\r\n    {\r\n        $this->setMode('test', $val);\r\n    }\r\n\r\n    public function isEnabled()\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param array $names\r\n     *\r\n     * @return bool\r\n     */\r\n    protected function checkModules($names = [])\r\n    {\r\n        $names = is_array($names) ? $names : [$names];\r\n        foreach ($names as $name) {\r\n            try {\r\n                if (!Loader::includeModule($name)) {\r\n                    return false;\r\n                }\r\n            } catch (LoaderException $e) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param        $method\r\n     * @param        $msg\r\n     * @param string ...$vars\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function throwException($method, $msg, ...$vars)\r\n    {\r\n        $args = func_get_args();\r\n        $method = array_shift($args);\r\n\r\n        if ($msg instanceof \\Throwable) {\r\n            $msg = Out::getExceptionAsString($msg);\r\n        } else {\r\n            $msg = call_user_func_array('sprintf', $args);\r\n            $msg = strip_tags($msg);\r\n        }\r\n\r\n        $msg = $this->getMethod($method) . ': ' . $msg;\r\n\r\n        $this->lastError = $msg;\r\n\r\n        throw new HelperException($msg);\r\n    }\r\n\r\n    /**\r\n     * @param $method\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function throwApplicationExceptionIfExists($method)\r\n    {\r\n        /* @global $APPLICATION CMain */\r\n        global $APPLICATION;\r\n        if ($APPLICATION->GetException()) {\r\n            $this->throwException(\r\n                $method,\r\n                $APPLICATION->GetException()->GetString()\r\n            );\r\n        }\r\n    }\r\n\r\n    protected function getHelperName()\r\n    {\r\n        try {\r\n            $classInfo = new ReflectionClass($this);\r\n            return $classInfo->getShortName();\r\n        } catch (ReflectionException $e) {\r\n            return 'Helper';\r\n        }\r\n    }\r\n\r\n    protected function hasDiff($exists, $fields)\r\n    {\r\n        return ($exists != $fields);\r\n    }\r\n\r\n    /**\r\n     * @param $exists\r\n     * @param $fields\r\n     *\r\n     * @return bool\r\n     */\r\n    protected function hasDiffStrict($exists, $fields)\r\n    {\r\n        return ($exists !== $fields);\r\n    }\r\n\r\n    /**\r\n     * @param       $method\r\n     * @param       $fields\r\n     * @param array $reqKeys\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function checkRequiredKeys($method, $fields, $reqKeys = [])\r\n    {\r\n        foreach ($reqKeys as $name) {\r\n            if (empty($fields[$name])) {\r\n                $this->throwException(\r\n                    $method,\r\n                    Locale::getMessage(\r\n                        'ERR_EMPTY_REQ_FIELD',\r\n                        [\r\n                            '#NAME#' => $name,\r\n                        ]\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param CDBResult $dbres\r\n     * @param bool      $indexKey\r\n     * @param bool      $valueKey\r\n     *\r\n     * @return array\r\n     */\r\n    protected function fetchAll(CDBResult $dbres, $indexKey = false, $valueKey = false)\r\n    {\r\n        $res = [];\r\n\r\n        while ($item = $dbres->Fetch()) {\r\n            if ($valueKey) {\r\n                $value = $item[$valueKey];\r\n            } else {\r\n                $value = $item;\r\n            }\r\n\r\n            if ($indexKey) {\r\n                $indexVal = $item[$indexKey];\r\n                $res[$indexVal] = $value;\r\n            } else {\r\n                $res[] = $value;\r\n            }\r\n        }\r\n\r\n        return $res;\r\n    }\r\n\r\n    protected function filterByKey($items, $key, $value)\r\n    {\r\n        return array_values(\r\n            array_filter(\r\n                $items,\r\n                function ($item) use ($key, $value) {\r\n                    return ($item[$key] == $value);\r\n                }\r\n            )\r\n        );\r\n    }\r\n\r\n    private function getMethod($method)\r\n    {\r\n        $path = explode('\\\\', $method);\r\n        $short = array_pop($path);\r\n        return $short;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helper.php b/local/modules/sprint.migration/lib/helper.php
--- a/local/modules/sprint.migration/lib/helper.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helper.php	(date 1670844554000)
@@ -7,7 +7,6 @@
 use CDBResult;
 use CMain;
 use ReflectionClass;
-use ReflectionException;
 use Sprint\Migration\Exceptions\HelperException;
 
 class Helper
@@ -21,7 +20,6 @@
     public  $lastError = '';
     private $mode      = [
         'test'      => 0,
-        'out_equal' => 0,
     ];
 
     /**
@@ -147,12 +145,7 @@
 
     protected function getHelperName()
     {
-        try {
-            $classInfo = new ReflectionClass($this);
-            return $classInfo->getShortName();
-        } catch (ReflectionException $e) {
-            return 'Helper';
-        }
+        return (new ReflectionClass($this))->getShortName();
     }
 
     protected function hasDiff($exists, $fields)
Index: local/modules/sprint.migration/lib/abstractexchange.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse CFile;\r\nuse Exception;\r\nuse Sprint\\Migration\\Exceptions\\ExchangeException;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\nuse Sprint\\Migration\\Traits\\HelperManagerTrait;\r\nuse XMLReader;\r\nuse XMLWriter;\r\n\r\nabstract class AbstractExchange\r\n{\r\n    const EXCHANGE_VERSION = 2;\r\n    use HelperManagerTrait;\r\n    use OutTrait;\r\n\r\n    protected $exchangeEntity;\r\n    protected $file;\r\n    protected $limit = 10;\r\n\r\n    /**\r\n     * abstractexchange constructor.\r\n     *\r\n     * @param ExchangeEntity $exchangeEntity\r\n     *\r\n     * @throws ExchangeException\r\n     */\r\n    public function __construct(ExchangeEntity $exchangeEntity)\r\n    {\r\n        $this->exchangeEntity = $exchangeEntity;\r\n\r\n        if (!class_exists('XMLReader') || !class_exists('XMLWriter')) {\r\n            throw new ExchangeException(\r\n                Locale::getMessage(\r\n                    'ERR_EXCHANGE_DISABLED_XML'\r\n                )\r\n            );\r\n        }\r\n\r\n        if (!$this->isEnabled()) {\r\n            throw new ExchangeException(\r\n                Locale::getMessage(\r\n                    'ERR_EXCHANGE_DISABLED'\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    protected function isEnabled()\r\n    {\r\n        return true;\r\n    }\r\n\r\n    public function setExchangeFile($file)\r\n    {\r\n        $this->file = $file;\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @param $name\r\n     *\r\n     * @throws ExchangeException\r\n     * @return $this\r\n     */\r\n    public function setExchangeResource($name)\r\n    {\r\n        $this->setExchangeFile(\r\n            $this->exchangeEntity->getResourceFile($name)\r\n        );\r\n        return $this;\r\n    }\r\n\r\n    public function getLimit()\r\n    {\r\n        return $this->limit;\r\n    }\r\n\r\n    public function setLimit($limit)\r\n    {\r\n        $this->limit = $limit;\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @throws RestartException\r\n     */\r\n    protected function restart()\r\n    {\r\n        throw new RestartException();\r\n    }\r\n\r\n    protected function writeValue(XMLWriter $writer, $val, $attributes = [])\r\n    {\r\n        if (is_array($val)) {\r\n            foreach ($val as $val1) {\r\n                $this->writeSingleValue($writer, $val1, $attributes);\r\n            }\r\n        } else {\r\n            $this->writeSingleValue($writer, $val, $attributes);\r\n        }\r\n    }\r\n\r\n    protected function writeSingleValue(XMLWriter $writer, $val, $attributes = [])\r\n    {\r\n        if (!empty($val)) {\r\n            if (is_array($val)) {\r\n                $val = $this->purifyValue($val);\r\n                $val = json_encode($val, JSON_UNESCAPED_UNICODE);\r\n                $attributes['type'] = 'json';\r\n            }\r\n            $writer->startElement('value');\r\n            foreach ($attributes as $atcode => $atval) {\r\n                if (!empty($atval)) {\r\n                    $writer->writeAttribute($atcode, $atval);\r\n                }\r\n            }\r\n            $writer->text($val);\r\n            $writer->endElement();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param XMLWriter $writer\r\n     * @param           $fileIds\r\n     *\r\n     * @throws Exception\r\n     */\r\n    protected function writeFile(XMLWriter $writer, $fileIds)\r\n    {\r\n        if (is_array($fileIds)) {\r\n            foreach ($fileIds as $fileId) {\r\n                $this->writeSingleFile($writer, $fileId);\r\n            }\r\n        } else {\r\n            $this->writeSingleFile($writer, $fileIds);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param XMLWriter $writer\r\n     * @param           $fileId\r\n     *\r\n     * @throws Exception\r\n     */\r\n    protected function writeSingleFile(XMLWriter $writer, $fileId)\r\n    {\r\n        $file = CFile::GetFileArray($fileId);\r\n        if (!empty($file)) {\r\n            $filePath = Module::getDocRoot() . $file['SRC'];\r\n            if (file_exists($filePath)) {\r\n                $newPath = $this->getExchangeDir() . '/' . $file['SUBDIR'] . '/' . $file['FILE_NAME'];\r\n                Module::createDir(dirname($newPath));\r\n                if (copy($filePath, $newPath)) {\r\n                    $this->writeValue(\r\n                        $writer,\r\n                        $file['SUBDIR'] . '/' . $file['FILE_NAME'],\r\n                        [\r\n                            'name'        => $file['ORIGINAL_NAME'],\r\n                            'description' => $file['DESCRIPTION'],\r\n                        ]\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected function makeFileValue($value)\r\n    {\r\n        if (!empty($value['value'])) {\r\n            $path = $this->getExchangeDir() . '/' . $value['value'];\r\n            $file = CFile::MakeFileArray($path);\r\n            if (!empty($value['name'])) {\r\n                $file['name'] = $value['name'];\r\n            }\r\n            if (!empty($value['description'])) {\r\n                $file['description'] = $value['description'];\r\n            }\r\n            return $file;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected function collectField(XMLReader $reader, $tag)\r\n    {\r\n        $field = [];\r\n        if ($this->isOpenTag($reader, $tag)) {\r\n            if ($reader->hasAttributes) {\r\n                while ($reader->moveToNextAttribute()) {\r\n                    $field[$reader->name] = $this->purifyValue($reader->value);\r\n                }\r\n            }\r\n            $field['value'] = [];\r\n            do {\r\n                $reader->read();\r\n                if ($this->isOpenTag($reader, 'value')) {\r\n                    $val = [];\r\n                    if ($reader->hasAttributes) {\r\n                        while ($reader->moveToNextAttribute()) {\r\n                            $val[$reader->name] = $this->purifyValue($reader->value);\r\n                        }\r\n                    }\r\n                    $reader->read();\r\n                    if (isset($val['type']) && $val['type'] == 'json') {\r\n                        $val['value'] = json_decode($reader->value, true);\r\n                    } else {\r\n                        $val['value'] = $this->purifyValue($reader->value);\r\n                    }\r\n                    $field['value'][] = $val;\r\n                }\r\n            } while (!$this->isCloseTag($reader, $tag));\r\n        }\r\n        return $field;\r\n    }\r\n\r\n    protected function purifyValue($data)\r\n    {\r\n        if (is_array($data)) {\r\n            foreach ($data as $key => $value) {\r\n                $data[$key] = $this->purifyValue($value);\r\n            }\r\n        } else {\r\n            $data = htmlspecialchars_decode($data);\r\n        }\r\n        return $data;\r\n    }\r\n\r\n    protected function isOpenTag(XMLReader $reader, $tag)\r\n    {\r\n        return (\r\n            $reader->nodeType == XMLReader::ELEMENT\r\n            && $reader->name == $tag\r\n            && !$reader->isEmptyElement\r\n        );\r\n    }\r\n\r\n    protected function isCloseTag(XMLReader $reader, $tag)\r\n    {\r\n        return (\r\n            $reader->nodeType == XMLReader::END_ELEMENT\r\n            && $reader->name == $tag\r\n        );\r\n    }\r\n\r\n    protected function getExchangeDir()\r\n    {\r\n        return dirname($this->file);\r\n    }\r\n\r\n    /**\r\n     * @throws Exception\r\n     */\r\n    protected function createExchangeDir()\r\n    {\r\n        Module::createDir($this->getExchangeDir());\r\n    }\r\n\r\n    protected function appendToExchangeFile($content)\r\n    {\r\n        file_put_contents($this->file, $content, FILE_APPEND);\r\n    }\r\n\r\n    protected function getExchangeFile()\r\n    {\r\n        return $this->file;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/abstractexchange.php b/local/modules/sprint.migration/lib/abstractexchange.php
--- a/local/modules/sprint.migration/lib/abstractexchange.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/abstractexchange.php	(date 1670844554000)
@@ -4,8 +4,9 @@
 
 use CFile;
 use Exception;
-use Sprint\Migration\Exceptions\ExchangeException;
+use Sprint\Migration\Exceptions\MigrationException;
 use Sprint\Migration\Exceptions\RestartException;
+use Sprint\Migration\Traits\ExitMessageTrait;
 use Sprint\Migration\Traits\HelperManagerTrait;
 use XMLReader;
 use XMLWriter;
@@ -14,6 +15,7 @@
 {
     const EXCHANGE_VERSION = 2;
     use HelperManagerTrait;
+    use ExitMessageTrait;
     use OutTrait;
 
     protected $exchangeEntity;
@@ -25,14 +27,14 @@
      *
      * @param ExchangeEntity $exchangeEntity
      *
-     * @throws ExchangeException
+     * @throws MigrationException
      */
     public function __construct(ExchangeEntity $exchangeEntity)
     {
         $this->exchangeEntity = $exchangeEntity;
 
         if (!class_exists('XMLReader') || !class_exists('XMLWriter')) {
-            throw new ExchangeException(
+            throw new MigrationException(
                 Locale::getMessage(
                     'ERR_EXCHANGE_DISABLED_XML'
                 )
@@ -40,7 +42,7 @@
         }
 
         if (!$this->isEnabled()) {
-            throw new ExchangeException(
+            throw new MigrationException(
                 Locale::getMessage(
                     'ERR_EXCHANGE_DISABLED'
                 )
@@ -62,13 +64,14 @@
     /**
      * @param $name
      *
-     * @throws ExchangeException
      * @return $this
      */
     public function setExchangeResource($name)
     {
         $this->setExchangeFile(
-            $this->exchangeEntity->getResourceFile($name)
+            $this->exchangeEntity->getVersionConfig()->getVal('exchange_dir') . '/' .
+            $this->exchangeEntity->getClassName() . '_files/' .
+            $name
         );
         return $this;
     }
Index: local/modules/sprint.migration/lib/exchangemanager.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse Sprint\\Migration\\Exchange\\HlblockElementsExport;\r\nuse Sprint\\Migration\\Exchange\\HlblockElementsImport;\r\nuse Sprint\\Migration\\Exchange\\IblockElementsExport;\r\nuse Sprint\\Migration\\Exchange\\IblockElementsImport;\r\nuse Sprint\\Migration\\Exchange\\MedialibElementsExport;\r\nuse Sprint\\Migration\\Exchange\\MedialibElementsImport;\r\n\r\nclass ExchangeManager\r\n{\r\n    protected $exchangeEntity;\r\n\r\n    public function __construct(ExchangeEntity $exchangeEntity)\r\n    {\r\n        $this->exchangeEntity = $exchangeEntity;\r\n    }\r\n\r\n    /**\r\n     * @throws Exceptions\\ExchangeException\r\n     * @return IblockElementsExport\r\n     */\r\n    public function IblockElementsExport()\r\n    {\r\n        return new IblockElementsExport($this->exchangeEntity);\r\n    }\r\n\r\n    /**\r\n     * @throws Exceptions\\ExchangeException\r\n     * @return IblockElementsImport\r\n     */\r\n    public function IblockElementsImport()\r\n    {\r\n        return new IblockElementsImport($this->exchangeEntity);\r\n    }\r\n\r\n    /**\r\n     * @throws Exceptions\\ExchangeException\r\n     * @return HlblockElementsImport\r\n     */\r\n    public function HlblockElementsImport()\r\n    {\r\n        return new HlblockElementsImport($this->exchangeEntity);\r\n    }\r\n\r\n    /**\r\n     * @throws Exceptions\\ExchangeException\r\n     * @return HlblockElementsExport\r\n     */\r\n    public function HlblockElementsExport()\r\n    {\r\n        return new HlblockElementsExport($this->exchangeEntity);\r\n    }\r\n\r\n    /**\r\n     * @throws Exceptions\\ExchangeException\r\n     * @return MedialibElementsExport\r\n     */\r\n    public function MedialibElementsExport()\r\n    {\r\n        return new MedialibElementsExport($this->exchangeEntity);\r\n    }\r\n\r\n    /**\r\n     * @throws Exceptions\\ExchangeException\r\n     * @return MedialibElementsImport\r\n     */\r\n    public function MedialibElementsImport()\r\n    {\r\n        return new MedialibElementsImport($this->exchangeEntity);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/exchangemanager.php b/local/modules/sprint.migration/lib/exchangemanager.php
--- a/local/modules/sprint.migration/lib/exchangemanager.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/exchangemanager.php	(date 1670844554000)
@@ -19,7 +19,7 @@
     }
 
     /**
-     * @throws Exceptions\ExchangeException
+     * @throws Exceptions\MigrationException
      * @return IblockElementsExport
      */
     public function IblockElementsExport()
@@ -28,7 +28,7 @@
     }
 
     /**
-     * @throws Exceptions\ExchangeException
+     * @throws Exceptions\MigrationException
      * @return IblockElementsImport
      */
     public function IblockElementsImport()
@@ -37,7 +37,7 @@
     }
 
     /**
-     * @throws Exceptions\ExchangeException
+     * @throws Exceptions\MigrationException
      * @return HlblockElementsImport
      */
     public function HlblockElementsImport()
@@ -46,7 +46,7 @@
     }
 
     /**
-     * @throws Exceptions\ExchangeException
+     * @throws Exceptions\MigrationException
      * @return HlblockElementsExport
      */
     public function HlblockElementsExport()
@@ -55,7 +55,7 @@
     }
 
     /**
-     * @throws Exceptions\ExchangeException
+     * @throws Exceptions\MigrationException
      * @return MedialibElementsExport
      */
     public function MedialibElementsExport()
@@ -64,7 +64,7 @@
     }
 
     /**
-     * @throws Exceptions\ExchangeException
+     * @throws Exceptions\MigrationException
      * @return MedialibElementsImport
      */
     public function MedialibElementsImport()
Index: local/modules/sprint.migration/lib/versionbuilder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse Sprint\\Migration\\Enum\\VersionEnum;\r\n\r\nabstract class VersionBuilder extends AbstractBuilder\r\n{\r\n    protected function addVersionFields()\r\n    {\r\n        $this->addField(\r\n            'prefix', [\r\n                'title' => Locale::getMessage('FORM_PREFIX'),\r\n                'value' => $this->getVersionConfig()->getVal('version_prefix'),\r\n                'width' => 250,\r\n            ]\r\n        );\r\n\r\n        $this->addField(\r\n            'description', [\r\n                'title'  => Locale::getMessage('FORM_DESCR'),\r\n                'width'  => 350,\r\n                'height' => 40,\r\n            ]\r\n        );\r\n    }\r\n\r\n    protected function purifyPrefix($prefix = '')\r\n    {\r\n        $prefix = trim($prefix);\r\n        if (empty($prefix)) {\r\n            $prefix = $this->getVersionConfig()->getVal('version_prefix');\r\n            $prefix = trim($prefix);\r\n        }\r\n\r\n        $default = 'Version';\r\n        if (empty($prefix)) {\r\n            return $default;\r\n        }\r\n\r\n        $prefix = preg_replace(\"/[^a-z0-9_]/i\", '', $prefix);\r\n        if (empty($prefix)) {\r\n            return $default;\r\n        }\r\n\r\n        if (preg_match('/^\\d/', $prefix)) {\r\n            return $default;\r\n        }\r\n\r\n        return $prefix;\r\n    }\r\n\r\n    protected function purifyDescription($descr = '')\r\n    {\r\n        $descr = strval($descr);\r\n        $descr = str_replace([\"\\n\\r\", \"\\r\\n\", \"\\n\", \"\\r\"], ' ', $descr);\r\n        $descr = strip_tags($descr);\r\n        $descr = addslashes($descr);\r\n        return $descr;\r\n    }\r\n\r\n    protected function getVersionFile($versionName)\r\n    {\r\n        return $this->getVersionConfig()->getVal('migration_dir') . '/' . $versionName . '.php';\r\n    }\r\n\r\n    protected function getVersionResourceFile($versionName, $name)\r\n    {\r\n        return $this->getVersionConfig()->getVal('migration_dir') . '/' . $versionName . '_files/' . $name;\r\n    }\r\n\r\n    protected function getVersionName()\r\n    {\r\n        if (!isset($this->params['~version_name'])) {\r\n            $this->params['~version_name'] = $this->createVersionName();\r\n            $versionName = $this->params['~version_name'];\r\n        } else {\r\n            $versionName = $this->params['~version_name'];\r\n        }\r\n        return $versionName;\r\n    }\r\n\r\n    protected function createVersionName()\r\n    {\r\n        return strtr(\r\n            $this->getVersionConfig()->getVal('version_name_template'),\r\n            [\r\n                '#NAME#'      => $this->purifyPrefix($this->getFieldValue('prefix')),\r\n                '#TIMESTAMP#' => $this->getTimestamp(),\r\n            ]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param string $templateFile\r\n     * @param array  $templateVars\r\n     * @param bool   $markAsInstalled\r\n     *\r\n     * @throws Exceptions\\MigrationException\r\n     * @return bool|string\r\n     */\r\n    protected function createVersionFile($templateFile = '', $templateVars = [], $markAsInstalled = true)\r\n    {\r\n        $templateVars['description'] = $this->purifyDescription(\r\n            $this->getFieldValue('description')\r\n        );\r\n\r\n        if (empty($templateVars['version'])) {\r\n            $templateVars['version'] = $this->getVersionName();\r\n        }\r\n\r\n        list($extendUse, $extendClass) = explode(' as ', $this->getVersionConfig()->getVal('migration_extend_class'));\r\n        $extendUse = trim($extendUse);\r\n        $extendClass = trim($extendClass);\r\n\r\n        if (!empty($extendClass)) {\r\n            $extendUse = 'use ' . $extendUse . ' as ' . $extendClass . ';' . PHP_EOL;\r\n        } else {\r\n            $extendClass = $extendUse;\r\n            $extendUse = '';\r\n        }\r\n\r\n        $tplVars = array_merge(\r\n            [\r\n                'extendUse'     => $extendUse,\r\n                'extendClass'   => $extendClass,\r\n                'moduleVersion' => Module::getVersion(),\r\n            ], $templateVars\r\n        );\r\n\r\n        if (!is_file($templateFile)) {\r\n            $templateFile = Module::getModuleDir() . '/templates/version.php';\r\n        }\r\n\r\n        $fileName = $this->getVersionFile($templateVars['version']);\r\n        $fileContent = $this->renderFile($templateFile, $tplVars);\r\n\r\n        file_put_contents($fileName, $fileContent);\r\n\r\n        if (!is_file($fileName)) {\r\n            Out::outError(\r\n                Locale::getMessage(\r\n                    'ERR_CANT_CREATE_FILE', [\r\n                        '#NAME#' => $fileName,\r\n                    ]\r\n                )\r\n            );\r\n            return false;\r\n        }\r\n\r\n        Out::outSuccess(\r\n            Locale::getMessage(\r\n                'CREATED_SUCCESS',\r\n                [\r\n                    '#VERSION#' => $templateVars['version'],\r\n                ]\r\n            )\r\n        );\r\n\r\n        if ($markAsInstalled) {\r\n            $vm = new VersionManager($this->getVersionConfig());\r\n            $vm->markMigration($templateVars['version'], VersionEnum::STATUS_INSTALLED);\r\n        }\r\n\r\n        return $templateVars['version'];\r\n    }\r\n\r\n    protected function getTimestamp()\r\n    {\r\n        $originTz = date_default_timezone_get();\r\n        date_default_timezone_set('Europe/Moscow');\r\n        $ts = date('YmdHis');\r\n        date_default_timezone_set($originTz);\r\n        return $ts;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/versionbuilder.php b/local/modules/sprint.migration/lib/versionbuilder.php
--- a/local/modules/sprint.migration/lib/versionbuilder.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/versionbuilder.php	(date 1670844554000)
@@ -61,23 +61,23 @@
 
     protected function getVersionFile($versionName)
     {
-        return $this->getVersionConfig()->getVal('migration_dir') . '/' . $versionName . '.php';
+        return $this->getVersionConfig()->getVal('migration_dir') . '/' .
+               $versionName . '.php';
     }
 
     protected function getVersionResourceFile($versionName, $name)
     {
-        return $this->getVersionConfig()->getVal('migration_dir') . '/' . $versionName . '_files/' . $name;
+        return $this->getVersionConfig()->getVal('exchange_dir') . '/' .
+               $versionName . '_files/' .
+               $name;
     }
 
     protected function getVersionName()
     {
         if (!isset($this->params['~version_name'])) {
             $this->params['~version_name'] = $this->createVersionName();
-            $versionName = $this->params['~version_name'];
-        } else {
-            $versionName = $this->params['~version_name'];
         }
-        return $versionName;
+        return $this->params['~version_name'];
     }
 
     protected function createVersionName()
Index: local/modules/sprint.migration/lib/storagemanager.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse Sprint\\Migration\\Tables\\StorageTable;\r\n\r\nclass StorageManager extends StorageTable\r\n{\r\n\r\n    /**\r\n     * @param $category\r\n     * @param $name\r\n     * @param string $value\r\n     */\r\n    public function saveData($category, $name, $value = '')\r\n    {\r\n        $category = $this->forSql($category);\r\n        $name = $this->forSql($name);\r\n\r\n        if (!empty($category) && !empty($name)) {\r\n            if (!empty($value)) {\r\n                $value = $this->forSql(serialize($value));\r\n                $this->query('INSERT INTO `#TABLE1#` (`category`,`name`, `data`) VALUES (\"%s\", \"%s\", \"%s\") \r\n                    ON DUPLICATE KEY UPDATE data = \"%s\"',\r\n                    $category,\r\n                    $name,\r\n                    $value,\r\n                    $value\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $category\r\n     * @param $name\r\n     * @param string $default\r\n     * @return mixed|string\r\n     */\r\n    public function getSavedData($category, $name, $default = '')\r\n    {\r\n        $category = $this->forSql($category);\r\n        $name = $this->forSql($name);\r\n\r\n        if (!empty($category) && !empty($name)) {\r\n            $value = $this->query('SELECT name, data FROM #TABLE1# WHERE `category` = \"%s\" AND `name` = \"%s\"',\r\n                $category,\r\n                $name\r\n            )->Fetch();\r\n            if ($value && $value['data']) {\r\n                return unserialize($value['data']);\r\n            }\r\n        }\r\n        return $default;\r\n    }\r\n\r\n    /**\r\n     * @param $category\r\n     * @param bool $name\r\n     */\r\n    public function deleteSavedData($category, $name = false)\r\n    {\r\n        $category = $this->forSql($category);\r\n\r\n        if ($category && $name) {\r\n            $name = $this->forSql($name);\r\n            $this->query('DELETE FROM `#TABLE1#` WHERE `category` = \"%s\" AND `name` = \"%s\"',\r\n                $category,\r\n                $name\r\n            );\r\n        } elseif ($category) {\r\n            $this->query('DELETE FROM `#TABLE1#` WHERE `category` = \"%s\"',\r\n                $category\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/storagemanager.php b/local/modules/sprint.migration/lib/storagemanager.php
--- a/local/modules/sprint.migration/lib/storagemanager.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/storagemanager.php	(date 1670844554000)
@@ -6,75 +6,6 @@
 
 class StorageManager extends StorageTable
 {
-
-    /**
-     * @param $category
-     * @param $name
-     * @param string $value
-     */
-    public function saveData($category, $name, $value = '')
-    {
-        $category = $this->forSql($category);
-        $name = $this->forSql($name);
-
-        if (!empty($category) && !empty($name)) {
-            if (!empty($value)) {
-                $value = $this->forSql(serialize($value));
-                $this->query('INSERT INTO `#TABLE1#` (`category`,`name`, `data`) VALUES ("%s", "%s", "%s") 
-                    ON DUPLICATE KEY UPDATE data = "%s"',
-                    $category,
-                    $name,
-                    $value,
-                    $value
-                );
-            }
-        }
-    }
-
-    /**
-     * @param $category
-     * @param $name
-     * @param string $default
-     * @return mixed|string
-     */
-    public function getSavedData($category, $name, $default = '')
-    {
-        $category = $this->forSql($category);
-        $name = $this->forSql($name);
-
-        if (!empty($category) && !empty($name)) {
-            $value = $this->query('SELECT name, data FROM #TABLE1# WHERE `category` = "%s" AND `name` = "%s"',
-                $category,
-                $name
-            )->Fetch();
-            if ($value && $value['data']) {
-                return unserialize($value['data']);
-            }
-        }
-        return $default;
-    }
-
-    /**
-     * @param $category
-     * @param bool $name
-     */
-    public function deleteSavedData($category, $name = false)
-    {
-        $category = $this->forSql($category);
-
-        if ($category && $name) {
-            $name = $this->forSql($name);
-            $this->query('DELETE FROM `#TABLE1#` WHERE `category` = "%s" AND `name` = "%s"',
-                $category,
-                $name
-            );
-        } elseif ($category) {
-            $this->query('DELETE FROM `#TABLE1#` WHERE `category` = "%s"',
-                $category
-            );
-        }
-    }
-
 }
 
 
Index: local/modules/sprint.migration/lib/abstractbuilder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse Exception;\r\nuse Sprint\\Migration\\Exceptions\\RebuildException;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\nuse Sprint\\Migration\\Traits\\HelperManagerTrait;\r\n\r\nabstract class AbstractBuilder extends ExchangeEntity\r\n{\r\n    use HelperManagerTrait;\r\n\r\n    private $name;\r\n    /** @var VersionConfig */\r\n    private $versionConfig;\r\n    private $info          = [\r\n        'title'       => '',\r\n        'description' => '',\r\n        'group'       => 'Tools',\r\n    ];\r\n    private $fields        = [];\r\n    private $execStatus    = '';\r\n\r\n    public function __construct(VersionConfig $versionConfig, $name, $params = [])\r\n    {\r\n        $this->versionConfig = $versionConfig;\r\n        $this->name = $name;\r\n        $this->params = $params;\r\n\r\n        $this->addFieldHidden('builder_name', $this->getName());\r\n    }\r\n\r\n    abstract protected function initialize();\r\n\r\n    /**\r\n     * @throws RestartException|RebuildException|Exception\r\n     * @return mixed\r\n     */\r\n    abstract protected function execute();\r\n\r\n    protected function isBuilderEnabled()\r\n    {\r\n        return false;\r\n    }\r\n\r\n    public function initializeBuilder()\r\n    {\r\n        $this->initialize();\r\n    }\r\n\r\n    public function getVersionConfig()\r\n    {\r\n        return $this->versionConfig;\r\n    }\r\n\r\n    public function isEnabled()\r\n    {\r\n        try {\r\n            return $this->isBuilderEnabled();\r\n        } catch (Exception $e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    protected function addField($code, $param = [])\r\n    {\r\n        if (isset($param['multiple']) && $param['multiple']) {\r\n            $value = [];\r\n        } else {\r\n            $value = '';\r\n        }\r\n\r\n        $param = array_merge(\r\n            [\r\n                'title' => '',\r\n                'value' => $value,\r\n                'bind'  => 0,\r\n            ], $param\r\n        );\r\n\r\n        if (empty($param['title'])) {\r\n            $param['title'] = $code;\r\n        }\r\n\r\n        if (isset($this->params[$code])) {\r\n            $param['value'] = $this->params[$code];\r\n            $param['bind'] = 1;\r\n        }\r\n\r\n        $this->fields[$code] = $param;\r\n    }\r\n\r\n    /**\r\n     * @param string $code\r\n     * @param array  $param\r\n     *\r\n     * @throws RebuildException\r\n     * @return mixed\r\n     */\r\n    protected function addFieldAndReturn($code, $param = [])\r\n    {\r\n        $this->addField($code, $param);\r\n\r\n        $value = $this->getFieldValue($code);\r\n        if (empty($value)) {\r\n            $this->rebuildField($code);\r\n        }\r\n\r\n        if (isset($param['multiple']) && $param['multiple']) {\r\n            $value = is_array($value) ? $value : [$value];\r\n        }\r\n\r\n        return $value;\r\n    }\r\n\r\n    protected function addFieldHidden($code, $val)\r\n    {\r\n        $this->params[$code] = $val;\r\n        $this->addField(\r\n            $code, [\r\n                'type' => 'hidden',\r\n            ]\r\n        );\r\n    }\r\n\r\n    protected function getFieldValue($code, $default = '')\r\n    {\r\n        if (isset($this->fields[$code]) && $this->fields[$code]['bind'] == 1) {\r\n            return $this->fields[$code]['value'];\r\n        } else {\r\n            return $default;\r\n        }\r\n    }\r\n\r\n    public function bindField($code, $val)\r\n    {\r\n        if (isset($this->fields[$code])) {\r\n            $this->fields[$code]['bind'] = 1;\r\n            $this->fields[$code]['value'] = $val;\r\n            $this->params[$code] = $val;\r\n        }\r\n    }\r\n\r\n    protected function renderFile($file, $vars = [])\r\n    {\r\n        if (is_array($vars)) {\r\n            extract($vars, EXTR_SKIP);\r\n        }\r\n\r\n        ob_start();\r\n\r\n        if (is_file($file)) {\r\n            /** @noinspection PhpIncludeInspection */\r\n            include $file;\r\n        }\r\n\r\n        return ob_get_clean();\r\n    }\r\n\r\n    public function renderHtml()\r\n    {\r\n        echo $this->renderFile(\r\n            Module::getModuleDir() . '/admin/includes/builder_form.php', [\r\n                'builder' => $this,\r\n            ]\r\n        );\r\n    }\r\n\r\n    public function renderConsole()\r\n    {\r\n        $fields = $this->getFields();\r\n        foreach ($fields as $code => $field) {\r\n            if (empty($field['bind'])) {\r\n                $val = Out::input($field);\r\n                $this->bindField($code, $val);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function isRebuild()\r\n    {\r\n        return ($this->execStatus == 'rebuild');\r\n    }\r\n\r\n    public function isRestart()\r\n    {\r\n        return ($this->execStatus == 'restart');\r\n    }\r\n\r\n    public function buildExecute()\r\n    {\r\n        $this->execStatus = '';\r\n\r\n        try {\r\n            $this->execute();\r\n        } catch (RestartException $e) {\r\n            $this->execStatus = 'restart';\r\n            return false;\r\n        } catch (RebuildException $e) {\r\n            $this->execStatus = 'rebuild';\r\n            return false;\r\n        } catch (Exception $e) {\r\n            $this->execStatus = 'error';\r\n            $this->outException($e);\r\n            $this->params = [];\r\n            return false;\r\n        }\r\n\r\n        $this->execStatus = 'success';\r\n        $this->params = [];\r\n        return true;\r\n    }\r\n\r\n    public function buildAfter()\r\n    {\r\n        foreach ($this->params as $code => $val) {\r\n            if (!isset($this->fields[$code])) {\r\n                if (is_numeric($val) || is_string($val)) {\r\n                    $this->addFieldHidden($code, $val);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected function unbindField($code)\r\n    {\r\n        if (isset($this->fields[$code])) {\r\n            $this->fields[$code]['bind'] = 0;\r\n        }\r\n\r\n        if (isset($this->params[$code])) {\r\n            unset($this->params[$code]);\r\n        }\r\n    }\r\n\r\n    protected function removeField($code)\r\n    {\r\n        if (isset($this->params[$code])) {\r\n            unset($this->params[$code]);\r\n        }\r\n\r\n        if (isset($this->fields[$code])) {\r\n            unset($this->fields[$code]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $code\r\n     *\r\n     * @throws RebuildException\r\n     */\r\n    protected function rebuildField($code)\r\n    {\r\n        $this->unbindField($code);\r\n        throw new RebuildException('rebuild form');\r\n    }\r\n\r\n    public function getName()\r\n    {\r\n        return $this->name;\r\n    }\r\n\r\n    public function getFields()\r\n    {\r\n        return $this->fields;\r\n    }\r\n\r\n    protected function setTitle($title = '')\r\n    {\r\n        $this->info['title'] = $title;\r\n    }\r\n\r\n    protected function setDescription($description = '')\r\n    {\r\n        $this->info['description'] = $description;\r\n    }\r\n\r\n    protected function setGroup($group = '')\r\n    {\r\n        $this->info['group'] = $group;\r\n    }\r\n\r\n    public function getTitle()\r\n    {\r\n        return $this->info['title'];\r\n    }\r\n\r\n    public function getDescription()\r\n    {\r\n        return $this->info['description'];\r\n    }\r\n\r\n    public function hasDescription()\r\n    {\r\n        return !empty($this->info['description']);\r\n    }\r\n\r\n    public function getGroup()\r\n    {\r\n        return $this->info['group'];\r\n    }\r\n\r\n    /** @param $code\r\n     * @param array $param\r\n     *\r\n     * @deprecated\r\n     */\r\n    protected function requiredField($code, $param = [])\r\n    {\r\n        $this->addField($code, $param);\r\n    }\r\n\r\n    /** @param $code\r\n     * @param array $param\r\n     *\r\n     * @deprecated\r\n     */\r\n    protected function setField($code, $param = [])\r\n    {\r\n        $this->addField($code, $param);\r\n    }\r\n\r\n    /**\r\n     * @return ExchangeManager\r\n     */\r\n    protected function getExchangeManager()\r\n    {\r\n        return new ExchangeManager($this);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/abstractbuilder.php b/local/modules/sprint.migration/lib/abstractbuilder.php
--- a/local/modules/sprint.migration/lib/abstractbuilder.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/abstractbuilder.php	(date 1670844554000)
@@ -5,28 +5,30 @@
 use Exception;
 use Sprint\Migration\Exceptions\RebuildException;
 use Sprint\Migration\Exceptions\RestartException;
+use Sprint\Migration\Traits\ExitMessageTrait;
 use Sprint\Migration\Traits\HelperManagerTrait;
 
 abstract class AbstractBuilder extends ExchangeEntity
 {
     use HelperManagerTrait;
+    use ExitMessageTrait;
+    use OutTrait;
 
     private $name;
-    /** @var VersionConfig */
-    private $versionConfig;
-    private $info          = [
+    private $info       = [
         'title'       => '',
         'description' => '',
         'group'       => 'Tools',
     ];
-    private $fields        = [];
-    private $execStatus    = '';
+    private $fields     = [];
+    private $execStatus = '';
 
     public function __construct(VersionConfig $versionConfig, $name, $params = [])
     {
-        $this->versionConfig = $versionConfig;
         $this->name = $name;
-        $this->params = $params;
+
+        $this->setVersionConfig($versionConfig);
+        $this->setRestartParams($params);
 
         $this->addFieldHidden('builder_name', $this->getName());
     }
@@ -49,11 +51,6 @@
         $this->initialize();
     }
 
-    public function getVersionConfig()
-    {
-        return $this->versionConfig;
-    }
-
     public function isEnabled()
     {
         try {
@@ -63,6 +60,14 @@
         }
     }
 
+    /**
+     * @return ExchangeManager
+     */
+    protected function getExchangeManager()
+    {
+        return new ExchangeManager($this);
+    }
+
     protected function addField($code, $param = [])
     {
         if (isset($param['multiple']) && $param['multiple']) {
@@ -151,7 +156,6 @@
         ob_start();
 
         if (is_file($file)) {
-            /** @noinspection PhpIncludeInspection */
             include $file;
         }
 
@@ -320,12 +324,4 @@
     {
         $this->addField($code, $param);
     }
-
-    /**
-     * @return ExchangeManager
-     */
-    protected function getExchangeManager()
-    {
-        return new ExchangeManager($this);
-    }
 }
Index: composer.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n    \"_readme\": [\r\n        \"This file locks the dependencies of your project to a known state\",\r\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\r\n        \"This file is @generated automatically\"\r\n    ],\r\n    \"content-hash\": \"a03671bdef600b1ba0c371830ff9094b\",\r\n    \"packages\": [\r\n        {\r\n            \"name\": \"anahkiasen/html-object\",\r\n            \"version\": \"1.4.4\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/Anahkiasen/html-object.git\",\r\n                \"reference\": \"45bb54b91112c064d3906c207259d5c8dcba798f\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/Anahkiasen/html-object/zipball/45bb54b91112c064d3906c207259d5c8dcba798f\",\r\n                \"reference\": \"45bb54b91112c064d3906c207259d5c8dcba798f\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.3.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"madewithlove/php-cs-fixer-config\": \"^1.3\",\r\n                \"phpunit/phpunit\": \"^4.8\",\r\n                \"phpunit/phpunit-dom-assertions\": \"^0.1.0\",\r\n                \"symfony/css-selector\": \"^2.6\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"HtmlObject\\\\\": \"src\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Anahkiasen\",\r\n                    \"email\": \"ehtnam6@gmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"A set of classes to create and manipulate HTML objects abstractions\",\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/Anahkiasen/html-object/issues\",\r\n                \"source\": \"https://github.com/Anahkiasen/html-object/tree/master\"\r\n            },\r\n            \"time\": \"2017-05-31T07:52:45+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"andreyryabin/sprint.editor\",\r\n            \"version\": \"3.24.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/andreyryabin/sprint.editor.git\",\r\n                \"reference\": \"bab379b76220e7b192420825ee7c8b3ab1fe05ee\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/andreyryabin/sprint.editor/zipball/bab379b76220e7b192420825ee7c8b3ab1fe05ee\",\r\n                \"reference\": \"bab379b76220e7b192420825ee7c8b3ab1fe05ee\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"composer/installers\": \"~1\",\r\n                \"ext-json\": \"*\",\r\n                \"php\": \">=5.4.0\"\r\n            },\r\n            \"type\": \"bitrix-module\",\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Andrey Ryabin\",\r\n                    \"email\": \"andreyryabin@yandex.ru\",\r\n                    \"role\": \"Author\"\r\n                },\r\n                {\r\n                    \"name\": \"Gripinskiy Sergey\",\r\n                    \"email\": \"web-architect@mail.ru\",\r\n                    \"role\": \"Contributor\"\r\n                }\r\n            ],\r\n            \"description\": \"Редактор для контент-менеджеров (1С-Битрикс)\",\r\n            \"homepage\": \"http://marketplace.1c-bitrix.ru/solutions/sprint.editor/\",\r\n            \"keywords\": [\r\n                \"bitrix\",\r\n                \"editor\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/andreyryabin/sprint.editor/issues\",\r\n                \"source\": \"https://github.com/andreyryabin/sprint.editor/tree/3.24.2\"\r\n            },\r\n            \"funding\": [\r\n                {\r\n                    \"url\": \"https://yoomoney.ru/to/410012104240288\",\r\n                    \"type\": \"custom\"\r\n                }\r\n            ],\r\n            \"time\": \"2022-09-06T11:08:23+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"andreyryabin/sprint.migration\",\r\n            \"version\": \"4.1.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/andreyryabin/sprint.migration.git\",\r\n                \"reference\": \"f2816d25b6d3d6075bd9a24169442886ed117f36\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/andreyryabin/sprint.migration/zipball/f2816d25b6d3d6075bd9a24169442886ed117f36\",\r\n                \"reference\": \"f2816d25b6d3d6075bd9a24169442886ed117f36\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"composer/installers\": \"~1\",\r\n                \"ext-iconv\": \"*\",\r\n                \"ext-json\": \"*\",\r\n                \"php\": \">=7.0\"\r\n            },\r\n            \"type\": \"bitrix-module\",\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Andrey Ryabin\",\r\n                    \"email\": \"andreyryabin@yandex.ru\",\r\n                    \"role\": \"Author\"\r\n                }\r\n            ],\r\n            \"description\": \"bitrix migration module\",\r\n            \"homepage\": \"http://marketplace.1c-bitrix.ru/solutions/sprint.migration/\",\r\n            \"keywords\": [\r\n                \"andrey\",\r\n                \"bitrix\",\r\n                \"migration\",\r\n                \"ryabin\",\r\n                \"sprint\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/andreyryabin/sprint.migration/issues\",\r\n                \"source\": \"https://github.com/andreyryabin/sprint.migration/tree/4.1.3\"\r\n            },\r\n            \"funding\": [\r\n                {\r\n                    \"url\": \"https://yoomoney.ru/to/410012104240288\",\r\n                    \"type\": \"custom\"\r\n                }\r\n            ],\r\n            \"time\": \"2022-11-28T11:14:15+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"bitrix-expert/tools\",\r\n            \"version\": \"1.5.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/bitrix-expert/tools.git\",\r\n                \"reference\": \"5668d07804318e3831459fe14d15d7a4efcdd186\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/bitrix-expert/tools/zipball/5668d07804318e3831459fe14d15d7a4efcdd186\",\r\n                \"reference\": \"5668d07804318e3831459fe14d15d7a4efcdd186\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.4.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"files\": [\r\n                    \"src/bootstrap.php\"\r\n                ],\r\n                \"psr-4\": {\r\n                    \"Bex\\\\Tools\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nik Samokhvalov\",\r\n                    \"email\": \"nik@samokhvalov.info\"\r\n                }\r\n            ],\r\n            \"description\": \"Helpers for developers on Bitrix\",\r\n            \"keywords\": [\r\n                \"bitrix\",\r\n                \"iblock\",\r\n                \"tools\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/bitrix-expert/tools/issues\",\r\n                \"source\": \"https://github.com/bitrix-expert/tools/\",\r\n                \"wiki\": \"https://github.com/bitrix-expert/tools/wiki\"\r\n            },\r\n            \"time\": \"2017-03-27T11:07:34+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"composer/installers\",\r\n            \"version\": \"v1.12.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/composer/installers.git\",\r\n                \"reference\": \"d20a64ed3c94748397ff5973488761b22f6d3f19\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/composer/installers/zipball/d20a64ed3c94748397ff5973488761b22f6d3f19\",\r\n                \"reference\": \"d20a64ed3c94748397ff5973488761b22f6d3f19\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"composer-plugin-api\": \"^1.0 || ^2.0\"\r\n            },\r\n            \"replace\": {\r\n                \"roundcube/plugin-installer\": \"*\",\r\n                \"shama/baton\": \"*\"\r\n            },\r\n            \"require-dev\": {\r\n                \"composer/composer\": \"1.6.* || ^2.0\",\r\n                \"composer/semver\": \"^1 || ^3\",\r\n                \"phpstan/phpstan\": \"^0.12.55\",\r\n                \"phpstan/phpstan-phpunit\": \"^0.12.16\",\r\n                \"symfony/phpunit-bridge\": \"^4.2 || ^5\",\r\n                \"symfony/process\": \"^2.3\"\r\n            },\r\n            \"type\": \"composer-plugin\",\r\n            \"extra\": {\r\n                \"class\": \"Composer\\\\Installers\\\\Plugin\",\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"1.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Composer\\\\Installers\\\\\": \"src/Composer/Installers\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Kyle Robinson Young\",\r\n                    \"email\": \"kyle@dontkry.com\",\r\n                    \"homepage\": \"https://github.com/shama\"\r\n                }\r\n            ],\r\n            \"description\": \"A multi-framework Composer library installer\",\r\n            \"homepage\": \"https://composer.github.io/installers/\",\r\n            \"keywords\": [\r\n                \"Craft\",\r\n                \"Dolibarr\",\r\n                \"Eliasis\",\r\n                \"Hurad\",\r\n                \"ImageCMS\",\r\n                \"Kanboard\",\r\n                \"Lan Management System\",\r\n                \"MODX Evo\",\r\n                \"MantisBT\",\r\n                \"Mautic\",\r\n                \"Maya\",\r\n                \"OXID\",\r\n                \"Plentymarkets\",\r\n                \"Porto\",\r\n                \"RadPHP\",\r\n                \"SMF\",\r\n                \"Starbug\",\r\n                \"Thelia\",\r\n                \"Whmcs\",\r\n                \"WolfCMS\",\r\n                \"agl\",\r\n                \"aimeos\",\r\n                \"annotatecms\",\r\n                \"attogram\",\r\n                \"bitrix\",\r\n                \"cakephp\",\r\n                \"chef\",\r\n                \"cockpit\",\r\n                \"codeigniter\",\r\n                \"concrete5\",\r\n                \"croogo\",\r\n                \"dokuwiki\",\r\n                \"drupal\",\r\n                \"eZ Platform\",\r\n                \"elgg\",\r\n                \"expressionengine\",\r\n                \"fuelphp\",\r\n                \"grav\",\r\n                \"installer\",\r\n                \"itop\",\r\n                \"joomla\",\r\n                \"known\",\r\n                \"kohana\",\r\n                \"laravel\",\r\n                \"lavalite\",\r\n                \"lithium\",\r\n                \"magento\",\r\n                \"majima\",\r\n                \"mako\",\r\n                \"mediawiki\",\r\n                \"miaoxing\",\r\n                \"modulework\",\r\n                \"modx\",\r\n                \"moodle\",\r\n                \"osclass\",\r\n                \"pantheon\",\r\n                \"phpbb\",\r\n                \"piwik\",\r\n                \"ppi\",\r\n                \"processwire\",\r\n                \"puppet\",\r\n                \"pxcms\",\r\n                \"reindex\",\r\n                \"roundcube\",\r\n                \"shopware\",\r\n                \"silverstripe\",\r\n                \"sydes\",\r\n                \"sylius\",\r\n                \"symfony\",\r\n                \"tastyigniter\",\r\n                \"typo3\",\r\n                \"wordpress\",\r\n                \"yawik\",\r\n                \"zend\",\r\n                \"zikula\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/composer/installers/issues\",\r\n                \"source\": \"https://github.com/composer/installers/tree/v1.12.0\"\r\n            },\r\n            \"funding\": [\r\n                {\r\n                    \"url\": \"https://packagist.com\",\r\n                    \"type\": \"custom\"\r\n                },\r\n                {\r\n                    \"url\": \"https://github.com/composer\",\r\n                    \"type\": \"github\"\r\n                },\r\n                {\r\n                    \"url\": \"https://tidelift.com/funding/github/packagist/composer/composer\",\r\n                    \"type\": \"tidelift\"\r\n                }\r\n            ],\r\n            \"time\": \"2021-09-13T08:19:44+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"hafsoft/php-minifier\",\r\n            \"version\": \"v0.9.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/hafsoft/php-minifier.git\",\r\n                \"reference\": \"2d0477bace82e57902213eca08d45619e8ad3849\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/hafsoft/php-minifier/zipball/2d0477bace82e57902213eca08d45619e8ad3849\",\r\n                \"reference\": \"2d0477bace82e57902213eca08d45619e8ad3849\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.3.3\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-0\": {\r\n                    \"\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Abi Hafshin\"\r\n                }\r\n            ],\r\n            \"description\": \"Pure PHP JS and CSS Minifier. Thanks to phpmin & cssmin\",\r\n            \"homepage\": \"https://github.com/hafsoft/php-minifier\",\r\n            \"keywords\": [\r\n                \"compression\",\r\n                \"minification\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/hafsoft/php-minifier/issues\",\r\n                \"source\": \"https://github.com/hafsoft/php-minifier/tree/v0.9.1\"\r\n            },\r\n            \"time\": \"2014-01-10T11:04:17+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/core-js\",\r\n            \"version\": \"3.26.1\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/core-js/-/core-js-3.26.1.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/custom-event-polyfill\",\r\n            \"version\": \"1.0.7\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/custom-event-polyfill/-/custom-event-polyfill-1.0.7.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/dom-walk\",\r\n            \"version\": \"0.1.2\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/dom-walk/-/dom-walk-0.1.2.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\"\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/global\",\r\n            \"version\": \"4.4.0\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/global/-/global-4.4.0.tgz\"\r\n            },\r\n            \"require\": {\r\n                \"npm-asset/min-document\": \">=2.19.0,<3.0.0\",\r\n                \"npm-asset/process\": \">=0.11.10,<0.12.0\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/inputmask\",\r\n            \"version\": \"5.0.7\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/inputmask/-/inputmask-5.0.7.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/insert-css\",\r\n            \"version\": \"0.0.0\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/insert-css/-/insert-css-0.0.0.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/jquery\",\r\n            \"version\": \"3.6.1\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/jquery/-/jquery-3.6.1.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/jquery-colorbox\",\r\n            \"version\": \"1.6.4\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/jquery-colorbox/-/jquery-colorbox-1.6.4.tgz\"\r\n            },\r\n            \"require\": {\r\n                \"npm-asset/jquery\": \">=1.3.2\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/jquery-sticky\",\r\n            \"version\": \"1.0.4\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/jquery-sticky/-/jquery-sticky-1.0.4.tgz\"\r\n            },\r\n            \"require\": {\r\n                \"npm-asset/jquery\": \"*\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"(MIT OR GPL-3.0)\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/jquery-visible\",\r\n            \"version\": \"1.2.0\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/jquery-visible/-/jquery-visible-1.2.0.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/js-cookie\",\r\n            \"version\": \"3.0.1\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/js-cookie/-/js-cookie-3.0.1.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/loadjs\",\r\n            \"version\": \"4.2.0\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/loadjs/-/loadjs-4.2.0.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/mediaelement\",\r\n            \"version\": \"5.1.0\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/mediaelement/-/mediaelement-5.1.0.tgz\"\r\n            },\r\n            \"require\": {\r\n                \"npm-asset/global\": \">=4.3.1,<5.0.0\",\r\n                \"npm-asset/svg4everybody\": \">=2.1.9,<3.0.0\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/min-document\",\r\n            \"version\": \"2.19.0\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/min-document/-/min-document-2.19.0.tgz\"\r\n            },\r\n            \"require\": {\r\n                \"npm-asset/dom-walk\": \">=0.1.0,<0.2.0\"\r\n            },\r\n            \"type\": \"npm-asset\"\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/normalize-css\",\r\n            \"version\": \"2.3.1\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/normalize-css/-/normalize-css-2.3.1.tgz\"\r\n            },\r\n            \"require\": {\r\n                \"npm-asset/insert-css\": \"0.0.0\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/plyr\",\r\n            \"version\": \"3.7.3\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/plyr/-/plyr-3.7.3.tgz\"\r\n            },\r\n            \"require\": {\r\n                \"npm-asset/core-js\": \">=3.26.1,<4.0.0\",\r\n                \"npm-asset/custom-event-polyfill\": \">=1.0.7,<2.0.0\",\r\n                \"npm-asset/loadjs\": \">=4.2.0,<5.0.0\",\r\n                \"npm-asset/rangetouch\": \">=2.0.1,<3.0.0\",\r\n                \"npm-asset/url-polyfill\": \">=1.1.12,<2.0.0\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/process\",\r\n            \"version\": \"0.11.10\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/process/-/process-0.11.10.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/rangetouch\",\r\n            \"version\": \"2.0.1\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/rangetouch/-/rangetouch-2.0.1.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/slick-carousel\",\r\n            \"version\": \"1.8.1\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/slick-carousel/-/slick-carousel-1.8.1.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/svg4everybody\",\r\n            \"version\": \"2.1.9\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/svg4everybody/-/svg4everybody-2.1.9.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"CC0-1.0\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/url-polyfill\",\r\n            \"version\": \"1.1.12\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/url-polyfill/-/url-polyfill-1.1.12.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"npm-asset/vanilla-lazyload\",\r\n            \"version\": \"17.8.2\",\r\n            \"dist\": {\r\n                \"type\": \"tar\",\r\n                \"url\": \"https://registry.npmjs.org/vanilla-lazyload/-/vanilla-lazyload-17.8.2.tgz\"\r\n            },\r\n            \"type\": \"npm-asset\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"oomphinc/composer-installers-extender\",\r\n            \"version\": \"2.0.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/oomphinc/composer-installers-extender.git\",\r\n                \"reference\": \"cbf4b6f9a24153b785d09eee755b995ba87bd5f9\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/oomphinc/composer-installers-extender/zipball/cbf4b6f9a24153b785d09eee755b995ba87bd5f9\",\r\n                \"reference\": \"cbf4b6f9a24153b785d09eee755b995ba87bd5f9\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"composer-plugin-api\": \"^1.1 || ^2.0\",\r\n                \"composer/installers\": \"^1.0 || ^2.0\",\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"require-dev\": {\r\n                \"composer/composer\": \"^2.0\",\r\n                \"phpunit/phpunit\": \"^7.2\",\r\n                \"squizlabs/php_codesniffer\": \"^3.3\"\r\n            },\r\n            \"type\": \"composer-plugin\",\r\n            \"extra\": {\r\n                \"class\": \"OomphInc\\\\ComposerInstallersExtender\\\\Plugin\"\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"OomphInc\\\\ComposerInstallersExtender\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Stephen Beemsterboer\",\r\n                    \"email\": \"stephen@oomphinc.com\",\r\n                    \"homepage\": \"https://github.com/balbuf\"\r\n                },\r\n                {\r\n                    \"name\": \"Nathan Dentzau\",\r\n                    \"email\": \"nate@oomphinc.com\",\r\n                    \"homepage\": \"http://oomph.is/ndentzau\"\r\n                }\r\n            ],\r\n            \"description\": \"Extend the composer/installers plugin to accept any arbitrary package type.\",\r\n            \"homepage\": \"http://www.oomphinc.com/\",\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/oomphinc/composer-installers-extender/issues\",\r\n                \"source\": \"https://github.com/oomphinc/composer-installers-extender/tree/2.0.1\"\r\n            },\r\n            \"time\": \"2021-12-15T12:32:42+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"psr/cache\",\r\n            \"version\": \"1.0.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/php-fig/cache.git\",\r\n                \"reference\": \"d11b50ad223250cf17b86e38383413f5a6764bf8\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/php-fig/cache/zipball/d11b50ad223250cf17b86e38383413f5a6764bf8\",\r\n                \"reference\": \"d11b50ad223250cf17b86e38383413f5a6764bf8\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.3.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Psr\\\\Cache\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"PHP-FIG\",\r\n                    \"homepage\": \"http://www.php-fig.org/\"\r\n                }\r\n            ],\r\n            \"description\": \"Common interface for caching libraries\",\r\n            \"keywords\": [\r\n                \"cache\",\r\n                \"psr\",\r\n                \"psr-6\"\r\n            ],\r\n            \"support\": {\r\n                \"source\": \"https://github.com/php-fig/cache/tree/master\"\r\n            },\r\n            \"time\": \"2016-08-06T20:24:11+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"psr/container\",\r\n            \"version\": \"1.1.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/php-fig/container.git\",\r\n                \"reference\": \"513e0666f7216c7459170d56df27dfcefe1689ea\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/php-fig/container/zipball/513e0666f7216c7459170d56df27dfcefe1689ea\",\r\n                \"reference\": \"513e0666f7216c7459170d56df27dfcefe1689ea\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.4.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Psr\\\\Container\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"PHP-FIG\",\r\n                    \"homepage\": \"https://www.php-fig.org/\"\r\n                }\r\n            ],\r\n            \"description\": \"Common Container Interface (PHP FIG PSR-11)\",\r\n            \"homepage\": \"https://github.com/php-fig/container\",\r\n            \"keywords\": [\r\n                \"PSR-11\",\r\n                \"container\",\r\n                \"container-interface\",\r\n                \"container-interop\",\r\n                \"psr\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/php-fig/container/issues\",\r\n                \"source\": \"https://github.com/php-fig/container/tree/1.1.2\"\r\n            },\r\n            \"time\": \"2021-11-05T16:50:12+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"psr/event-dispatcher\",\r\n            \"version\": \"1.0.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/php-fig/event-dispatcher.git\",\r\n                \"reference\": \"dbefd12671e8a14ec7f180cab83036ed26714bb0\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/php-fig/event-dispatcher/zipball/dbefd12671e8a14ec7f180cab83036ed26714bb0\",\r\n                \"reference\": \"dbefd12671e8a14ec7f180cab83036ed26714bb0\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Psr\\\\EventDispatcher\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"PHP-FIG\",\r\n                    \"homepage\": \"http://www.php-fig.org/\"\r\n                }\r\n            ],\r\n            \"description\": \"Standard interfaces for event handling.\",\r\n            \"keywords\": [\r\n                \"events\",\r\n                \"psr\",\r\n                \"psr-14\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/php-fig/event-dispatcher/issues\",\r\n                \"source\": \"https://github.com/php-fig/event-dispatcher/tree/1.0.0\"\r\n            },\r\n            \"time\": \"2019-01-08T18:20:26+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"psr/log\",\r\n            \"version\": \"1.1.4\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/php-fig/log.git\",\r\n                \"reference\": \"d49695b909c3b7628b6289db5479a1c204601f11\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/php-fig/log/zipball/d49695b909c3b7628b6289db5479a1c204601f11\",\r\n                \"reference\": \"d49695b909c3b7628b6289db5479a1c204601f11\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.3.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.1.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Psr\\\\Log\\\\\": \"Psr/Log/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"PHP-FIG\",\r\n                    \"homepage\": \"https://www.php-fig.org/\"\r\n                }\r\n            ],\r\n            \"description\": \"Common interface for logging libraries\",\r\n            \"homepage\": \"https://github.com/php-fig/log\",\r\n            \"keywords\": [\r\n                \"log\",\r\n                \"psr\",\r\n                \"psr-3\"\r\n            ],\r\n            \"support\": {\r\n                \"source\": \"https://github.com/php-fig/log/tree/1.1.4\"\r\n            },\r\n            \"time\": \"2021-05-03T11:20:27+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"psr/simple-cache\",\r\n            \"version\": \"1.0.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/php-fig/simple-cache.git\",\r\n                \"reference\": \"408d5eafb83c57f6365a3ca330ff23aa4a5fa39b\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/php-fig/simple-cache/zipball/408d5eafb83c57f6365a3ca330ff23aa4a5fa39b\",\r\n                \"reference\": \"408d5eafb83c57f6365a3ca330ff23aa4a5fa39b\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.3.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Psr\\\\SimpleCache\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"PHP-FIG\",\r\n                    \"homepage\": \"http://www.php-fig.org/\"\r\n                }\r\n            ],\r\n            \"description\": \"Common interfaces for simple caching\",\r\n            \"keywords\": [\r\n                \"cache\",\r\n                \"caching\",\r\n                \"psr\",\r\n                \"psr-16\",\r\n                \"simple-cache\"\r\n            ],\r\n            \"support\": {\r\n                \"source\": \"https://github.com/php-fig/simple-cache/tree/master\"\r\n            },\r\n            \"time\": \"2017-10-23T01:57:42+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"rosell-dk/exec-with-fallback\",\r\n            \"version\": \"1.2.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/rosell-dk/exec-with-fallback.git\",\r\n                \"reference\": \"f88a6b29abd0b580566056b7c1eb0434eb5db20d\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/rosell-dk/exec-with-fallback/zipball/f88a6b29abd0b580566056b7c1eb0434eb5db20d\",\r\n                \"reference\": \"f88a6b29abd0b580566056b7c1eb0434eb5db20d\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^5.6 | ^7.0 | ^8.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"friendsofphp/php-cs-fixer\": \"^2.11\",\r\n                \"phpunit/phpunit\": \"^9.3\",\r\n                \"squizlabs/php_codesniffer\": \"3.*\"\r\n            },\r\n            \"suggest\": {\r\n                \"php-stan/php-stan\": \"Suggested for dev, in order to analyse code before committing\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"scripts-descriptions\": {\r\n                    \"ci\": \"Run tests before CI\",\r\n                    \"phpcs\": \"Checks coding styles (PSR2) of file/dir, which you must supply. To check all, supply 'src'\",\r\n                    \"phpcbf\": \"Fix coding styles (PSR2) of file/dir, which you must supply. To fix all, supply 'src'\",\r\n                    \"cs-fix-all\": \"Fix the coding style of all the source files, to comply with the PSR-2 coding standard\",\r\n                    \"cs-fix\": \"Fix the coding style of a PHP file or directory, which you must specify.\",\r\n                    \"test\": \"Launches the preconfigured PHPUnit\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"ExecWithFallback\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Bjørn Rosell\",\r\n                    \"homepage\": \"https://www.bitwise-it.dk/contact\",\r\n                    \"role\": \"Project Author\"\r\n                }\r\n            ],\r\n            \"description\": \"An exec() with fallback to emulations (proc_open, etc)\",\r\n            \"keywords\": [\r\n                \"command\",\r\n                \"exec\",\r\n                \"fallback\",\r\n                \"open_proc\",\r\n                \"resiliant\",\r\n                \"sturdy\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/rosell-dk/exec-with-fallback/issues\",\r\n                \"source\": \"https://github.com/rosell-dk/exec-with-fallback/tree/1.2.0\"\r\n            },\r\n            \"funding\": [\r\n                {\r\n                    \"url\": \"https://github.com/rosell-dk\",\r\n                    \"type\": \"github\"\r\n                },\r\n                {\r\n                    \"url\": \"https://ko-fi.com/rosell\",\r\n                    \"type\": \"ko_fi\"\r\n                }\r\n            ],\r\n            \"time\": \"2021-12-08T12:09:43+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"rosell-dk/file-util\",\r\n            \"version\": \"0.1.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/rosell-dk/file-util.git\",\r\n                \"reference\": \"2ff895308c37f448b34b031cfbfd8e45f43936fd\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/rosell-dk/file-util/zipball/2ff895308c37f448b34b031cfbfd8e45f43936fd\",\r\n                \"reference\": \"2ff895308c37f448b34b031cfbfd8e45f43936fd\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.4\",\r\n                \"rosell-dk/exec-with-fallback\": \"^1.0.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"friendsofphp/php-cs-fixer\": \"^2.11\",\r\n                \"mikey179/vfsstream\": \"^1.6\",\r\n                \"phpstan/phpstan\": \"^1.5\",\r\n                \"phpunit/phpunit\": \"^9.3\",\r\n                \"squizlabs/php_codesniffer\": \"3.*\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"scripts-descriptions\": {\r\n                    \"ci\": \"Run tests before CI\",\r\n                    \"phpcs\": \"Checks coding styles (PSR2) of file/dir, which you must supply. To check all, supply 'src'\",\r\n                    \"phpcbf\": \"Fix coding styles (PSR2) of file/dir, which you must supply. To fix all, supply 'src'\",\r\n                    \"cs-fix-all\": \"Fix the coding style of all the source files, to comply with the PSR-2 coding standard\",\r\n                    \"cs-fix\": \"Fix the coding style of a PHP file or directory, which you must specify.\",\r\n                    \"test\": \"Launches the preconfigured PHPUnit\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"FileUtil\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Bjørn Rosell\",\r\n                    \"homepage\": \"https://www.bitwise-it.dk/contact\",\r\n                    \"role\": \"Project Author\"\r\n                }\r\n            ],\r\n            \"description\": \"Functions for dealing with files and paths\",\r\n            \"keywords\": [\r\n                \"files\",\r\n                \"path\",\r\n                \"util\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/rosell-dk/file-util/issues\",\r\n                \"source\": \"https://github.com/rosell-dk/file-util/tree/0.1.1\"\r\n            },\r\n            \"funding\": [\r\n                {\r\n                    \"url\": \"https://github.com/rosell-dk\",\r\n                    \"type\": \"github\"\r\n                },\r\n                {\r\n                    \"url\": \"https://ko-fi.com/rosell\",\r\n                    \"type\": \"ko_fi\"\r\n                }\r\n            ],\r\n            \"time\": \"2022-04-19T10:12:31+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"rosell-dk/image-mime-type-guesser\",\r\n            \"version\": \"1.1.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/rosell-dk/image-mime-type-guesser.git\",\r\n                \"reference\": \"72f7040e95a78937ae2edece452530224fcacea6\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/rosell-dk/image-mime-type-guesser/zipball/72f7040e95a78937ae2edece452530224fcacea6\",\r\n                \"reference\": \"72f7040e95a78937ae2edece452530224fcacea6\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^5.6 | ^7.0 | ^8.0\",\r\n                \"rosell-dk/image-mime-type-sniffer\": \"^1.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"friendsofphp/php-cs-fixer\": \"^2.11\",\r\n                \"phpstan/phpstan\": \"^1.5\",\r\n                \"phpunit/phpunit\": \"^9.3\",\r\n                \"squizlabs/php_codesniffer\": \"3.*\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"scripts-descriptions\": {\r\n                    \"ci\": \"Run tests before CI\",\r\n                    \"phpcs\": \"Checks coding styles (PSR2) of file/dir, which you must supply. To check all, supply 'src'\",\r\n                    \"phpcbf\": \"Fix coding styles (PSR2) of file/dir, which you must supply. To fix all, supply 'src'\",\r\n                    \"cs-fix-all\": \"Fix the coding style of all the source files, to comply with the PSR-2 coding standard\",\r\n                    \"cs-fix\": \"Fix the coding style of a PHP file or directory, which you must specify.\",\r\n                    \"test\": \"Launches the preconfigured PHPUnit\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"ImageMimeTypeGuesser\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Bjørn Rosell\",\r\n                    \"homepage\": \"https://www.bitwise-it.dk/contact\",\r\n                    \"role\": \"Project Author\"\r\n                }\r\n            ],\r\n            \"description\": \"Guess mime type of images\",\r\n            \"keywords\": [\r\n                \"image\",\r\n                \"images\",\r\n                \"mime\",\r\n                \"mime type\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/rosell-dk/image-mime-type-guesser/issues\",\r\n                \"source\": \"https://github.com/rosell-dk/image-mime-type-guesser/tree/1.1.1\"\r\n            },\r\n            \"funding\": [\r\n                {\r\n                    \"url\": \"https://github.com/rosell-dk\",\r\n                    \"type\": \"github\"\r\n                },\r\n                {\r\n                    \"url\": \"https://ko-fi.com/rosell\",\r\n                    \"type\": \"ko_fi\"\r\n                }\r\n            ],\r\n            \"time\": \"2022-05-19T09:57:15+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"rosell-dk/image-mime-type-sniffer\",\r\n            \"version\": \"1.1.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/rosell-dk/image-mime-type-sniffer.git\",\r\n                \"reference\": \"9ed14cc5d2c14c417660a4dd1946b5f056494691\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/rosell-dk/image-mime-type-sniffer/zipball/9ed14cc5d2c14c417660a4dd1946b5f056494691\",\r\n                \"reference\": \"9ed14cc5d2c14c417660a4dd1946b5f056494691\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.4\"\r\n            },\r\n            \"require-dev\": {\r\n                \"friendsofphp/php-cs-fixer\": \"^2.11\",\r\n                \"mikey179/vfsstream\": \"^1.6\",\r\n                \"phpstan/phpstan\": \"^1.5\",\r\n                \"phpunit/phpunit\": \"^9.3\",\r\n                \"squizlabs/php_codesniffer\": \"3.*\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"scripts-descriptions\": {\r\n                    \"ci\": \"Run tests before CI\",\r\n                    \"phpcs\": \"Checks coding styles (PSR2) of file/dir, which you must supply. To check all, supply 'src'\",\r\n                    \"phpcbf\": \"Fix coding styles (PSR2) of file/dir, which you must supply. To fix all, supply 'src'\",\r\n                    \"cs-fix-all\": \"Fix the coding style of all the source files, to comply with the PSR-2 coding standard\",\r\n                    \"cs-fix\": \"Fix the coding style of a PHP file or directory, which you must specify.\",\r\n                    \"test\": \"Launches the preconfigured PHPUnit\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"ImageMimeTypeSniffer\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Bjørn Rosell\",\r\n                    \"homepage\": \"https://www.bitwise-it.dk/contact\",\r\n                    \"role\": \"Project Author\"\r\n                }\r\n            ],\r\n            \"description\": \"Sniff mime type (images only)\",\r\n            \"keywords\": [\r\n                \"image\",\r\n                \"images\",\r\n                \"mime\",\r\n                \"mime type\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/rosell-dk/image-mime-type-sniffer/issues\",\r\n                \"source\": \"https://github.com/rosell-dk/image-mime-type-sniffer/tree/1.1.1\"\r\n            },\r\n            \"funding\": [\r\n                {\r\n                    \"url\": \"https://github.com/rosell-dk\",\r\n                    \"type\": \"github\"\r\n                },\r\n                {\r\n                    \"url\": \"https://ko-fi.com/rosell\",\r\n                    \"type\": \"ko_fi\"\r\n                }\r\n            ],\r\n            \"time\": \"2022-04-20T14:31:25+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"rosell-dk/locate-binaries\",\r\n            \"version\": \"1.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/rosell-dk/locate-binaries.git\",\r\n                \"reference\": \"bd2f493383ecd55aa519828dd2898e30f3b9cbb0\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/rosell-dk/locate-binaries/zipball/bd2f493383ecd55aa519828dd2898e30f3b9cbb0\",\r\n                \"reference\": \"bd2f493383ecd55aa519828dd2898e30f3b9cbb0\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.6\",\r\n                \"rosell-dk/exec-with-fallback\": \"^1.0.0\",\r\n                \"rosell-dk/file-util\": \"^0.1.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"friendsofphp/php-cs-fixer\": \"^2.11\",\r\n                \"phpstan/phpstan\": \"^1.5\",\r\n                \"phpunit/phpunit\": \"^9.3\",\r\n                \"squizlabs/php_codesniffer\": \"3.*\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"scripts-descriptions\": {\r\n                    \"ci\": \"Run tests before CI\",\r\n                    \"phpcs\": \"Checks coding styles (PSR2) of file/dir, which you must supply. To check all, supply 'src'\",\r\n                    \"phpcbf\": \"Fix coding styles (PSR2) of file/dir, which you must supply. To fix all, supply 'src'\",\r\n                    \"cs-fix-all\": \"Fix the coding style of all the source files, to comply with the PSR-2 coding standard\",\r\n                    \"cs-fix\": \"Fix the coding style of a PHP file or directory, which you must specify.\",\r\n                    \"test\": \"Launches the preconfigured PHPUnit\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"LocateBinaries\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Bjørn Rosell\",\r\n                    \"homepage\": \"https://www.bitwise-it.dk/contact\",\r\n                    \"role\": \"Project Author\"\r\n                }\r\n            ],\r\n            \"description\": \"Locate a binaries by means of exec() or similar\",\r\n            \"keywords\": [\r\n                \"binary\",\r\n                \"discover\",\r\n                \"locate\",\r\n                \"whereis\",\r\n                \"which\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/rosell-dk/locate-binaries/issues\",\r\n                \"source\": \"https://github.com/rosell-dk/locate-binaries/tree/1.0\"\r\n            },\r\n            \"funding\": [\r\n                {\r\n                    \"url\": \"https://github.com/rosell-dk\",\r\n                    \"type\": \"github\"\r\n                },\r\n                {\r\n                    \"url\": \"https://ko-fi.com/rosell\",\r\n                    \"type\": \"ko_fi\"\r\n                }\r\n            ],\r\n            \"time\": \"2022-04-20T07:20:07+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"rosell-dk/webp-convert\",\r\n            \"version\": \"2.9.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/rosell-dk/webp-convert.git\",\r\n                \"reference\": \"5ccba85ebe3b28ae229459fd0baed25314616ac9\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/rosell-dk/webp-convert/zipball/5ccba85ebe3b28ae229459fd0baed25314616ac9\",\r\n                \"reference\": \"5ccba85ebe3b28ae229459fd0baed25314616ac9\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^5.6 | ^7.0 | ^8.0\",\r\n                \"rosell-dk/exec-with-fallback\": \"^1.0.0\",\r\n                \"rosell-dk/image-mime-type-guesser\": \"^1.1.1\",\r\n                \"rosell-dk/locate-binaries\": \"^1.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"friendsofphp/php-cs-fixer\": \"^2.11\",\r\n                \"phpstan/phpstan\": \"^1.5\",\r\n                \"phpunit/phpunit\": \"^9.3\",\r\n                \"squizlabs/php_codesniffer\": \"3.*\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-gd\": \"to use GD extension for converting. Note: Gd must be compiled with webp support\",\r\n                \"ext-imagick\": \"to use Imagick extension for converting. Note: Gd must be compiled with webp support\",\r\n                \"ext-vips\": \"to use Vips extension for converting.\",\r\n                \"php-stan/php-stan\": \"Suggested for dev, in order to analyse code before committing\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"scripts-descriptions\": {\r\n                    \"ci\": \"Run tests before CI\",\r\n                    \"phpcs\": \"Checks coding styles (PSR2) of file/dir, which you must supply. To check all, supply 'src'\",\r\n                    \"phpcbf\": \"Fix coding styles (PSR2) of file/dir, which you must supply. To fix all, supply 'src'\",\r\n                    \"cs-fix-all\": \"Fix the coding style of all the source files, to comply with the PSR-2 coding standard\",\r\n                    \"cs-fix\": \"Fix the coding style of a PHP file or directory, which you must specify.\",\r\n                    \"test\": \"Launches the preconfigured PHPUnit\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"WebPConvert\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Bjørn Rosell\",\r\n                    \"homepage\": \"https://www.bitwise-it.dk/contact\",\r\n                    \"role\": \"Project Author\"\r\n                },\r\n                {\r\n                    \"name\": \"Martin Folkers\",\r\n                    \"homepage\": \"https://twobrain.io\",\r\n                    \"role\": \"Collaborator\"\r\n                }\r\n            ],\r\n            \"description\": \"Convert JPEG & PNG to WebP with PHP\",\r\n            \"keywords\": [\r\n                \"Webp\",\r\n                \"cwebp\",\r\n                \"gd\",\r\n                \"image conversion\",\r\n                \"images\",\r\n                \"imagick\",\r\n                \"jpg\",\r\n                \"jpg2webp\",\r\n                \"png\",\r\n                \"png2webp\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/rosell-dk/webp-convert/issues\",\r\n                \"source\": \"https://github.com/rosell-dk/webp-convert/tree/2.9.2\"\r\n            },\r\n            \"funding\": [\r\n                {\r\n                    \"url\": \"https://github.com/rosell-dk\",\r\n                    \"type\": \"github\"\r\n                },\r\n                {\r\n                    \"url\": \"https://ko-fi.com/rosell\",\r\n                    \"type\": \"ko_fi\"\r\n                }\r\n            ],\r\n            \"time\": \"2022-05-19T13:56:36+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/contracts\",\r\n            \"version\": \"v2.5.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/contracts.git\",\r\n                \"reference\": \"d3da2932c17d3cc0d6cd167518cc63ab7b909f38\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/contracts/zipball/d3da2932c17d3cc0d6cd167518cc63ab7b909f38\",\r\n                \"reference\": \"d3da2932c17d3cc0d6cd167518cc63ab7b909f38\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"psr/cache\": \"^1.0|^2.0|^3.0\",\r\n                \"psr/container\": \"^1.1\",\r\n                \"psr/event-dispatcher\": \"^1.0\"\r\n            },\r\n            \"conflict\": {\r\n                \"ext-psr\": \"<1.1|>=2\"\r\n            },\r\n            \"replace\": {\r\n                \"symfony/cache-contracts\": \"self.version\",\r\n                \"symfony/deprecation-contracts\": \"self.version\",\r\n                \"symfony/event-dispatcher-contracts\": \"self.version\",\r\n                \"symfony/http-client-contracts\": \"self.version\",\r\n                \"symfony/service-contracts\": \"self.version\",\r\n                \"symfony/translation-contracts\": \"self.version\"\r\n            },\r\n            \"require-dev\": {\r\n                \"symfony/polyfill-intl-idn\": \"^1.10\"\r\n            },\r\n            \"suggest\": {\r\n                \"symfony/cache-implementation\": \"\",\r\n                \"symfony/event-dispatcher-implementation\": \"\",\r\n                \"symfony/http-client-implementation\": \"\",\r\n                \"symfony/service-implementation\": \"\",\r\n                \"symfony/translation-implementation\": \"\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"2.5-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"files\": [\r\n                    \"Deprecation/function.php\"\r\n                ],\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Contracts\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"**/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"A set of abstractions extracted out of the Symfony components\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"abstractions\",\r\n                \"contracts\",\r\n                \"decoupling\",\r\n                \"interfaces\",\r\n                \"interoperability\",\r\n                \"standards\"\r\n            ],\r\n            \"support\": {\r\n                \"source\": \"https://github.com/symfony/contracts/tree/v2.5.2\"\r\n            },\r\n            \"funding\": [\r\n                {\r\n                    \"url\": \"https://symfony.com/sponsor\",\r\n                    \"type\": \"custom\"\r\n                },\r\n                {\r\n                    \"url\": \"https://github.com/fabpot\",\r\n                    \"type\": \"github\"\r\n                },\r\n                {\r\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\r\n                    \"type\": \"tidelift\"\r\n                }\r\n            ],\r\n            \"time\": \"2022-06-27T16:58:25+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/polyfill-php80\",\r\n            \"version\": \"v1.27.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/polyfill-php80.git\",\r\n                \"reference\": \"7a6ff3f1959bb01aefccb463a0f2cd3d3d2fd936\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-php80/zipball/7a6ff3f1959bb01aefccb463a0f2cd3d3d2fd936\",\r\n                \"reference\": \"7a6ff3f1959bb01aefccb463a0f2cd3d3d2fd936\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"1.27-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/polyfill\",\r\n                    \"url\": \"https://github.com/symfony/polyfill\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"files\": [\r\n                    \"bootstrap.php\"\r\n                ],\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Polyfill\\\\Php80\\\\\": \"\"\r\n                },\r\n                \"classmap\": [\r\n                    \"Resources/stubs\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Ion Bazan\",\r\n                    \"email\": \"ion.bazan@gmail.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"compatibility\",\r\n                \"polyfill\",\r\n                \"portable\",\r\n                \"shim\"\r\n            ],\r\n            \"support\": {\r\n                \"source\": \"https://github.com/symfony/polyfill-php80/tree/v1.27.0\"\r\n            },\r\n            \"funding\": [\r\n                {\r\n                    \"url\": \"https://symfony.com/sponsor\",\r\n                    \"type\": \"custom\"\r\n                },\r\n                {\r\n                    \"url\": \"https://github.com/fabpot\",\r\n                    \"type\": \"github\"\r\n                },\r\n                {\r\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\r\n                    \"type\": \"tidelift\"\r\n                }\r\n            ],\r\n            \"time\": \"2022-11-03T14:55:06+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"webarchitect609/bitrix-cache\",\r\n            \"version\": \"v1.11.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/webarchitect609/bitrix-cache.git\",\r\n                \"reference\": \"cf2be2db41b20fcd67b52bf9a1f2982fec99eb63\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/webarchitect609/bitrix-cache/zipball/cf2be2db41b20fcd67b52bf9a1f2982fec99eb63\",\r\n                \"reference\": \"cf2be2db41b20fcd67b52bf9a1f2982fec99eb63\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.2 || ^8.0\",\r\n                \"psr/cache\": \"^1.0\",\r\n                \"psr/log\": \"^1.1\",\r\n                \"psr/simple-cache\": \"^1.0\",\r\n                \"symfony/contracts\": \"^1.1.8 || ^2.0 || ^3.0\",\r\n                \"symfony/polyfill-php80\": \"^1.18\"\r\n            },\r\n            \"require-dev\": {\r\n                \"friendsofphp/php-cs-fixer\": \"^3.0\",\r\n                \"phpstan/phpstan\": \"^0.12\",\r\n                \"phpunit/phpunit\": \"^8.5\",\r\n                \"roave/security-advisories\": \"dev-master\",\r\n                \"webarchitect609/bitrix-taxidermist\": \"^0.1\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"WebArch\\\\BitrixCache\\\\\": \"src/main\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sergey Gripinskiy\",\r\n                    \"email\": \"web-architect@mail.ru\",\r\n                    \"role\": \"Author\"\r\n                },\r\n                {\r\n                    \"name\": \"Oleg Maksimenko\",\r\n                    \"email\": \"oleg.39style@gmail.com\",\r\n                    \"role\": \"Contributor\"\r\n                },\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\",\r\n                    \"role\": \"Indirect Contributor\"\r\n                }\r\n            ],\r\n            \"description\": \"Comfortable fluent interface for Bitrix cache. Anti-stampede cache protection.\",\r\n            \"homepage\": \"https://github.com/webarchitect609/bitrix-cache\",\r\n            \"keywords\": [\r\n                \"bitrix\",\r\n                \"cache\",\r\n                \"caching\",\r\n                \"psr-16\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/webarchitect609/bitrix-cache/issues\",\r\n                \"source\": \"https://github.com/webarchitect609/bitrix-cache/tree/v1.11.1\"\r\n            },\r\n            \"funding\": [\r\n                {\r\n                    \"url\": \"https://sobe.ru/na/bitrix_cache\",\r\n                    \"type\": \"ЮMoney\"\r\n                }\r\n            ],\r\n            \"time\": \"2021-12-22T13:11:42+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"webarchitect609/bitrix-orm-tools\",\r\n            \"version\": \"2.3.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/webarchitect609/bitrix-orm-tools.git\",\r\n                \"reference\": \"d2a2bd1e7c0285785f08852aaec05e614abd7108\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/webarchitect609/bitrix-orm-tools/zipball/d2a2bd1e7c0285785f08852aaec05e614abd7108\",\r\n                \"reference\": \"d2a2bd1e7c0285785f08852aaec05e614abd7108\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.2\",\r\n                \"webarchitect609/bitrix-cache\": \"^1.6 || ^2.0\",\r\n                \"webarchitect609/bitrix-user-type\": \"^0.7\"\r\n            },\r\n            \"require-dev\": {\r\n                \"friendsofphp/php-cs-fixer\": \"^2.16\",\r\n                \"phpstan/phpstan\": \"^0.12.25\",\r\n                \"phpunit/phpunit\": \"^8.5\",\r\n                \"roave/security-advisories\": \"dev-master\",\r\n                \"webarchitect609/bitrix-taxidermist\": \"^0.1\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"WebArch\\\\BitrixOrmTools\\\\\": \"src/main\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sergey Gripinskiy\",\r\n                    \"email\": \"web-architect@mail.ru\",\r\n                    \"role\": \"Creator\"\r\n                }\r\n            ],\r\n            \"description\": \"Bitrix orm table class tools.\",\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/webarchitect609/bitrix-orm-tools/issues\",\r\n                \"source\": \"https://github.com/webarchitect609/bitrix-orm-tools/tree/2.3.0\"\r\n            },\r\n            \"time\": \"2022-03-05T13:15:20+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"webarchitect609/bitrix-user-type\",\r\n            \"version\": \"v0.7.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/webarchitect609/bitrix-user-type.git\",\r\n                \"reference\": \"c7f4e7264e5a9999ec472abe0ffd52aafee2d73c\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/webarchitect609/bitrix-user-type/zipball/c7f4e7264e5a9999ec472abe0ffd52aafee2d73c\",\r\n                \"reference\": \"c7f4e7264e5a9999ec472abe0ffd52aafee2d73c\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"anahkiasen/html-object\": \"^1.4\",\r\n                \"ext-mbstring\": \"*\",\r\n                \"php\": \"^7.2\",\r\n                \"webarchitect609/bitrix-cache\": \"^1.6 || ^2.0\",\r\n                \"webarchitect609/bitrix-orm-tools\": \"^2.1\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"WebArch\\\\BitrixUserPropertyType\\\\\": \"src/main\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sergey Gripinskiy\",\r\n                    \"email\": \"web-architect@mail.ru\"\r\n                },\r\n                {\r\n                    \"name\": \"Dmitry Panychev\",\r\n                    \"email\": \"thor_work@yahoo.com\"\r\n                }\r\n            ],\r\n            \"description\": \"Set of custom Bitrix user property types and basic auxiliary functionality to help develop new types as easy and fast as it possible.\",\r\n            \"keywords\": [\r\n                \"bitrix\",\r\n                \"userfield\",\r\n                \"usertype\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/webarchitect609/bitrix-user-type/issues\",\r\n                \"source\": \"https://github.com/webarchitect609/bitrix-user-type/tree/v0.7.3\"\r\n            },\r\n            \"time\": \"2021-01-19T14:26:02+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"wikimedia/composer-merge-plugin\",\r\n            \"version\": \"v2.0.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/wikimedia/composer-merge-plugin.git\",\r\n                \"reference\": \"8ca2ed8ab97c8ebce6b39d9943e9909bb4f18912\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/wikimedia/composer-merge-plugin/zipball/8ca2ed8ab97c8ebce6b39d9943e9909bb4f18912\",\r\n                \"reference\": \"8ca2ed8ab97c8ebce6b39d9943e9909bb4f18912\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"composer-plugin-api\": \"^1.1||^2.0\",\r\n                \"php\": \">=7.2.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"composer/composer\": \"^1.1||^2.0\",\r\n                \"php-parallel-lint/php-parallel-lint\": \"~1.1.0\",\r\n                \"phpunit/phpunit\": \"^8.5||^9.0\",\r\n                \"squizlabs/php_codesniffer\": \"~3.5.4\"\r\n            },\r\n            \"type\": \"composer-plugin\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.x-dev\"\r\n                },\r\n                \"class\": \"Wikimedia\\\\Composer\\\\Merge\\\\V2\\\\MergePlugin\"\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Wikimedia\\\\Composer\\\\Merge\\\\V2\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Bryan Davis\",\r\n                    \"email\": \"bd808@wikimedia.org\"\r\n                }\r\n            ],\r\n            \"description\": \"Composer plugin to merge multiple composer.json files\",\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/wikimedia/composer-merge-plugin/issues\",\r\n                \"source\": \"https://github.com/wikimedia/composer-merge-plugin/tree/v2.0.1\"\r\n            },\r\n            \"time\": \"2021-02-24T05:28:06+00:00\"\r\n        }\r\n    ],\r\n    \"packages-dev\": [\r\n        {\r\n            \"name\": \"kint-php/kint\",\r\n            \"version\": \"4.2.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/kint-php/kint.git\",\r\n                \"reference\": \"7601bfd95ccc50a1b903c2764b31d00919e8edd9\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/kint-php/kint/zipball/7601bfd95ccc50a1b903c2764b31d00919e8edd9\",\r\n                \"reference\": \"7601bfd95ccc50a1b903c2764b31d00919e8edd9\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.6\"\r\n            },\r\n            \"require-dev\": {\r\n                \"friendsofphp/php-cs-fixer\": \"^3.0\",\r\n                \"phpspec/prophecy-phpunit\": \"^2\",\r\n                \"phpunit/phpunit\": \"^9.0\",\r\n                \"seld/phar-utils\": \"^1.0\",\r\n                \"symfony/finder\": \"^3.0 || ^4.0 || ^5.0\",\r\n                \"vimeo/psalm\": \"^4.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"kint-php/kint-helpers\": \"Provides extra helper functions\",\r\n                \"kint-php/kint-twig\": \"Provides d() and s() functions in twig templates\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"files\": [\r\n                    \"init.php\"\r\n                ],\r\n                \"psr-4\": {\r\n                    \"Kint\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Jonathan Vollebregt\",\r\n                    \"homepage\": \"https://github.com/jnvsor\"\r\n                },\r\n                {\r\n                    \"name\": \"Contributors\",\r\n                    \"homepage\": \"https://github.com/kint-php/kint/graphs/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Kint - debugging tool for PHP developers\",\r\n            \"homepage\": \"https://kint-php.github.io/kint/\",\r\n            \"keywords\": [\r\n                \"debug\",\r\n                \"kint\",\r\n                \"php\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/kint-php/kint/issues\",\r\n                \"source\": \"https://github.com/kint-php/kint/tree/4.2.3\"\r\n            },\r\n            \"time\": \"2022-10-01T20:16:33+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"kint-php/kint-helpers\",\r\n            \"version\": \"4.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/kint-php/kint-helpers.git\",\r\n                \"reference\": \"45d8caede654e173b35dd767ad3caff1721c3c22\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/kint-php/kint-helpers/zipball/45d8caede654e173b35dd767ad3caff1721c3c22\",\r\n                \"reference\": \"45d8caede654e173b35dd767ad3caff1721c3c22\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"kint-php/kint\": \"^4\"\r\n            },\r\n            \"require-dev\": {\r\n                \"friendsofphp/php-cs-fixer\": \"^3.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"files\": [\r\n                    \"init.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Jonathan Vollebregt\",\r\n                    \"homepage\": \"https://github.com/jnvsor\"\r\n                }\r\n            ],\r\n            \"description\": \"Kint helper functions\",\r\n            \"homepage\": \"https://kint-php.github.io/kint/\",\r\n            \"keywords\": [\r\n                \"debug\",\r\n                \"kint\",\r\n                \"php\"\r\n            ],\r\n            \"support\": {\r\n                \"issues\": \"https://github.com/kint-php/kint-helpers/issues\",\r\n                \"source\": \"https://github.com/kint-php/kint-helpers/tree/4.0\"\r\n            },\r\n            \"time\": \"2022-01-08T20:25:41+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/console\",\r\n            \"version\": \"v4.1.12\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/console.git\",\r\n                \"reference\": \"9e87c798f67dc9fceeb4f3d57847b52d945d1a02\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/console/zipball/9e87c798f67dc9fceeb4f3d57847b52d945d1a02\",\r\n                \"reference\": \"9e87c798f67dc9fceeb4f3d57847b52d945d1a02\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.1.3\",\r\n                \"symfony/polyfill-mbstring\": \"~1.0\"\r\n            },\r\n            \"conflict\": {\r\n                \"symfony/dependency-injection\": \"<3.4\",\r\n                \"symfony/process\": \"<3.3\"\r\n            },\r\n            \"provide\": {\r\n                \"psr/log-implementation\": \"1.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"psr/log\": \"~1.0\",\r\n                \"symfony/config\": \"~3.4|~4.0\",\r\n                \"symfony/dependency-injection\": \"~3.4|~4.0\",\r\n                \"symfony/event-dispatcher\": \"~3.4|~4.0\",\r\n                \"symfony/lock\": \"~3.4|~4.0\",\r\n                \"symfony/process\": \"~3.4|~4.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"psr/log\": \"For using the console logger\",\r\n                \"symfony/event-dispatcher\": \"\",\r\n                \"symfony/lock\": \"\",\r\n                \"symfony/process\": \"\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"4.1-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\Console\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Fabien Potencier\",\r\n                    \"email\": \"fabien@symfony.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony Console Component\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"support\": {\r\n                \"source\": \"https://github.com/symfony/console/tree/v4.1.12\"\r\n            },\r\n            \"time\": \"2019-01-25T14:34:37+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/polyfill-mbstring\",\r\n            \"version\": \"v1.27.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/polyfill-mbstring.git\",\r\n                \"reference\": \"8ad114f6b39e2c98a8b0e3bd907732c207c2b534\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-mbstring/zipball/8ad114f6b39e2c98a8b0e3bd907732c207c2b534\",\r\n                \"reference\": \"8ad114f6b39e2c98a8b0e3bd907732c207c2b534\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"provide\": {\r\n                \"ext-mbstring\": \"*\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-mbstring\": \"For best performance\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"1.27-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/polyfill\",\r\n                    \"url\": \"https://github.com/symfony/polyfill\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"files\": [\r\n                    \"bootstrap.php\"\r\n                ],\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Polyfill\\\\Mbstring\\\\\": \"\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony polyfill for the Mbstring extension\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"compatibility\",\r\n                \"mbstring\",\r\n                \"polyfill\",\r\n                \"portable\",\r\n                \"shim\"\r\n            ],\r\n            \"support\": {\r\n                \"source\": \"https://github.com/symfony/polyfill-mbstring/tree/v1.27.0\"\r\n            },\r\n            \"funding\": [\r\n                {\r\n                    \"url\": \"https://symfony.com/sponsor\",\r\n                    \"type\": \"custom\"\r\n                },\r\n                {\r\n                    \"url\": \"https://github.com/fabpot\",\r\n                    \"type\": \"github\"\r\n                },\r\n                {\r\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\r\n                    \"type\": \"tidelift\"\r\n                }\r\n            ],\r\n            \"time\": \"2022-11-03T14:55:06+00:00\"\r\n        }\r\n    ],\r\n    \"aliases\": [],\r\n    \"minimum-stability\": \"stable\",\r\n    \"stability-flags\": [],\r\n    \"prefer-stable\": true,\r\n    \"prefer-lowest\": false,\r\n    \"platform\": {\r\n        \"ext-curl\": \"*\",\r\n        \"ext-fileinfo\": \"*\",\r\n        \"ext-gd\": \"*\",\r\n        \"ext-json\": \"*\"\r\n    },\r\n    \"platform-dev\": [],\r\n    \"plugin-api-version\": \"2.3.0\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/composer.lock b/composer.lock
--- a/composer.lock	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/composer.lock	(date 1671563219281)
@@ -108,16 +108,16 @@
         },
         {
             "name": "andreyryabin/sprint.migration",
-            "version": "4.1.3",
+            "version": "4.2.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/andreyryabin/sprint.migration.git",
-                "reference": "f2816d25b6d3d6075bd9a24169442886ed117f36"
+                "reference": "0200e148e0dca5e26aa341cf8826db3c1c2decdf"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/andreyryabin/sprint.migration/zipball/f2816d25b6d3d6075bd9a24169442886ed117f36",
-                "reference": "f2816d25b6d3d6075bd9a24169442886ed117f36",
+                "url": "https://api.github.com/repos/andreyryabin/sprint.migration/zipball/0200e148e0dca5e26aa341cf8826db3c1c2decdf",
+                "reference": "0200e148e0dca5e26aa341cf8826db3c1c2decdf",
                 "shasum": ""
             },
             "require": {
@@ -149,7 +149,7 @@
             ],
             "support": {
                 "issues": "https://github.com/andreyryabin/sprint.migration/issues",
-                "source": "https://github.com/andreyryabin/sprint.migration/tree/4.1.3"
+                "source": "https://github.com/andreyryabin/sprint.migration/tree/4.2.1"
             },
             "funding": [
                 {
@@ -157,7 +157,7 @@
                     "type": "custom"
                 }
             ],
-            "time": "2022-11-28T11:14:15+00:00"
+            "time": "2022-12-12T11:29:14+00:00"
         },
         {
             "name": "bitrix-expert/tools",
@@ -478,10 +478,10 @@
         },
         {
             "name": "npm-asset/jquery",
-            "version": "3.6.1",
+            "version": "3.6.2",
             "dist": {
                 "type": "tar",
-                "url": "https://registry.npmjs.org/jquery/-/jquery-3.6.1.tgz"
+                "url": "https://registry.npmjs.org/jquery/-/jquery-3.6.2.tgz"
             },
             "type": "npm-asset",
             "license": [
Index: local/modules/sprint.migration/lib/console.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\nuse Bitrix\\Main\\EventManager;\r\nuse CGroup;\r\nuse CUser;\r\nuse Exception;\r\nuse Sprint\\Migration\\Enum\\VersionEnum;\r\nuse Sprint\\Migration\\Exceptions\\MigrationException;\r\nuse Throwable;\r\n\r\nclass Console\r\n{\r\n\r\n    private $script;\r\n    private $command;\r\n\r\n    private $arguments = [];\r\n\r\n    private $versionConfig;\r\n    private $versionManager;\r\n\r\n    private $argoptions = [];\r\n\r\n    /**\r\n     * Console constructor.\r\n     * @param $args\r\n     * @throws Exception\r\n     */\r\n    public function __construct($args)\r\n    {\r\n        $this->script = array_shift($args);\r\n\r\n        $this->command = $this->initializeArgs($args);\r\n\r\n        $this->versionConfig = new VersionConfig($this->getArg('--config='));\r\n        $this->versionManager = new VersionManager($this->versionConfig);\r\n\r\n        $this->disableAuthHandlersIfNeed();\r\n\r\n        $userlogin = $this->versionConfig->getVal('console_user');\r\n        if ($userlogin == 'admin') {\r\n            $this->authorizeAsAdmin();\r\n        } elseif (strpos($userlogin, 'login:') === 0) {\r\n            $userlogin = substr($userlogin, 6);\r\n            $this->authorizeAsLogin($userlogin);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @throws MigrationException\r\n     */\r\n    public function executeConsoleCommand()\r\n    {\r\n        if (empty($this->command)) {\r\n            $this->commandInfo();\r\n\r\n        } elseif (method_exists($this, $this->command)) {\r\n            call_user_func([$this, $this->command]);\r\n\r\n        } else {\r\n            $this->exitWithMessage(\r\n                Locale::getMessage(\r\n                    'ERR_COMMAND_NOT_FOUND', [\r\n                        '#NAME#' => $this->command,\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    public function authorizeAsLogin($login)\r\n    {\r\n        global $USER;\r\n        $dbres = CUser::GetByLogin($login);\r\n        $useritem = $dbres->Fetch();\r\n        if ($useritem) {\r\n            $USER->Authorize($useritem['ID']);\r\n        }\r\n    }\r\n\r\n    public function authorizeAsAdmin()\r\n    {\r\n        global $USER;\r\n\r\n        $by = 'c_sort';\r\n        $order = 'asc';\r\n\r\n        $groupitem = CGroup::GetList($by, $order, [\r\n            'ADMIN' => 'Y',\r\n            'ACTIVE' => 'Y',\r\n        ])->Fetch();\r\n\r\n        if (!empty($groupitem)) {\r\n            $by = 'id';\r\n\r\n            $useritem = CUser::GetList($by, $order, [\r\n                'GROUPS_ID' => [$groupitem['ID']],\r\n                'ACTIVE' => 'Y',\r\n            ], [\r\n                'NAV_PARAMS' => ['nTopCount' => 1],\r\n            ])->Fetch();\r\n\r\n            if (!empty($useritem)) {\r\n                $USER->Authorize($useritem['ID']);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @noinspection PhpUnused\r\n     * @throws MigrationException\r\n     */\r\n    public function commandRun()\r\n    {\r\n        $this->executeBuilder($this->getArg(0));\r\n    }\r\n\r\n    /**\r\n     * @throws MigrationException\r\n     */\r\n    public function commandCreate()\r\n    {\r\n        /** @compability */\r\n        $descr = $this->getArg(0);\r\n        /** @compability */\r\n        $prefix = $this->getArg(1);\r\n\r\n        /** @compability */\r\n        $prefix = $this->getArg('--prefix=', $prefix);\r\n\r\n        $prefix = $this->getArg('--name=', $prefix);\r\n        $descr = $this->getArg('--desc=', $descr);\r\n\r\n        $from = $this->getArg('--from=', 'BlankBuilder');\r\n\r\n        $this->executeBuilder($from, [\r\n            'description' => $descr,\r\n            'prefix' => $prefix,\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @noinspection PhpUnused\r\n     * @throws MigrationException\r\n     */\r\n    public function commandMark()\r\n    {\r\n        $search = $this->getArg(0);\r\n        $status = $this->getArg('--as=');\r\n\r\n        if ($search && $status) {\r\n            Out::outMessages(\r\n                $this->versionManager->markMigration($search, $status)\r\n            );\r\n        } else {\r\n            $this->exitWithMessage(\r\n                Locale::getMessage('ERR_INVALID_ARGUMENTS')\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @throws MigrationException\r\n     */\r\n    public function commandDelete()\r\n    {\r\n        Out::outMessages(\r\n            $this->versionManager->deleteMigration($this->getArg(0))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @noinspection PhpUnused\r\n     * @throws MigrationException\r\n     */\r\n    public function commandDel()\r\n    {\r\n        $this->commandDelete();\r\n    }\r\n\r\n    /**\r\n     * @throws MigrationException\r\n     */\r\n    public function commandList()\r\n    {\r\n        if ($this->getArg('--new')) {\r\n            $status = VersionEnum::STATUS_NEW;\r\n        } elseif ($this->getArg('--installed')) {\r\n            $status = VersionEnum::STATUS_INSTALLED;\r\n        } else {\r\n            $status = '';\r\n        }\r\n\r\n        $versions = $this->versionManager->getVersions([\r\n            'status' => $status,\r\n            'search' => $this->getArg('--search='),\r\n            'tag' => $this->getArg('--tag='),\r\n            'modified' => $this->getArg('--modified'),\r\n            'older' => $this->getArg('--older'),\r\n        ]);\r\n\r\n        if ($status) {\r\n            $summary = [];\r\n            $summary[$status] = 0;\r\n        } else {\r\n            $summary = [\r\n                VersionEnum::STATUS_NEW => 0,\r\n                VersionEnum::STATUS_INSTALLED => 0,\r\n                VersionEnum::STATUS_UNKNOWN => 0,\r\n            ];\r\n        }\r\n\r\n        $grid = new ConsoleGrid(-1, [\r\n            'horizontal' => '=',\r\n            'vertical' => '',\r\n            'intersection' => '',\r\n        ], 1, 'UTF-8');\r\n\r\n        $grid->setHeaders([\r\n            'Version',\r\n            'Status',\r\n            'Tag',\r\n            'Description',\r\n        ]);\r\n\r\n        foreach ($versions as $item) {\r\n            if ($item['modified']) {\r\n                $item['version'] .= ' (' . Locale::getMessage('MODIFIED_LABEL') . ')';\r\n            }\r\n            if ($item['older']) {\r\n                $item['version'] .= ' (' . Locale::getMessage('OLDER_LABEL') . ')';\r\n            }\r\n            $grid->addRow([\r\n                $item['version'],\r\n                Locale::getMessage('META_' . strtoupper($item['status'])),\r\n                $item['tag'],\r\n                Out::prepareToConsole(\r\n                    $item['description'],\r\n                    [\r\n                        'tracker_task_url' => $this->versionConfig->getVal('tracker_task_url'),\r\n                    ]\r\n                ),\r\n            ]);\r\n\r\n            $stval = $item['status'];\r\n            $summary[$stval]++;\r\n        }\r\n\r\n        Out::out($grid->build());\r\n\r\n        $grid = new ConsoleGrid(-1, '', 1, 'UTF-8');\r\n        foreach ($summary as $k => $v) {\r\n            $grid->addRow([Locale::getMessage('META_' . strtoupper($k)) . ':', $v,]);\r\n        }\r\n\r\n        Out::out($grid->build());\r\n\r\n    }\r\n\r\n    /**\r\n     * @noinspection PhpUnused\r\n     * @throws MigrationException\r\n     */\r\n    public function commandUp()\r\n    {\r\n        $versionName = $this->getArg(0);\r\n\r\n        if ($versionName) {\r\n            if ($this->versionManager->checkVersionName($versionName)) {\r\n                $this->executeOnce($versionName, VersionEnum::ACTION_UP);\r\n            } else {\r\n                $this->exitWithMessage(\r\n                    Locale::getMessage('ERR_VERSION_NOT_FOUND')\r\n                );\r\n            }\r\n        } else {\r\n            $this->executeAll([\r\n                'status' => VersionEnum::STATUS_NEW,\r\n                'search' => $this->getArg('--search='),\r\n                'tag' => $this->getArg('--tag='),\r\n                'modified' => $this->getArg('--modified'),\r\n                'older' => $this->getArg('--older'),\r\n            ]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @noinspection PhpUnused\r\n     * @throws MigrationException\r\n     */\r\n    public function commandDown()\r\n    {\r\n        $versionName = $this->getArg(0);\r\n\r\n        if ($versionName) {\r\n            if ($this->versionManager->checkVersionName($versionName)) {\r\n                $this->executeOnce($versionName, VersionEnum::ACTION_DOWN);\r\n            } else {\r\n                $this->exitWithMessage(\r\n                    Locale::getMessage('ERR_VERSION_NOT_FOUND')\r\n                );\r\n            }\r\n        } else {\r\n            $this->executeAll([\r\n                'status' => VersionEnum::STATUS_INSTALLED,\r\n                'search' => $this->getArg('--search='),\r\n                'tag' => $this->getArg('--tag='),\r\n                'modified' => $this->getArg('--modified'),\r\n                'older' => $this->getArg('--older'),\r\n            ]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @noinspection PhpUnused\r\n     * @throws MigrationException\r\n     */\r\n    public function commandRedo()\r\n    {\r\n        $versionName = $this->getArg(0);\r\n        if ($this->versionManager->checkVersionName($versionName)) {\r\n            $this->executeVersion($versionName, VersionEnum::ACTION_DOWN);\r\n            $this->executeVersion($versionName, VersionEnum::ACTION_UP);\r\n        } else {\r\n            $this->exitWithMessage(\r\n                Locale::getMessage('ERR_VERSION_NOT_FOUND')\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public function commandInfo()\r\n    {\r\n        global $USER;\r\n\r\n        Out::out(Locale::getMessage('MODULE_NAME'));\r\n        Out::out(Locale::getMessage('BITRIX_VERSION') . ': %s', defined('SM_VERSION') ? SM_VERSION : '');\r\n        Out::out(Locale::getMessage('MODULE_VERSION') . ': %s', Module::getVersion());\r\n\r\n        if ($USER && $USER->GetID()) {\r\n            Out::out(Locale::getMessage('CURRENT_USER') . ': [%d] %s', $USER->GetID(), $USER->GetLogin());\r\n        }\r\n\r\n        $configList = $this->versionConfig->getList();\r\n        $configName = $this->versionConfig->getName();\r\n\r\n        Out::out('');\r\n        Out::out(Locale::getMessage('CONFIG_LIST') . ':');\r\n        foreach ($configList as $configItem) {\r\n            if ($configItem['name'] == $configName) {\r\n                Out::out('  ' . $configItem['title'] . ' *');\r\n            } else {\r\n                Out::out('  ' . $configItem['title']);\r\n            }\r\n        }\r\n        Out::out('');\r\n        Out::out(Locale::getMessage('COMMAND_CONFIG') . ':' . PHP_EOL . '  php %s config' . PHP_EOL,\r\n            $this->script);\r\n        Out::out(Locale::getMessage('COMMAND_RUN') . ':' . PHP_EOL . '  php %s <command> [<args>]' . PHP_EOL,\r\n            $this->script);\r\n        Out::out(Locale::getMessage('COMMAND_HELP') . ':' . PHP_EOL . '  php %s help' . PHP_EOL,\r\n            $this->script);\r\n\r\n    }\r\n\r\n    /**\r\n     * @noinspection PhpUnused\r\n     */\r\n    public function commandHelp()\r\n    {\r\n        if (Locale::getLang() == 'en') {\r\n            Out::out(file_get_contents(Module::getModuleDir() . '/commands-en.txt'));\r\n        } else {\r\n            Out::out(file_get_contents(Module::getModuleDir() . '/commands.txt'));\r\n        }\r\n    }\r\n\r\n    public function commandConfig()\r\n    {\r\n        $configValues = $this->versionConfig->getCurrent('values');\r\n        $configTitle = $this->versionConfig->getCurrent('title');\r\n\r\n        $configValues = $this->versionConfig->humanValues($configValues);\r\n\r\n        Out::out('%s: %s',\r\n            Locale::getMessage('CONFIG'),\r\n            $configTitle\r\n        );\r\n\r\n        $grid = new ConsoleGrid(-1, [\r\n            'horizontal' => '=',\r\n            'vertical' => '',\r\n            'intersection' => '',\r\n        ], 1, 'UTF-8');\r\n\r\n        $grid->setBorderVisibility(['bottom' => false]);\r\n\r\n        foreach ($configValues as $key => $val) {\r\n            $grid->addRow([$key, $val]);\r\n        }\r\n\r\n        Out::out($grid->build());\r\n    }\r\n\r\n    /**\r\n     * @noinspection PhpUnused\r\n     * @throws MigrationException\r\n     */\r\n    public function commandLs()\r\n    {\r\n        $this->commandList();\r\n    }\r\n\r\n    /**\r\n     * @noinspection PhpUnused\r\n     * @throws MigrationException\r\n     */\r\n    public function commandAdd()\r\n    {\r\n        $this->commandCreate();\r\n    }\r\n\r\n    /**\r\n     * @noinspection PhpUnused\r\n     * @throws MigrationException\r\n     */\r\n    public function commandMigrate()\r\n    {\r\n        /** @compability */\r\n        $status = $this->getArg('--down') ? VersionEnum::STATUS_INSTALLED : VersionEnum::STATUS_NEW;\r\n        $this->executeAll([\r\n            'status' => $status,\r\n            'search' => $this->getArg('--search='),\r\n            'tag' => $this->getArg('--tag='),\r\n            'modified' => $this->getArg('--modified'),\r\n            'older' => $this->getArg('--older'),\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @noinspection PhpUnused\r\n     * @throws MigrationException\r\n     */\r\n    public function commandMi()\r\n    {\r\n        /** @compability */\r\n        $this->commandMigrate();\r\n    }\r\n\r\n    /**\r\n     * @throws MigrationException\r\n     */\r\n    public function commandExecute()\r\n    {\r\n        /** @compability */\r\n        $version = $this->getArg(0);\r\n        if ($version) {\r\n            if ($this->getArg('--down')) {\r\n                $this->executeOnce($version, VersionEnum::ACTION_DOWN);\r\n            } else {\r\n                $this->executeOnce($version, VersionEnum::ACTION_UP);\r\n            }\r\n        } else {\r\n            $this->exitWithMessage(\r\n                Locale::getMessage('ERR_VERSION_NOT_FOUND')\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @throws MigrationException\r\n     */\r\n    public function commandForce()\r\n    {\r\n        /** @compability */\r\n        $this->addArg('--force');\r\n        $this->commandExecute();\r\n    }\r\n\r\n    /**\r\n     * @noinspection PhpUnused\r\n     * @throws Exception\r\n     * @return bool\r\n     */\r\n    public function commandSchema()\r\n    {\r\n        $action = $this->getArg(0);\r\n\r\n        $schemaManager = new SchemaManager($this->versionConfig);\r\n        $enabledSchemas = $schemaManager->getEnabledSchemas();\r\n\r\n        $selectValues = [];\r\n        foreach ($enabledSchemas as $schema) {\r\n            $selectValues[] = [\r\n                'value' => $schema->getName(),\r\n                'title' => $schema->getTitle(),\r\n            ];\r\n        }\r\n\r\n        if (empty($action)) {\r\n            foreach ($enabledSchemas as $schema) {\r\n                $schema->outTitle(true);\r\n                $schema->outDescription();\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        $select = $this->getArg(1);\r\n        if (!empty($select)) {\r\n            $select = explode(' ', $select);\r\n            $select = array_filter($select, function ($a) {\r\n                return !empty($a);\r\n            });\r\n        } else {\r\n            $select = Out::input([\r\n                'title' => 'select schemas',\r\n                'select' => $selectValues,\r\n                'multiple' => 1,\r\n            ]);\r\n        }\r\n\r\n\r\n        $params = [];\r\n\r\n        do {\r\n\r\n            $schemaManager = new SchemaManager($this->versionConfig, $params);\r\n            $restart = 0;\r\n\r\n            try {\r\n\r\n                if ($action == 'diff') {\r\n                    $schemaManager->setTestMode(1);\r\n                    $schemaManager->import(['name' => $select]);\r\n\r\n                } elseif ($action == 'import') {\r\n                    $schemaManager->setTestMode(0);\r\n                    $schemaManager->import(['name' => $select]);\r\n\r\n                } elseif ($action == 'export') {\r\n                    $schemaManager->export(['name' => $select]);\r\n                }\r\n\r\n\r\n            } catch (Exceptions\\RestartException $e) {\r\n                $params = $schemaManager->getRestartParams();\r\n                $restart = 1;\r\n\r\n            } catch (Throwable $e) {\r\n                Out::outException($e);\r\n            }\r\n\r\n        } while ($restart == 1);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param $filter\r\n     * @throws MigrationException\r\n     */\r\n    protected function executeAll($filter)\r\n    {\r\n        $stopOnErrors = $this->versionConfig->getVal('stop_on_errors');\r\n\r\n        if ($this->getArg('--skip-errors')) {\r\n            $stopOnErrors = false;\r\n        } elseif ($this->getArg('--stop-on-errors')) {\r\n            $stopOnErrors = true;\r\n        }\r\n\r\n        $success = 0;\r\n        $fails = 0;\r\n\r\n        $versions = $this->versionManager->getVersions($filter);\r\n\r\n        $action = ($filter['status'] == VersionEnum::STATUS_NEW) ? VersionEnum::ACTION_UP : VersionEnum::ACTION_DOWN;\r\n\r\n        foreach ($versions as $item) {\r\n\r\n            $ok = $this->executeVersion($item['version'], $action);\r\n\r\n            if ($ok) {\r\n                $success++;\r\n            } else {\r\n                $fails++;\r\n            }\r\n\r\n            if ($fails && $stopOnErrors) {\r\n                break;\r\n            }\r\n\r\n        }\r\n\r\n        Out::out('migrations (%s): %d', $action, $success);\r\n\r\n        if ($fails) {\r\n            $this->exitWithMessage(\r\n                Locale::getMessage('ERR_SOME_MIGRATIONS_FAILS')\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $version\r\n     * @param string $action\r\n     * @throws MigrationException\r\n     */\r\n    protected function executeOnce($version, $action)\r\n    {\r\n        $ok = $this->executeVersion($version, $action);\r\n\r\n        if (!$ok) {\r\n            $this->exitWithMessage(\r\n                Locale::getMessage('ERR_MIGRATION_FAIL')\r\n            );\r\n        }\r\n    }\r\n\r\n    protected function executeVersion($version, $action)\r\n    {\r\n\r\n        $tag = $this->getArg('--add-tag=', '');\r\n        $force = $this->getArg('--force');\r\n\r\n        $params = [];\r\n\r\n        Out::out('%s (%s) start', $version, $action);\r\n\r\n        do {\r\n            $exec = 0;\r\n\r\n            $success = $this->versionManager->startMigration(\r\n                $version,\r\n                $action,\r\n                $params,\r\n                $force,\r\n                $tag\r\n            );\r\n\r\n            $restart = $this->versionManager->needRestart($version);\r\n\r\n            if ($restart) {\r\n                $params = $this->versionManager->getRestartParams($version);\r\n                $exec = 1;\r\n            }\r\n\r\n            if ($success && !$restart) {\r\n                Out::out('%s (%s) success', $version, $action);\r\n            }\r\n\r\n            if (!$success && !$restart) {\r\n                Out::outException($this->versionManager->getLastException());\r\n            }\r\n\r\n        } while ($exec == 1);\r\n\r\n        return $success;\r\n    }\r\n\r\n    /**\r\n     * @param $from\r\n     * @param array $postvars\r\n     * @throws MigrationException\r\n     */\r\n    protected function executeBuilder($from, $postvars = [])\r\n    {\r\n        do {\r\n\r\n            $builder = $this->versionManager->createBuilder($from, $postvars);\r\n\r\n            if (!$builder) {\r\n                $this->exitWithMessage(\r\n                    Locale::getMessage('ERR_BUILDER_NOT_FOUND')\r\n                );\r\n            }\r\n\r\n            $builder->renderConsole();\r\n\r\n            $builder->buildExecute();\r\n            $builder->buildAfter();\r\n\r\n            $builder->renderConsole();\r\n\r\n            $postvars = $builder->getRestartParams();\r\n\r\n        } while ($builder->isRestart() || $builder->isRebuild());\r\n    }\r\n\r\n\r\n    protected function initializeArgs($args)\r\n    {\r\n        foreach ($args as $val) {\r\n            $this->addArg($val);\r\n        }\r\n\r\n        $command = '';\r\n\r\n        if (isset($this->arguments[0])) {\r\n            $command = array_shift($this->arguments);\r\n\r\n            $command = str_replace(['_', '-', ' '], '*', $command);\r\n            $command = explode('*', $command);\r\n            $tmp = [];\r\n            foreach ($command as $val) {\r\n                $tmp[] = ucfirst(strtolower($val));\r\n            }\r\n\r\n            $command = 'command' . implode('', $tmp);\r\n\r\n        }\r\n\r\n        return $command;\r\n    }\r\n\r\n    protected function addArg($arg)\r\n    {\r\n        list($name, $val) = explode('=', $arg);\r\n        $isoption = (0 === strpos($name, '--')) ? 1 : 0;\r\n        if ($isoption) {\r\n            if (!is_null($val)) {\r\n                $this->argoptions[$name . '='] = $val;\r\n            } else {\r\n                $this->argoptions[$name] = 1;\r\n            }\r\n        } else {\r\n            $this->arguments[] = $name;\r\n        }\r\n    }\r\n\r\n    protected function getArg($name, $default = '')\r\n    {\r\n        if (is_numeric($name)) {\r\n            return isset($this->arguments[$name]) ? $this->arguments[$name] : $default;\r\n        } else {\r\n            return isset($this->argoptions[$name]) ? $this->argoptions[$name] : $default;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $msg\r\n     * @throws MigrationException\r\n     */\r\n    protected function exitWithMessage($msg)\r\n    {\r\n        Out::outError($msg);\r\n\r\n        Throw new MigrationException();\r\n    }\r\n\r\n    private function disableAuthHandlersIfNeed()\r\n    {\r\n        if ($this->versionConfig->getVal('console_auth_events_disable')) {\r\n            $this->disableHandler('main', 'OnAfterUserAuthorize');\r\n            $this->disableHandler('main', 'OnUserLogin');\r\n        }\r\n    }\r\n\r\n    private function disableHandler($moduleId, $eventType)\r\n    {\r\n        $eventManager = EventManager::getInstance();\r\n        $handlers = $eventManager->findEventHandlers($moduleId, $eventType);\r\n        foreach ($handlers as $iEventHandlerKey => $handler) {\r\n            $eventManager->removeEventHandler($moduleId, $eventType, $iEventHandlerKey);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/console.php b/local/modules/sprint.migration/lib/console.php
--- a/local/modules/sprint.migration/lib/console.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/console.php	(date 1670844554000)
@@ -473,16 +473,6 @@
         }
     }
 
-    /**
-     * @throws MigrationException
-     */
-    public function commandForce()
-    {
-        /** @compability */
-        $this->addArg('--force');
-        $this->commandExecute();
-    }
-
     /**
      * @noinspection PhpUnused
      * @throws Exception
@@ -568,14 +558,6 @@
      */
     protected function executeAll($filter)
     {
-        $stopOnErrors = $this->versionConfig->getVal('stop_on_errors');
-
-        if ($this->getArg('--skip-errors')) {
-            $stopOnErrors = false;
-        } elseif ($this->getArg('--stop-on-errors')) {
-            $stopOnErrors = true;
-        }
-
         $success = 0;
         $fails = 0;
 
@@ -593,7 +575,7 @@
                 $fails++;
             }
 
-            if ($fails && $stopOnErrors) {
+            if ($fails) {
                 break;
             }
 
@@ -628,7 +610,6 @@
     {
 
         $tag = $this->getArg('--add-tag=', '');
-        $force = $this->getArg('--force');
 
         $params = [];
 
@@ -641,14 +622,13 @@
                 $version,
                 $action,
                 $params,
-                $force,
                 $tag
             );
 
-            $restart = $this->versionManager->needRestart($version);
+            $restart = $this->versionManager->needRestart();
 
             if ($restart) {
-                $params = $this->versionManager->getRestartParams($version);
+                $params = $this->versionManager->getRestartParams();
                 $exec = 1;
             }
 
Index: local/modules/sprint.migration/lib/schema/iblockschema.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Schema;\r\n\r\nuse Exception;\r\nuse Sprint\\Migration\\AbstractSchema;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Locale;\r\n\r\nclass IblockSchema extends AbstractSchema\r\n{\r\n    private $iblockIds = [];\r\n\r\n    /**\r\n     * @return bool\r\n     */\r\n    protected function isBuilderEnabled()\r\n    {\r\n        return $this->getHelperManager()->Iblock()->isEnabled();\r\n    }\r\n\r\n    protected function initialize()\r\n    {\r\n        $this->setTitle(Locale::getMessage('SCHEMA_IBLOCK'));\r\n    }\r\n\r\n    public function getMap()\r\n    {\r\n        return ['iblock_types', 'iblocks/'];\r\n    }\r\n\r\n    public function outDescription()\r\n    {\r\n        $schemaTypes = $this->loadSchema(\r\n            'iblock_types', [\r\n                'items' => [],\r\n            ]\r\n        );\r\n\r\n        $this->out(\r\n            Locale::getMessage(\r\n                'SCHEMA_IBLOCK_TYPE_DESC',\r\n                [\r\n                    '#COUNT#' => count($schemaTypes['items']),\r\n                ]\r\n            )\r\n        );\r\n\r\n        $schemaIblocks = $this->loadSchemas(\r\n            'iblocks/', [\r\n                'iblock'       => [],\r\n                'fields'       => [],\r\n                'props'        => [],\r\n                'element_form' => [],\r\n                'section_form' => [],\r\n            ]\r\n        );\r\n\r\n        $this->out(\r\n            Locale::getMessage(\r\n                'SCHEMA_IBLOCK_DESC',\r\n                [\r\n                    '#COUNT#' => count($schemaIblocks),\r\n                ]\r\n            )\r\n        );\r\n\r\n        $cntProps = 0;\r\n        $cntForms = 0;\r\n        foreach ($schemaIblocks as $schemaIblock) {\r\n            $cntProps += count($schemaIblock['props']);\r\n            if (!empty($schemaIblock['element_form'])) {\r\n                $cntForms++;\r\n            }\r\n            if (!empty($schemaIblock['section_form'])) {\r\n                $cntForms++;\r\n            }\r\n        }\r\n\r\n        $this->out(\r\n            Locale::getMessage(\r\n                'SCHEMA_IBLOCK_PROPS_DESC',\r\n                [\r\n                    '#COUNT#' => $cntProps,\r\n                ]\r\n            )\r\n        );\r\n        $this->out(\r\n            Locale::getMessage(\r\n                'SCHEMA_IBLOCK_FORMS_DESC',\r\n                [\r\n                    '#COUNT#' => $cntForms,\r\n                ]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @throws HelperException\r\n     * @throws Exception\r\n     */\r\n    public function export()\r\n    {\r\n        $helper = $this->getHelperManager();\r\n\r\n        $types = $helper->Iblock()->getIblockTypes();\r\n        $exportTypes = [];\r\n        foreach ($types as $type) {\r\n            $exportTypes[] = $helper->Iblock()->exportIblockType($type['ID']);\r\n        }\r\n\r\n        $this->saveSchema(\r\n            'iblock_types', [\r\n                'items' => $exportTypes,\r\n            ]\r\n        );\r\n\r\n        $iblocks = $helper->Iblock()->getIblocks();\r\n        foreach ($iblocks as $iblock) {\r\n            if (!empty($iblock['CODE'])) {\r\n                $this->saveSchema(\r\n                    'iblocks/' . strtolower($iblock['IBLOCK_TYPE_ID'] . '-' . $iblock['CODE']), [\r\n                        'iblock'       => $helper->Iblock()->exportIblock($iblock['ID']),\r\n                        'fields'       => $helper->Iblock()->exportIblockFields($iblock['ID']),\r\n                        'props'        => $helper->Iblock()->exportProperties($iblock['ID']),\r\n                        'element_form' => $helper->UserOptions()->exportElementForm($iblock['ID']),\r\n                        'section_form' => $helper->UserOptions()->exportSectionForm($iblock['ID']),\r\n                    ]\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    public function import()\r\n    {\r\n        $schemaTypes = $this->loadSchema(\r\n            'iblock_types', [\r\n                'items' => [],\r\n            ]\r\n        );\r\n\r\n        $schemaIblocks = $this->loadSchemas(\r\n            'iblocks/', [\r\n                'iblock' => [],\r\n                'fields' => [],\r\n                'props'  => [],\r\n            ]\r\n        );\r\n\r\n        foreach ($schemaTypes['items'] as $type) {\r\n            $this->addToQueue('saveIblockType', $type);\r\n        }\r\n\r\n        foreach ($schemaIblocks as $schemaIblock) {\r\n            $iblockUid = $this->getUniqIblock($schemaIblock['iblock']);\r\n\r\n            $this->addToQueue('saveIblock', $schemaIblock['iblock']);\r\n            $this->addToQueue('saveIblockFields', $iblockUid, $schemaIblock['fields']);\r\n        }\r\n\r\n        foreach ($schemaIblocks as $schemaIblock) {\r\n            $iblockUid = $this->getUniqIblock($schemaIblock['iblock']);\r\n            $this->addToQueue('saveProperties', $iblockUid, $schemaIblock['props']);\r\n            if (isset($schemaIblock['element_form'])) {\r\n                $this->addToQueue('saveElementForm', $iblockUid, $schemaIblock['element_form']);\r\n            }\r\n            if (isset($schemaIblock['section_form'])) {\r\n                $this->addToQueue('saveSectionForm', $iblockUid, $schemaIblock['section_form']);\r\n            }\r\n        }\r\n\r\n        foreach ($schemaIblocks as $schemaIblock) {\r\n            $iblockUid = $this->getUniqIblock($schemaIblock['iblock']);\r\n\r\n            $skip = [];\r\n            foreach ($schemaIblock['props'] as $prop) {\r\n                $skip[] = $this->getUniqProp($prop);\r\n            }\r\n\r\n            $this->addToQueue('cleanProperties', $iblockUid, $skip);\r\n        }\r\n\r\n        $skip = [];\r\n        foreach ($schemaIblocks as $schemaIblock) {\r\n            $skip[] = $this->getUniqIblock($schemaIblock['iblock']);\r\n        }\r\n\r\n        $this->addToQueue('cleanIblocks', $skip);\r\n\r\n        $skip = [];\r\n        foreach ($schemaTypes['items'] as $type) {\r\n            $skip[] = $this->getUniqIblockType($type);\r\n        }\r\n\r\n        $this->addToQueue('cleanIblockTypes', $skip);\r\n    }\r\n\r\n    /**\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function saveIblockType($fields = [])\r\n    {\r\n        $helper = $this->getHelperManager();\r\n        $helper->Iblock()->setTestMode($this->testMode);\r\n        $helper->Iblock()->saveIblockType($fields);\r\n    }\r\n\r\n    /**\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function saveIblock($fields)\r\n    {\r\n        $helper = $this->getHelperManager();\r\n        $helper->Iblock()->setTestMode($this->testMode);\r\n        $helper->Iblock()->saveIblock($fields);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockUid\r\n     * @param $fields\r\n     */\r\n    protected function saveIblockFields($iblockUid, $fields)\r\n    {\r\n        $iblockId = $this->getIblockId($iblockUid);\r\n        if (!empty($iblockId)) {\r\n            $helper = $this->getHelperManager();\r\n            $helper->Iblock()->setTestMode($this->testMode);\r\n            $helper->Iblock()->saveIblockFields($iblockId, $fields);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $iblockUid\r\n     * @param $properties\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function saveProperties($iblockUid, $properties)\r\n    {\r\n        $iblockId = $this->getIblockId($iblockUid);\r\n        if (!empty($iblockId)) {\r\n            $helper = $this->getHelperManager();\r\n            $helper->Iblock()->setTestMode($this->testMode);\r\n            foreach ($properties as $property) {\r\n                $helper->Iblock()->saveProperty($iblockId, $property);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $iblockUid\r\n     * @param $elementForm\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function saveElementForm($iblockUid, $elementForm)\r\n    {\r\n        $iblockId = $this->getIblockId($iblockUid);\r\n        if (!empty($iblockId)) {\r\n            $helper = $this->getHelperManager();\r\n            $helper->UserOptions()->setTestMode($this->testMode);\r\n            $helper->UserOptions()->saveElementForm($iblockId, $elementForm);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $iblockUid\r\n     * @param $sectionForm\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function saveSectionForm($iblockUid, $sectionForm)\r\n    {\r\n        $iblockId = $this->getIblockId($iblockUid);\r\n        if (!empty($iblockId)) {\r\n            $helper = $this->getHelperManager();\r\n            $helper->UserOptions()->setTestMode($this->testMode);\r\n            $helper->UserOptions()->saveSectionForm($iblockId, $sectionForm);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param       $iblockUid\r\n     * @param array $skip\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function cleanProperties($iblockUid, $skip = [])\r\n    {\r\n        $iblockId = $this->getIblockId($iblockUid);\r\n        if (!empty($iblockId)) {\r\n            $helper = $this->getHelperManager();\r\n            $olds = $helper->Iblock()->getProperties($iblockId);\r\n            foreach ($olds as $old) {\r\n                if (!empty($old['CODE'])) {\r\n                    $uniq = $this->getUniqProp($old);\r\n                    if (!in_array($uniq, $skip)) {\r\n                        $ok = ($this->testMode) ? true : $helper->Iblock()->deletePropertyById($old['ID']);\r\n                        $this->outWarningIf(\r\n                            $ok,\r\n                            Locale::getMessage(\r\n                                'IB_PROPERTY_DELETED',\r\n                                [\r\n                                    '#IBLOCK_ID#' => $iblockId,\r\n                                    '#NAME#'      => $this->getTitleProp($old),\r\n                                ]\r\n                            )\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param array $skip\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function cleanIblockTypes($skip = [])\r\n    {\r\n        $helper = $this->getHelperManager();\r\n\r\n        $olds = $helper->Iblock()->getIblockTypes();\r\n        foreach ($olds as $old) {\r\n            $uniq = $this->getUniqIblockType($old);\r\n            if (!in_array($uniq, $skip)) {\r\n                $ok = ($this->testMode) ? true : $helper->Iblock()->deleteIblockType($old['ID']);\r\n                $this->outWarningIf(\r\n                    $ok,\r\n                    Locale::getMessage(\r\n                        'IB_TYPE_DELETED',\r\n                        [\r\n                            '#NAME#' => $old['ID'],\r\n                        ]\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param array $skip\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function cleanIblocks($skip = [])\r\n    {\r\n        $helper = $this->getHelperManager();\r\n\r\n        $olds = $helper->Iblock()->getIblocks();\r\n        foreach ($olds as $old) {\r\n            if (!empty($old['CODE'])) {\r\n                $uniq = $this->getUniqIblock($old);\r\n                if (!in_array($uniq, $skip)) {\r\n                    $ok = ($this->testMode) ? true : $helper->Iblock()->deleteIblock($old['ID']);\r\n                    $this->outWarningIf(\r\n                        $ok,\r\n                        Locale::getMessage(\r\n                            'IB_DELETED',\r\n                            [\r\n                                '#NAME#' => $old['ID'],\r\n                            ]\r\n                        )\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected function getTitleProp($prop)\r\n    {\r\n        return empty($prop['CODE']) ? $prop['ID'] : $prop['CODE'];\r\n    }\r\n\r\n    protected function getUniqProp($prop)\r\n    {\r\n        return $prop['CODE'];\r\n    }\r\n\r\n    protected function getUniqIblockType($type)\r\n    {\r\n        return $type['ID'];\r\n    }\r\n\r\n    protected function getUniqIblock($iblock)\r\n    {\r\n        return $this->getHelperManager()->Iblock()->getIblockUid($iblock);\r\n    }\r\n\r\n    protected function getIblockId($iblockUid)\r\n    {\r\n        $helper = $this->getHelperManager();\r\n\r\n        if (isset($this->iblockIds[$iblockUid])) {\r\n            return $this->iblockIds[$iblockUid];\r\n        }\r\n\r\n        $this->iblockIds[$iblockUid] = $helper->Iblock()\r\n                                              ->getIblockIdByUid($iblockUid);\r\n\r\n        return $this->iblockIds[$iblockUid];\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/schema/iblockschema.php b/local/modules/sprint.migration/lib/schema/iblockschema.php
--- a/local/modules/sprint.migration/lib/schema/iblockschema.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/schema/iblockschema.php	(date 1670844554000)
@@ -389,7 +389,10 @@
 
     protected function getUniqIblock($iblock)
     {
-        return $this->getHelperManager()->Iblock()->getIblockUid($iblock);
+        return $this
+            ->getHelperManager()
+            ->Iblock()
+            ->getIblockUid($iblock);
     }
 
     protected function getIblockId($iblockUid)
@@ -400,8 +403,9 @@
             return $this->iblockIds[$iblockUid];
         }
 
-        $this->iblockIds[$iblockUid] = $helper->Iblock()
-                                              ->getIblockIdByUid($iblockUid);
+        $this->iblockIds[$iblockUid] = $helper
+            ->Iblock()
+            ->getIblockIdByUid($iblockUid);
 
         return $this->iblockIds[$iblockUid];
     }
Index: local/modules/sprint.migration/lib/schema/hlblockschema.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Schema;\r\n\r\nuse Sprint\\Migration\\AbstractSchema;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Locale;\r\n\r\nclass HlblockSchema extends AbstractSchema\r\n{\r\n    private $uniqs = [];\r\n\r\n    protected function isBuilderEnabled()\r\n    {\r\n        return $this->getHelperManager()->Hlblock()->isEnabled();\r\n    }\r\n\r\n    protected function initialize()\r\n    {\r\n        $this->setTitle(Locale::getMessage('SCHEMA_HLBLOCK'));\r\n    }\r\n\r\n    public function getMap()\r\n    {\r\n        return ['hlblocks/'];\r\n    }\r\n\r\n    public function outDescription()\r\n    {\r\n        $schemas = $this->loadSchemas(\r\n            'hlblocks/', [\r\n            'hlblock' => [],\r\n            'fields'  => [],\r\n        ]\r\n        );\r\n\r\n        $cntFields = 0;\r\n        foreach ($schemas as $schema) {\r\n            $cntFields += count($schema['fields']);\r\n        }\r\n\r\n        $this->out(\r\n            Locale::getMessage(\r\n                'SCHEMA_HLBLOCK_DESC',\r\n                [\r\n                    '#COUNT#' => count($schemas),\r\n                ]\r\n            )\r\n        );\r\n        $this->out(\r\n            Locale::getMessage(\r\n                'SCHEMA_HLBLOCK_FIELDS_DESC',\r\n                [\r\n                    '#COUNT#' => $cntFields,\r\n                ]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @throws HelperException\r\n     * @throws \\Exception\r\n     */\r\n    public function export()\r\n    {\r\n        $helper = $this->getHelperManager();\r\n\r\n        $exportItems = $helper->Hlblock()->exportHlblocks();\r\n\r\n        foreach ($exportItems as $item) {\r\n            $this->saveSchema(\r\n                'hlblocks/' . strtolower($item['NAME']), [\r\n                'hlblock' => $item,\r\n                'fields'  => $helper->Hlblock()->exportFields($item['NAME']),\r\n            ]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @throws HelperException\r\n     */\r\n    public function import()\r\n    {\r\n        $schemas = $this->loadSchemas(\r\n            'hlblocks/', [\r\n            'hlblock' => [],\r\n            'fields'  => [],\r\n        ]\r\n        );\r\n\r\n        foreach ($schemas as $schema) {\r\n            $hlblockUid = $this->getUniqHlblock($schema['hlblock']);\r\n\r\n            $this->addToQueue('saveHlblock', $schema['hlblock']);\r\n\r\n            foreach ($schema['fields'] as $field) {\r\n                $this->addToQueue('saveField', $hlblockUid, $field);\r\n            }\r\n        }\r\n\r\n        foreach ($schemas as $schema) {\r\n            $hlblockUid = $this->getUniqHlblock($schema['hlblock']);\r\n\r\n            $skip = [];\r\n            foreach ($schema['fields'] as $field) {\r\n                $skip[] = $this->getUniqField($field);\r\n            }\r\n\r\n            $this->addToQueue('cleanFields', $hlblockUid, $skip);\r\n        }\r\n\r\n        $skip = [];\r\n        foreach ($schemas as $schema) {\r\n            $skip[] = $this->getUniqHlblock($schema['hlblock']);\r\n        }\r\n\r\n        $this->addToQueue('cleanHlblocks', $skip);\r\n    }\r\n\r\n    /**\r\n     * @param $item\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function saveHlblock($item)\r\n    {\r\n        $helper = $this->getHelperManager();\r\n        $helper->Hlblock()->setTestMode($this->testMode);\r\n        $helper->Hlblock()->saveHlblock($item);\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockUid\r\n     * @param $field\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function saveField($hlblockUid, $field)\r\n    {\r\n        $hlblockId = $this->getHlblockId($hlblockUid);\r\n        if (!empty($hlblockId)) {\r\n            $helper = $this->getHelperManager();\r\n            $helper->Hlblock()->setTestMode($this->testMode);\r\n            $helper->Hlblock()->saveField($hlblockId, $field);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param array $skip\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function cleanHlblocks($skip = [])\r\n    {\r\n        $helper = $this->getHelperManager();\r\n\r\n        $olds = $helper->Hlblock()->getHlblocks();\r\n        foreach ($olds as $old) {\r\n            $uniq = $this->getUniqHlblock($old);\r\n            if (!in_array($uniq, $skip)) {\r\n                $ok = ($this->testMode) ? true : $helper->Hlblock()->deleteHlblock($old['ID']);\r\n                $this->outWarningIf(\r\n                    $ok,\r\n                    Locale::getMessage(\r\n                        'HLBLOCK_DELETED',\r\n                        [\r\n                            '#NAME#' => $old['NAME'],\r\n                        ]\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param       $hlblockUid\r\n     * @param array $skip\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function cleanFields($hlblockUid, $skip = [])\r\n    {\r\n        $hlblockId = $this->getHlblockId($hlblockUid);\r\n        if (!empty($hlblockId)) {\r\n            $helper = $this->getHelperManager();\r\n            $olds = $helper->Hlblock()->getFields($hlblockId);\r\n            foreach ($olds as $old) {\r\n                $uniq = $this->getUniqField($old);\r\n                if (!in_array($uniq, $skip)) {\r\n                    $ok = ($this->testMode)\r\n                        ? true\r\n                        : $helper->Hlblock()->deleteField(\r\n                            $hlblockId,\r\n                            $old['FIELD_NAME']\r\n                        );\r\n\r\n                    $this->outWarningIf(\r\n                        $ok,\r\n                        Locale::getMessage(\r\n                            'USER_TYPE_ENTITY_DELETED',\r\n                            [\r\n                                '#NAME#' => $old['FIELD_NAME'],\r\n                            ]\r\n                        )\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected function getUniqField($item)\r\n    {\r\n        return $item['FIELD_NAME'];\r\n    }\r\n\r\n    /**\r\n     * @param $item\r\n     *\r\n     * @throws HelperException\r\n     * @return string\r\n     */\r\n    protected function getUniqHlblock($item)\r\n    {\r\n        return $this->getHelperManager()->Hlblock()->getHlblockUid($item);\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockUid\r\n     *\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    protected function getHlblockId($hlblockUid)\r\n    {\r\n        $helper = $this->getHelperManager();\r\n\r\n        if (isset($this->uniqs[$hlblockUid])) {\r\n            return $this->uniqs[$hlblockUid];\r\n        }\r\n\r\n        $this->uniqs[$hlblockUid] = $helper->Hlblock()\r\n                                           ->getHlblockIdByUid($hlblockUid);\r\n\r\n        return $this->uniqs[$hlblockUid];\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/schema/hlblockschema.php b/local/modules/sprint.migration/lib/schema/hlblockschema.php
--- a/local/modules/sprint.migration/lib/schema/hlblockschema.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/schema/hlblockschema.php	(date 1670844554000)
@@ -29,9 +29,9 @@
     {
         $schemas = $this->loadSchemas(
             'hlblocks/', [
-            'hlblock' => [],
-            'fields'  => [],
-        ]
+                'hlblock' => [],
+                'fields'  => [],
+            ]
         );
 
         $cntFields = 0;
@@ -70,9 +70,9 @@
         foreach ($exportItems as $item) {
             $this->saveSchema(
                 'hlblocks/' . strtolower($item['NAME']), [
-                'hlblock' => $item,
-                'fields'  => $helper->Hlblock()->exportFields($item['NAME']),
-            ]
+                    'hlblock' => $item,
+                    'fields'  => $helper->Hlblock()->exportFields($item['NAME']),
+                ]
             );
         }
     }
@@ -84,9 +84,9 @@
     {
         $schemas = $this->loadSchemas(
             'hlblocks/', [
-            'hlblock' => [],
-            'fields'  => [],
-        ]
+                'hlblock' => [],
+                'fields'  => [],
+            ]
         );
 
         foreach ($schemas as $schema) {
@@ -188,12 +188,7 @@
             foreach ($olds as $old) {
                 $uniq = $this->getUniqField($old);
                 if (!in_array($uniq, $skip)) {
-                    $ok = ($this->testMode)
-                        ? true
-                        : $helper->Hlblock()->deleteField(
-                            $hlblockId,
-                            $old['FIELD_NAME']
-                        );
+                    $ok = ($this->testMode) ? true : $helper->Hlblock()->deleteField($hlblockId, $old['FIELD_NAME']);
 
                     $this->outWarningIf(
                         $ok,
@@ -239,8 +234,9 @@
             return $this->uniqs[$hlblockUid];
         }
 
-        $this->uniqs[$hlblockUid] = $helper->Hlblock()
-                                           ->getHlblockIdByUid($hlblockUid);
+        $this->uniqs[$hlblockUid] = $helper
+            ->Hlblock()
+            ->getHlblockIdByUid($hlblockUid);
 
         return $this->uniqs[$hlblockUid];
     }
Index: local/modules/sprint.migration/lib/tables/storage.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Tables;\r\n\r\nclass StorageTable extends AbstractTable\r\n{\r\n\r\n    public function __construct($name = 'default')\r\n    {\r\n        parent::__construct('sprint_storage_' . $name);\r\n    }\r\n\r\n    protected function createTable()\r\n    {\r\n        $this->query('CREATE TABLE IF NOT EXISTS `#TABLE1#`(\r\n              `id` INT NOT NULL AUTO_INCREMENT NOT NULL,\r\n              `category` varchar(255) COLLATE #COLLATE# NOT NULL,\r\n              `name` varchar(255) COLLATE #COLLATE# NOT NULL,\r\n              `data` longtext COLLATE #COLLATE# NOT NULL, \r\n              PRIMARY KEY (id), UNIQUE KEY `fullname` (`category`,`name`)\r\n              )ENGINE=InnoDB DEFAULT CHARSET=#CHARSET# COLLATE=#COLLATE# AUTO_INCREMENT=1;'\r\n        );\r\n    }\r\n\r\n    protected function dropTable()\r\n    {\r\n        $this->query('DROP TABLE IF EXISTS `#TABLE1#`;');\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/tables/storage.php b/local/modules/sprint.migration/lib/tables/storage.php
--- a/local/modules/sprint.migration/lib/tables/storage.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/tables/storage.php	(date 1670844554000)
@@ -2,17 +2,92 @@
 
 namespace Sprint\Migration\Tables;
 
+use Sprint\Migration\Exceptions\MigrationException;
+
 class StorageTable extends AbstractTable
 {
+    protected $category;
+
+    public function __construct($storageName, $category)
+    {
+        parent::__construct('sprint_storage_' . $storageName);
+        $this->category = $category;
+
+        if (empty($category)) {
+            throw new MigrationException('Need storage category');
+        }
+    }
+
+    /**
+     * @param string $name
+     * @param mixed  $value
+     *
+     * @throws MigrationException
+     */
+    public function saveData($name, $value = '')
+    {
+        if (empty($name)) {
+            throw new MigrationException('Need name kedy for saved data');
+        }
+
+        $value = $this->forSql(serialize($value));
+        $this->query(
+            'INSERT INTO `#TABLE1#` (`category`,`name`, `data`) VALUES ("%s", "%s", "%s") 
+                    ON DUPLICATE KEY UPDATE data = "%s"',
+            $this->forSql($this->category),
+            $this->forSql($name),
+            $value,
+            $value
+        );
+    }
 
-    public function __construct($name = 'default')
+    /**
+     * @param string $name
+     * @param mixed  $default
+     *
+     * @return mixed|string
+     */
+    public function getSavedData($name, $default = '')
     {
-        parent::__construct('sprint_storage_' . $name);
+        if (empty($name)) {
+            throw new MigrationException('Need name kedy for saved data');
+        }
+
+        $value = $this->query(
+            'SELECT name, data FROM #TABLE1# WHERE `category` = "%s" AND `name` = "%s"',
+            $this->forSql($this->category),
+            $this->forSql($name)
+        )->Fetch();
+        if ($value && $value['data']) {
+            return unserialize($value['data']);
+        }
+
+        return $default;
+    }
+
+    /**
+     * @param string $name
+     */
+    public function deleteSavedData($name = '')
+    {
+        if ($name) {
+            $this->query(
+                'DELETE FROM `#TABLE1#` WHERE `category` = "%s" AND `name` = "%s"',
+                $this->forSql($this->category),
+                $this->forSql($name)
+            );
+        } else {
+            $this->query(
+                'DELETE FROM `#TABLE1#` WHERE `category` = "%s"',
+                $this->forSql($this->category)
+            );
+        }
     }
 
     protected function createTable()
     {
-        $this->query('CREATE TABLE IF NOT EXISTS `#TABLE1#`(
+        $this->query(
+            'CREATE TABLE IF NOT EXISTS `#TABLE1#`(
               `id` INT NOT NULL AUTO_INCREMENT NOT NULL,
               `category` varchar(255) COLLATE #COLLATE# NOT NULL,
               `name` varchar(255) COLLATE #COLLATE# NOT NULL,
@@ -26,7 +101,6 @@
     {
         $this->query('DROP TABLE IF EXISTS `#TABLE1#`;');
     }
-
 }
 
 
Index: local/modules/sprint.migration/lib/tables/version.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Tables;\r\n\r\nuse Bitrix\\Main\\DB\\SqlQueryException;\r\n\r\nclass VersionTable extends AbstractTable\r\n{\r\n    protected $tableVersion = 3;\r\n\r\n    /**\r\n     * @throws SqlQueryException\r\n     * @return array\r\n     */\r\n    public function getRecords()\r\n    {\r\n        return $this->query('SELECT * FROM `#TABLE1#`')->fetchAll();\r\n    }\r\n\r\n    /**\r\n     * @param $versionName\r\n     *\r\n     * @throws SqlQueryException\r\n     * @return array|false\r\n     */\r\n    public function getRecord($versionName)\r\n    {\r\n        return $this->query(\r\n            'SELECT * FROM `#TABLE1#` WHERE `version` = \"%s\"',\r\n            $this->forSql($versionName)\r\n        )->fetch();\r\n    }\r\n\r\n    /**\r\n     * @param $meta\r\n     *\r\n     * @throws SqlQueryException\r\n     */\r\n    public function addRecord($meta)\r\n    {\r\n        $version = $this->forSql($meta['version']);\r\n        $hash = $this->forSql($meta['hash']);\r\n        $tag = $this->forSql($meta['tag']);\r\n\r\n        $this->query(\r\n            'INSERT INTO `#TABLE1#` (`version`, `hash`, `tag`) VALUES (\"%s\", \"%s\", \"%s\") \r\n                    ON DUPLICATE KEY UPDATE `hash` = \"%s\", `tag` = \"%s\"',\r\n            $version, $hash, $tag, $hash, $tag\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param $meta\r\n     *\r\n     * @throws SqlQueryException\r\n     */\r\n    public function removeRecord($meta)\r\n    {\r\n        $version = $this->forSql($meta['version']);\r\n\r\n        $this->query('DELETE FROM `#TABLE1#` WHERE `version` = \"%s\"', $version);\r\n    }\r\n\r\n    /**\r\n     * @param        $version\r\n     * @param string $tag\r\n     *\r\n     * @throws SqlQueryException\r\n     */\r\n    public function updateTag($version, $tag = '')\r\n    {\r\n        $version = $this->forSql($version);\r\n        $tag = $this->forSql($tag);\r\n\r\n        $this->query('UPDATE `#TABLE1#` SET `tag` = \"%s\" WHERE `version` = \"%s\"', $tag, $version);\r\n    }\r\n\r\n    /**\r\n     * @throws SqlQueryException\r\n     */\r\n    protected function createTable()\r\n    {\r\n        //tableVersion 1\r\n        $this->query(\r\n            'CREATE TABLE IF NOT EXISTS `#TABLE1#`(\r\n              `id` MEDIUMINT NOT NULL AUTO_INCREMENT NOT NULL,\r\n              `version` varchar(255) COLLATE #COLLATE# NOT NULL,\r\n              PRIMARY KEY (id), UNIQUE KEY(version)\r\n              )ENGINE=InnoDB DEFAULT CHARSET=#CHARSET# COLLATE=#COLLATE# AUTO_INCREMENT=1;'\r\n        );\r\n\r\n        //tableVersion 2\r\n        if (empty($this->query('SHOW COLUMNS FROM `#TABLE1#` LIKE \"hash\"')->fetch())) {\r\n            $this->query('ALTER TABLE `#TABLE1#` ADD COLUMN `hash` VARCHAR(50) NULL AFTER `version`');\r\n        }\r\n\r\n        //tableVersion 3\r\n        if (empty($this->query('SHOW COLUMNS FROM `#TABLE1#` LIKE \"tag\"')->fetch())) {\r\n            $this->query('ALTER TABLE `#TABLE1#` ADD COLUMN `tag` VARCHAR(50) NULL AFTER `hash`');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @throws SqlQueryException\r\n     */\r\n    protected function dropTable()\r\n    {\r\n        $this->query('DROP TABLE IF EXISTS `#TABLE1#`;');\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/tables/version.php b/local/modules/sprint.migration/lib/tables/version.php
--- a/local/modules/sprint.migration/lib/tables/version.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/tables/version.php	(date 1670844554000)
@@ -26,7 +26,7 @@
     public function getRecord($versionName)
     {
         return $this->query(
-            'SELECT * FROM `#TABLE1#` WHERE `version` = "%s"',
+            'SELECT * FROM `#TABLE1#` WHERE `version` = "%s" LIMIT 1',
             $this->forSql($versionName)
         )->fetch();
     }
Index: local/modules/sprint.migration/lib/traits/exceptiontrait.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Traits;\r\n\r\nuse Sprint\\Migration\\HelperManager;\r\nuse Throwable;\r\n\r\ntrait ExceptionTrait\r\n{\r\n    public function getExceptionAsString(Throwable $exception): string\r\n    {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/traits/exceptiontrait.php b/local/modules/sprint.migration/lib/traits/exceptiontrait.php
--- a/local/modules/sprint.migration/lib/traits/exceptiontrait.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/traits/exceptiontrait.php	(date 1670844554000)
@@ -1,14 +1,3 @@
 <?php
 
-namespace Sprint\Migration\Traits;
-
-use Sprint\Migration\HelperManager;
-use Throwable;
-
-trait ExceptionTrait
-{
-    public function getExceptionAsString(Throwable $exception): string
-    {
-
-    }
-}
+//deleted
Index: local/modules/sprint.migration/lib/helpers/usertypeentityhelper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers;\r\n\r\nuse CUserFieldEnum;\r\nuse CUserTypeEntity;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Helper;\r\nuse Sprint\\Migration\\Locale;\r\n\r\nclass UserTypeEntityHelper extends Helper\r\n{\r\n    /**\r\n     * Добавляет пользовательские поля к объекту\r\n     *\r\n     * @param       $entityId\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    public function addUserTypeEntitiesIfNotExists($entityId, array $fields)\r\n    {\r\n        foreach ($fields as $field) {\r\n            $this->addUserTypeEntityIfNotExists($entityId, $field[\"FIELD_NAME\"], $field);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Удаляет пользовательские поля у объекта\r\n     *\r\n     * @param       $entityId\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    public function deleteUserTypeEntitiesIfExists($entityId, array $fields)\r\n    {\r\n        foreach ($fields as $fieldName) {\r\n            $this->deleteUserTypeEntityIfExists($entityId, $fieldName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Добавляет пользовательское поле к объекту если его не существует\r\n     *\r\n     * @param $entityId\r\n     * @param $fieldName\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int\r\n     */\r\n    public function addUserTypeEntityIfNotExists($entityId, $fieldName, $fields)\r\n    {\r\n        $item = $this->getUserTypeEntity(\r\n            $this->revertEntityId($entityId),\r\n            $fieldName\r\n        );\r\n        if ($item) {\r\n            return $item['ID'];\r\n        }\r\n\r\n        return $this->addUserTypeEntity($entityId, $fieldName, $fields);\r\n    }\r\n\r\n    /**\r\n     * Добавляет пользовательское поле к объекту\r\n     *\r\n     * @param $entityId\r\n     * @param $fieldName\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function addUserTypeEntity($entityId, $fieldName, $fields)\r\n    {\r\n        $default = [\r\n            \"ENTITY_ID\"         => '',\r\n            \"FIELD_NAME\"        => '',\r\n            \"USER_TYPE_ID\"      => '',\r\n            \"XML_ID\"            => '',\r\n            \"SORT\"              => 500,\r\n            \"MULTIPLE\"          => 'N',\r\n            \"MANDATORY\"         => 'N',\r\n            \"SHOW_FILTER\"       => 'I',\r\n            \"SHOW_IN_LIST\"      => '',\r\n            \"EDIT_IN_LIST\"      => '',\r\n            \"IS_SEARCHABLE\"     => '',\r\n            \"SETTINGS\"          => [],\r\n            \"EDIT_FORM_LABEL\"   => ['ru' => '', 'en' => ''],\r\n            \"LIST_COLUMN_LABEL\" => ['ru' => '', 'en' => ''],\r\n            \"LIST_FILTER_LABEL\" => ['ru' => '', 'en' => ''],\r\n            \"ERROR_MESSAGE\"     => '',\r\n            \"HELP_MESSAGE\"      => '',\r\n        ];\r\n\r\n        $fields = array_replace_recursive($default, $fields);\r\n        $fields['FIELD_NAME'] = $fieldName;\r\n        $fields['ENTITY_ID'] = $this->revertEntityId($entityId);\r\n\r\n        $this->revertSettings($fields);\r\n        $enums = $this->revertEnums($fields);\r\n\r\n        $obUserField = new CUserTypeEntity;\r\n        $userFieldId = $obUserField->Add($fields);\r\n\r\n        $enumsCreated = true;\r\n        if ($userFieldId && $fields['USER_TYPE_ID'] == 'enumeration') {\r\n            $enumsCreated = $this->setUserTypeEntityEnumValues($userFieldId, $enums);\r\n        }\r\n\r\n        if ($userFieldId && $enumsCreated) {\r\n            return $userFieldId;\r\n        }\r\n\r\n        $this->throwApplicationExceptionIfExists(__METHOD__);\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_USERTYPE_NOT_ADDED',\r\n                [\r\n                    '#NAME#' => $fieldName,\r\n                ]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Обновление пользовательского поля у объекта\r\n     *\r\n     * @param $fieldId\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function updateUserTypeEntity($fieldId, $fields)\r\n    {\r\n        unset($fields[\"ENTITY_ID\"]);\r\n        unset($fields[\"FIELD_NAME\"]);\r\n        unset($fields[\"MULTIPLE\"]);\r\n\r\n        $this->revertSettings($fields);\r\n        $enums = $this->revertEnums($fields);\r\n\r\n        $entity = new CUserTypeEntity;\r\n        $userFieldUpdated = $entity->Update($fieldId, $fields);\r\n\r\n        $enumsCreated = true;\r\n        if ($userFieldUpdated && $fields['USER_TYPE_ID'] == 'enumeration') {\r\n            $enumsCreated = $this->setUserTypeEntityEnumValues($fieldId, $enums);\r\n        }\r\n\r\n        if ($userFieldUpdated && $enumsCreated) {\r\n            return $fieldId;\r\n        }\r\n\r\n        $this->throwApplicationExceptionIfExists(__METHOD__);\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_USERTYPE_NOT_UPDATED',\r\n                [\r\n                    '#NAME#' => $fieldId,\r\n                ]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Обновление пользовательского поля у объекта если оно существует\r\n     *\r\n     * @param $entityId\r\n     * @param $fieldName\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|mixed\r\n     */\r\n    public function updateUserTypeEntityIfExists($entityId, $fieldName, $fields)\r\n    {\r\n        $item = $this->getUserTypeEntity(\r\n            $this->revertEntityId($entityId),\r\n            $fieldName\r\n        );\r\n        if (!$item) {\r\n            return false;\r\n        }\r\n\r\n        return $this->updateUserTypeEntity($item['ID'], $fields);\r\n    }\r\n\r\n    /**\r\n     * Получает пользовательские поля у объекта\r\n     *\r\n     * @param bool $entityId\r\n     *\r\n     * @return array\r\n     */\r\n    public function getUserTypeEntities($entityId = false)\r\n    {\r\n        if (!empty($entityId)) {\r\n            $filter = is_array($entityId)\r\n                ? $entityId\r\n                : [\r\n                    'ENTITY_ID' => $entityId,\r\n                ];\r\n        } else {\r\n            $filter = [];\r\n        }\r\n\r\n        $dbres = CUserTypeEntity::GetList([], $filter);\r\n        $result = [];\r\n        while ($item = $dbres->Fetch()) {\r\n            $result[] = $this->getUserTypeEntityById($item['ID']);\r\n        }\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * Получает пользовательское поле у объекта\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param $fieldId\r\n     *\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function exportUserTypeEntity($fieldId)\r\n    {\r\n        $item = $this->getUserTypeEntityById($fieldId);\r\n        return $this->prepareExportUserTypeEntity($item);\r\n    }\r\n\r\n    /**\r\n     * Получает пользовательские поля у объекта\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param bool $entityId\r\n     *\r\n     * @throws HelperException\r\n     * @return array\r\n     */\r\n    public function exportUserTypeEntities($entityId = false)\r\n    {\r\n        $items = $this->getUserTypeEntities($entityId);\r\n        $export = [];\r\n        foreach ($items as $item) {\r\n            $export[] = $this->prepareExportUserTypeEntity($item);\r\n        }\r\n        return $export;\r\n    }\r\n\r\n    /**\r\n     * Получает пользовательское поле у объекта\r\n     *\r\n     * @param $entityId\r\n     * @param $fieldName\r\n     *\r\n     * @return array|bool\r\n     */\r\n    public function getUserTypeEntity($entityId, $fieldName)\r\n    {\r\n        $item = CUserTypeEntity::GetList(\r\n            [],\r\n            [\r\n                'ENTITY_ID'  => $entityId,\r\n                'FIELD_NAME' => $fieldName,\r\n            ]\r\n        )->Fetch();\r\n\r\n        return (!empty($item)) ? $this->getUserTypeEntityById($item['ID']) : false;\r\n    }\r\n\r\n    /**\r\n     * Получает пользовательское поле у объекта\r\n     *\r\n     * @param $fieldId\r\n     *\r\n     * @return array|bool\r\n     */\r\n    public function getUserTypeEntityById($fieldId)\r\n    {\r\n        $item = CUserTypeEntity::GetByID($fieldId);\r\n        if (empty($item)) {\r\n            return false;\r\n        }\r\n\r\n        if ($item['USER_TYPE_ID'] == 'enumeration') {\r\n            $item['ENUM_VALUES'] = $this->getEnumValues($fieldId);\r\n        }\r\n\r\n        return $item;\r\n    }\r\n\r\n    /**\r\n     * Сохраняет значения списков для пользовательского поля\r\n     *\r\n     * @param $fieldId\r\n     * @param $newenums\r\n     *\r\n     * @return bool\r\n     */\r\n    public function setUserTypeEntityEnumValues($fieldId, $newenums)\r\n    {\r\n        $newenums = is_array($newenums) ? $newenums : [];\r\n        $oldenums = $this->getEnumValues($fieldId);\r\n\r\n        $index = 0;\r\n\r\n        $updates = [];\r\n        foreach ($oldenums as $oldenum) {\r\n            $newenum = $this->searchEnum($oldenum, $newenums);\r\n            if ($newenum) {\r\n                $updates[$oldenum['ID']] = $newenum;\r\n            } else {\r\n                $oldenum['DEL'] = 'Y';\r\n                $updates[$oldenum['ID']] = $oldenum;\r\n            }\r\n        }\r\n\r\n        foreach ($newenums as $newenum) {\r\n            $oldenum = $this->searchEnum($newenum, $oldenums);\r\n            if ($oldenum) {\r\n                $updates[$oldenum['ID']] = $newenum;\r\n            } else {\r\n                $updates['n' . $index++] = $newenum;\r\n            }\r\n        }\r\n\r\n        $obEnum = new CUserFieldEnum();\r\n        return $obEnum->SetEnumValues($fieldId, $updates);\r\n    }\r\n\r\n    /**\r\n     * Удаляет пользовательское поле у объекта если оно существует\r\n     *\r\n     * @param $entityId\r\n     * @param $fieldName\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|void\r\n     */\r\n    public function deleteUserTypeEntityIfExists($entityId, $fieldName)\r\n    {\r\n        $item = $this->getUserTypeEntity(\r\n            $this->revertEntityId($entityId),\r\n            $fieldName\r\n        );\r\n\r\n        if (empty($item)) {\r\n            return false;\r\n        }\r\n\r\n        $entity = new CUserTypeEntity();\r\n        if ($entity->Delete($item['ID'])) {\r\n            return true;\r\n        }\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_USERTYPE_NOT_DELETED',\r\n                [\r\n                    '#NAME#' => $fieldName,\r\n                ]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Удаляет пользовательское поле у объекта\r\n     *\r\n     * @param $entityId\r\n     * @param $fieldName\r\n     *\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function deleteUserTypeEntity($entityId, $fieldName)\r\n    {\r\n        return $this->deleteUserTypeEntityIfExists($entityId, $fieldName);\r\n    }\r\n\r\n    /**\r\n     * Декодирует название объекта в оригинальный вид\r\n     *\r\n     * @param $entityId\r\n     *\r\n     * @throws HelperException\r\n     * @return string\r\n     */\r\n    public function revertEntityId($entityId)\r\n    {\r\n        if (0 === strpos($entityId, 'HLBLOCK_')) {\r\n            $hlblockId = substr($entityId, 8);\r\n            if (!is_numeric($hlblockId)) {\r\n                $hlblockId = (new HlblockHelper())->getHlblockIdByUid($hlblockId);\r\n            }\r\n            return 'HLBLOCK_' . $hlblockId;\r\n        }\r\n\r\n        $matches = [];\r\n        if (preg_match('/^IBLOCK_(.+)_SECTION$/', $entityId, $matches)) {\r\n            $iblockId = $matches[1];\r\n            if (!is_numeric($iblockId)) {\r\n                $iblockId = (new IblockHelper())->getIblockIdByUid($iblockId);\r\n            }\r\n            return 'IBLOCK_' . $iblockId . '_SECTION';\r\n        }\r\n\r\n        return $entityId;\r\n    }\r\n\r\n    /**\r\n     * Кодирует название объекта в вид удобный для экспорта в миграцию или схему\r\n     *\r\n     * @param $entityId\r\n     *\r\n     * @throws HelperException\r\n     * @return string\r\n     */\r\n    public function transformEntityId($entityId)\r\n    {\r\n        if (0 === strpos($entityId, 'HLBLOCK_')) {\r\n            $hlblockId = substr($entityId, 8);\r\n            if (is_numeric($hlblockId)) {\r\n                $hlblockId = (new HlblockHelper())->getHlblockUid($hlblockId);\r\n            }\r\n            return 'HLBLOCK_' . $hlblockId;\r\n        }\r\n\r\n        $matches = [];\r\n        if (preg_match('/^IBLOCK_(.+)_SECTION$/', $entityId, $matches)) {\r\n            $iblockId = $matches[1];\r\n            if (is_numeric($iblockId)) {\r\n                $iblockId = (new IblockHelper())->getIblockUid($iblockId);\r\n            }\r\n            return 'IBLOCK_' . $iblockId . '_SECTION';\r\n        }\r\n\r\n        return $entityId;\r\n    }\r\n\r\n    /**\r\n     * Сохраняет пользовательское поле\r\n     * Создаст если не было, обновит если существует и отличается\r\n     *\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int|mixed\r\n     */\r\n    public function saveUserTypeEntity($fields = [])\r\n    {\r\n        if (func_num_args() > 1) {\r\n            /** @compability */\r\n            list($entityId, $fieldName, $fields) = func_get_args();\r\n            $fields['ENTITY_ID'] = $entityId;\r\n            $fields['FIELD_NAME'] = $fieldName;\r\n        }\r\n\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['ENTITY_ID', 'FIELD_NAME']);\r\n\r\n        $exists = $this->getUserTypeEntity(\r\n            $this->revertEntityId($fields['ENTITY_ID']),\r\n            $fields['FIELD_NAME']\r\n        );\r\n\r\n        $exportExists = $this->prepareExportUserTypeEntity($exists);\r\n        $fields = $this->prepareExportUserTypeEntity($fields);\r\n\r\n        if (empty($exists)) {\r\n            $ok = $this->getMode('test')\r\n                ? true\r\n                : $this->addUserTypeEntity(\r\n                    $fields['ENTITY_ID'],\r\n                    $fields['FIELD_NAME'],\r\n                    $fields\r\n                );\r\n\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'USER_TYPE_ENTITY_CREATED',\r\n                    [\r\n                        '#NAME#' => $fields['FIELD_NAME'],\r\n                    ]\r\n                )\r\n            );\r\n            return $ok;\r\n        }\r\n\r\n        unset($exportExists['MULTIPLE']);\r\n        unset($fields['MULTIPLE']);\r\n\r\n        if ($this->hasDiff($exportExists, $fields)) {\r\n            $ok = $this->getMode('test') ? true : $this->updateUserTypeEntity($exists['ID'], $fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'USER_TYPE_ENTITY_UPDATED',\r\n                    [\r\n                        '#NAME#' => $fields['FIELD_NAME'],\r\n                    ]\r\n                )\r\n            );\r\n            $this->outDiffIf($ok, $exportExists, $fields);\r\n            return $ok;\r\n        }\r\n\r\n        $ok = $this->getMode('test') ? true : $exists['ID'];\r\n        if ($this->getMode('out_equal')) {\r\n            $this->outIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'USER_TYPE_ENTITY_EQUAL',\r\n                    [\r\n                        '#NAME#' => $fields['FIELD_NAME'],\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n        return $ok;\r\n    }\r\n\r\n    /**\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    protected function prepareExportUserTypeEntity($fields)\r\n    {\r\n        if (empty($fields)) {\r\n            return $fields;\r\n        }\r\n\r\n        // Расширенные ошибки экспорта пользовательских полей\r\n        try {\r\n            $this->transformSettings($fields);\r\n            $this->transformEnums($fields);\r\n\r\n            $fields['ENTITY_ID'] = $this->transformEntityId($fields['ENTITY_ID']);\r\n        } catch (HelperException $e) {\r\n            $userTypeMessage = Locale::getMessage(\r\n                'ERR_USERTYPE_EXPORT',\r\n                ['#USER_TYPE_ID#' => $fields['ID']]\r\n            );\r\n\r\n            $extendedMessage = $userTypeMessage . PHP_EOL . $e->getMessage();\r\n\r\n            $this->throwException(__METHOD__, $extendedMessage);\r\n        }\r\n\r\n        unset($fields['ID']);\r\n        return $fields;\r\n    }\r\n\r\n    /**\r\n     * @param $fieldId\r\n     *\r\n     * @return array\r\n     */\r\n    protected function getEnumValues($fieldId)\r\n    {\r\n        $obEnum = new CUserFieldEnum;\r\n        $dbres = $obEnum->GetList([], [\"USER_FIELD_ID\" => $fieldId]);\r\n        return $this->fetchAll($dbres);\r\n    }\r\n\r\n    /**\r\n     * @param       $enum\r\n     * @param array $haystack\r\n     *\r\n     * @return bool|mixed\r\n     */\r\n    protected function searchEnum($enum, $haystack = [])\r\n    {\r\n        foreach ($haystack as $item) {\r\n            if (isset($item['XML_ID']) && strlen($item['XML_ID']) > 0 && $item['XML_ID'] == $enum['XML_ID']) {\r\n                return $item;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    private function transformSettings(&$fields)\r\n    {\r\n        if ($fields['USER_TYPE_ID'] == 'iblock_element') {\r\n            if (!empty($fields['SETTINGS']['IBLOCK_ID'])) {\r\n                $fields['SETTINGS']['IBLOCK_ID'] = (new IblockHelper())->getIblockUid(\r\n                    $fields['SETTINGS']['IBLOCK_ID']\r\n                );\r\n            }\r\n        }\r\n        if ($fields['USER_TYPE_ID'] == 'hlblock') {\r\n            if (!empty($fields['SETTINGS']['HLBLOCK_ID'])) {\r\n                $fields['SETTINGS']['HLBLOCK_ID'] = (new HlblockHelper())->getHlblockUid(\r\n                    $fields['SETTINGS']['HLBLOCK_ID']\r\n                );\r\n                if (!empty($fields['SETTINGS']['HLFIELD_ID'])) {\r\n                    $fields['SETTINGS']['HLFIELD_ID'] = (new HlblockHelper())->getFieldUid(\r\n                        $fields['SETTINGS']['HLBLOCK_ID'],\r\n                        $fields['SETTINGS']['HLFIELD_ID']\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    private function revertSettings(&$fields)\r\n    {\r\n        if ($fields['USER_TYPE_ID'] == 'iblock_element') {\r\n            if (!empty($fields['SETTINGS']['IBLOCK_ID'])) {\r\n                $fields['SETTINGS']['IBLOCK_ID'] = (new IblockHelper())->getIblockIdByUid(\r\n                    $fields['SETTINGS']['IBLOCK_ID']\r\n                );\r\n            }\r\n        }\r\n        if ($fields['USER_TYPE_ID'] == 'hlblock') {\r\n            if (!empty($fields['SETTINGS']['HLBLOCK_ID'])) {\r\n                $fields['SETTINGS']['HLBLOCK_ID'] = (new HlblockHelper())->getHlblockIdByUid(\r\n                    $fields['SETTINGS']['HLBLOCK_ID']\r\n                );\r\n                if (!empty($fields['SETTINGS']['HLFIELD_ID'])) {\r\n                    $fields['SETTINGS']['HLFIELD_ID'] = (new HlblockHelper())->getFieldIdByUid(\r\n                        $fields['SETTINGS']['HLBLOCK_ID'],\r\n                        $fields['SETTINGS']['HLFIELD_ID']\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private function transformEnums(&$fields)\r\n    {\r\n        if (!empty($fields['ENUM_VALUES']) && is_array($fields['ENUM_VALUES'])) {\r\n            $exportValues = [];\r\n            foreach ($fields['ENUM_VALUES'] as $item) {\r\n                $exportValues[] = [\r\n                    'VALUE'  => $item['VALUE'],\r\n                    'DEF'    => $item['DEF'],\r\n                    'SORT'   => $item['SORT'],\r\n                    'XML_ID' => $item['XML_ID'],\r\n                ];\r\n            }\r\n            $fields['ENUM_VALUES'] = $exportValues;\r\n        }\r\n    }\r\n\r\n    private function revertEnums(&$fields)\r\n    {\r\n        $enums = [];\r\n        if (isset($fields['ENUM_VALUES'])) {\r\n            $enums = $fields['ENUM_VALUES'];\r\n            unset($fields['ENUM_VALUES']);\r\n        }\r\n\r\n        return $enums;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/usertypeentityhelper.php b/local/modules/sprint.migration/lib/helpers/usertypeentityhelper.php
--- a/local/modules/sprint.migration/lib/helpers/usertypeentityhelper.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/usertypeentityhelper.php	(date 1670844554000)
@@ -509,19 +509,7 @@
             return $ok;
         }
 
-        $ok = $this->getMode('test') ? true : $exists['ID'];
-        if ($this->getMode('out_equal')) {
-            $this->outIf(
-                $ok,
-                Locale::getMessage(
-                    'USER_TYPE_ENTITY_EQUAL',
-                    [
-                        '#NAME#' => $fields['FIELD_NAME'],
-                    ]
-                )
-            );
-        }
-        return $ok;
+        return $this->getMode('test') ? true : $exists['ID'];
     }
 
     /**
Index: local/modules/sprint.migration/lib/helpers/iblockexchangehelper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers;\r\n\r\nclass IblockExchangeHelper extends IblockHelper\r\n{\r\n    protected $cachedProps = [];\r\n\r\n    public function getProperty($iblockId, $code)\r\n    {\r\n        $key = $iblockId . $code;\r\n\r\n        if (!isset($this->cachedProps[$key])) {\r\n            $this->cachedProps[$key] = parent::getProperty($iblockId, $code);\r\n        }\r\n        return $this->cachedProps[$key];\r\n    }\r\n\r\n    /**\r\n     * Структура инфоблоков для построения выпадающего списка\r\n     *\r\n     * @return array\r\n     */\r\n    public function getIblocksStructure()\r\n    {\r\n        $res = [];\r\n        $iblockTypes = $this->getIblockTypes();\r\n        foreach ($iblockTypes as $iblockType) {\r\n            $res[$iblockType['ID']] = [\r\n                'title' => '[' . $iblockType['ID'] . '] ' . $iblockType['LANG'][LANGUAGE_ID]['NAME'],\r\n                'items' => [],\r\n            ];\r\n        }\r\n\r\n        $iblocks = $this->getIblocks();\r\n        foreach ($iblocks as $iblock) {\r\n            if (!empty($iblock['CODE'])) {\r\n                $res[$iblock['IBLOCK_TYPE_ID']]['items'][] = [\r\n                    'title' => '[' . $iblock['CODE'] . '] ' . $iblock['NAME'],\r\n                    'value' => $iblock['ID'],\r\n                ];\r\n            }\r\n        }\r\n\r\n        return $res;\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     *\r\n     * @return array\r\n     */\r\n    public function getIblockPropertiesStructure($iblockId)\r\n    {\r\n        $props = $this->exportProperties($iblockId);\r\n\r\n        $res = [];\r\n        foreach ($props as $prop) {\r\n            $res[] = [\r\n                'title' => '[' . $prop['CODE'] . '] ' . $prop['NAME'],\r\n                'value' => $prop['CODE'],\r\n            ];\r\n        }\r\n        return $res;\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     *\r\n     * @return array\r\n     */\r\n    public function getIblockElementFieldsStructure($iblockId)\r\n    {\r\n        $fields = $this->exportIblockElementFields($iblockId);\r\n\r\n        $res = [];\r\n        foreach ($fields as $fieldName => $field) {\r\n            $res[] = [\r\n                'title' => '[' . $fieldName . '] ' . $field['NAME'],\r\n                'value' => $fieldName,\r\n            ];\r\n        }\r\n        return $res;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/iblockexchangehelper.php b/local/modules/sprint.migration/lib/helpers/iblockexchangehelper.php
--- a/local/modules/sprint.migration/lib/helpers/iblockexchangehelper.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/iblockexchangehelper.php	(date 1670844554000)
@@ -2,6 +2,8 @@
 
 namespace Sprint\Migration\Helpers;
 
+use Sprint\Migration\Exceptions\HelperException;
+
 class IblockExchangeHelper extends IblockHelper
 {
     protected $cachedProps = [];
@@ -82,4 +84,74 @@
         }
         return $res;
     }
+
+    /**
+     * @throws HelperException
+     */
+    public function getSectionIdByUniqName($iblockId, $uniqName)
+    {
+        if (is_numeric($uniqName)) {
+            return $uniqName;
+        }
+
+        if (is_string($uniqName)) {
+            list($sectionName, $depthLevel, $code) = explode('|', $uniqName);
+            $uniqName = [];
+            if ($sectionName) {
+                $uniqName['NAME'] = $sectionName;
+            }
+            if ($depthLevel) {
+                $uniqName['DEPTH_LEVEL'] = $depthLevel;
+            }
+            if ($code) {
+                $uniqName['CODE'] = $code;
+            }
+        }
+
+        return $this->getSectionIdByUniqFilter($iblockId, $uniqName);
+    }
+
+    /**
+     * @throws HelperException
+     */
+    public function getElementIdByUniqName($iblockId, $uniqName)
+    {
+        if (is_numeric($uniqName)) {
+            return $uniqName;
+        }
+
+        if (is_string($uniqName)) {
+            list($elementName, $xmlId, $code) = explode('|', $uniqName);
+            $uniqName = [];
+            if ($elementName) {
+                $uniqName['NAME'] = $elementName;
+            }
+            if ($xmlId) {
+                $uniqName['XML_ID'] = $xmlId;
+            }
+            if ($code) {
+                $uniqName['CODE'] = $code;
+            }
+        }
+
+        return $this->getElementIdByUniqFilter($iblockId, $uniqName);
+    }
+
+    /**
+     * @throws HelperException
+     */
+    public function getSectionUniqNameById($iblockId, $sectionId)
+    {
+        $filter = $this->getSectionUniqFilterById($iblockId, $sectionId);
+        return $filter['NAME'] . '|' . $filter['DEPTH_LEVEL'] . '|' . $filter['CODE'];
+    }
+
+    /**
+     * @throws HelperException
+     */
+    public function getElementUniqNameById($iblockId, $elementId)
+    {
+        $filter = $this->getElementUniqFilterById($iblockId, $elementId);
+        return $filter['NAME'] . '|' . $filter['XML_ID'] . '|' . $filter['CODE'];
+    }
 }
Index: local/modules/sprint.migration/lib/helpers/useroptionshelper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers;\r\n\r\nuse CGridOptions;\r\nuse CUserOptions;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Helper;\r\nuse Sprint\\Migration\\Helpers\\Traits\\UserOptions\\IblockTrait;\r\nuse Sprint\\Migration\\Helpers\\Traits\\UserOptions\\UserGroupTrait;\r\nuse Sprint\\Migration\\Helpers\\Traits\\UserOptions\\UserTrait;\r\nuse Sprint\\Migration\\Locale;\r\n\r\n/*\r\nExample $formData for buildForm\r\n\r\n$formData = [\r\n    'Tab1' => [\r\n        'ACTIVE' => 'Активность',\r\n        'ACTIVE_FROM' => '',\r\n        'ACTIVE_TO' => '',\r\n        'NAME' => 'Название',\r\n        'CODE' => 'Символьный код',\r\n        'SORT' => '',\r\n    ],\r\n    'Tab2' => [\r\n        'PREVIEW_TEXT' => '',\r\n        'PROPERTY_LINK' => '',\r\n    ],\r\n];\r\n\r\n\r\nExample $data for listForm\r\n$data = [\r\n    'columns' => [\r\n        'LOGIN',\r\n        'ACTIVE',\r\n        'TIMESTAMP_X',\r\n        'NAME',\r\n        'LAST_NAME',\r\n        'EMAIL',\r\n        'ID',\r\n    ],\r\n    'page_size' => 20,\r\n    'order' => 'desc',\r\n    'by' => 'timestamp_x',\r\n];\r\n*/\r\n\r\nclass UserOptionsHelper extends Helper\r\n{\r\n    use IblockTrait;\r\n    use UserTrait;\r\n    use UserGroupTrait;\r\n\r\n    /**\r\n     * @param array $params\r\n     * @throws HelperException\r\n     * @return array|bool|mixed\r\n     */\r\n    public function exportList($params = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $params, ['name']);\r\n\r\n        $params = array_merge(\r\n            [\r\n                'name' => '',\r\n                'category' => 'list',\r\n            ],\r\n            $params\r\n        );\r\n\r\n        $option = CUserOptions::GetOption(\r\n            $params['category'],\r\n            $params['name'],\r\n            false,\r\n            false\r\n        );\r\n\r\n        if (!$option || empty($option['columns'])) {\r\n            return [];\r\n        }\r\n\r\n        $option = array_merge(\r\n            [\r\n                'page_size' => 20,\r\n                'order' => 'desc',\r\n                'by' => 'timestamp_x',\r\n            ],\r\n            $option\r\n        );\r\n\r\n        $option['columns'] = $this->revertCodesFromColumns($option['columns']);\r\n\r\n        return $option;\r\n    }\r\n\r\n    /**\r\n     * @param array $data\r\n     * @param array $params\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function buildList($data = [], $params = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $params, ['name']);\r\n\r\n        /** @compability with old format */\r\n        if (!isset($data['columns'])) {\r\n            $data = [\r\n                'columns' => is_array($data) ? $data : [],\r\n                'page_size' => isset($params['page_size']) ? $params['page_size'] : '',\r\n                'order' => isset($params['order']) ? $params['order'] : '',\r\n                'by' => isset($params['by']) ? $params['by'] : '',\r\n            ];\r\n        }\r\n\r\n        $params = array_merge(\r\n            [\r\n                'name' => '',\r\n                'category' => 'list',\r\n            ],\r\n            $params\r\n        );\r\n\r\n        $data = array_merge(\r\n            [\r\n                'columns' => [],\r\n                'page_size' => 20,\r\n                'order' => 'desc',\r\n                'by' => 'timestamp_x',\r\n            ],\r\n            $data\r\n        );\r\n\r\n        if (empty($data) || empty($data['columns'])) {\r\n            CUserOptions::DeleteOptionsByName($params['category'], $params['name']);\r\n            return true;\r\n        }\r\n\r\n        $value = [\r\n            'columns' => $this->transformCodesToColumns($data['columns']),\r\n            'page_size' => $params['page_size'],\r\n            'order' => $params['order'],\r\n            'by' => $params['by'],\r\n        ];\r\n\r\n        CUserOptions::DeleteOptionsByName(\r\n            $params['category'],\r\n            $params['name']\r\n        );\r\n\r\n        CUserOptions::SetOption(\r\n            $params['category'],\r\n            $params['name'],\r\n            $value,\r\n            true\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param array $data\r\n     * @param array $params\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function saveList($data = [], $params = [])\r\n    {\r\n        $exists = $this->exportList($params);\r\n        if ($this->hasDiff($exists, $data)) {\r\n            $ok = $this->getMode('test') ? true : $this->buildList($data, $params);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'USER_OPTION_LIST_CREATED',\r\n                    [\r\n                        '#NAME#' => $params['name'],\r\n                    ]\r\n                )\r\n            );\r\n            $this->outDiffIf($ok, $exists, $data);\r\n            return $ok;\r\n        } else {\r\n            if ($this->getMode('out_equal')) {\r\n\r\n                $this->out(\r\n                    Locale::getMessage(\r\n                        'USER_OPTION_LIST_EQUAL',\r\n                        [\r\n                            '#NAME#' => $params['name'],\r\n                        ]\r\n                    )\r\n                );\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public function exportGrid($gridId)\r\n    {\r\n        $params = CUserOptions::GetOption(\r\n            \"main.interface.grid\",\r\n            $gridId,\r\n            []\r\n        );\r\n        if (!empty($params)) {\r\n            $options = (new CGridOptions($gridId))->GetOptions();\r\n\r\n            foreach ($options['views'] as $viewCode => $view) {\r\n                $view['columns'] = $this->revertCodesFromColumns($view['columns']);\r\n                $options['views'][$viewCode] = $view;\r\n            }\r\n\r\n            return $options;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    public function buildGrid($gridId, $options = [])\r\n    {\r\n        foreach ($options['views'] as $viewCode => $view) {\r\n            $view['columns'] = $this->transformCodesToColumns($view['columns']);\r\n            $options['views'][$viewCode] = $view;\r\n        }\r\n\r\n        CUserOptions::DeleteOptionsByName(\r\n            'main.interface.grid',\r\n            $gridId\r\n        );\r\n        CUserOptions::setOption(\r\n            \"main.interface.grid\",\r\n            $gridId,\r\n            $options,\r\n            true\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    public function saveGrid($gridId, $params = [])\r\n    {\r\n        $exists = $this->exportGrid($gridId);\r\n        if ($this->hasDiff($exists, $params)) {\r\n            $ok = $this->getMode('test') ? true : $this->buildGrid($gridId, $params);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'USER_OPTION_GRID_CREATED',\r\n                    [\r\n                        '#NAME#' => $gridId,\r\n                    ]\r\n                )\r\n            );\r\n            $this->outDiffIf($ok, $exists, $params);\r\n            return $ok;\r\n        } else {\r\n            if ($this->getMode('out_equal')) {\r\n                $this->out(\r\n                    Locale::getMessage(\r\n                        'USER_OPTION_GRID_EQUAL',\r\n                        [\r\n                            '#NAME#' => $gridId,\r\n                        ]\r\n                    )\r\n                );\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param array $params\r\n     * @throws HelperException\r\n     * @return array\r\n     */\r\n    public function exportForm($params = [])\r\n    {\r\n        /** @compability */\r\n        if (isset($params['name_prefix'])) {\r\n            $this->throwException(__METHOD__, 'name_prefix is no longer supported, see examples');\r\n        }\r\n\r\n        $params = array_merge(\r\n            [\r\n                'name' => '',\r\n                'category' => 'form',\r\n            ],\r\n            $params\r\n        );\r\n\r\n        $option = CUserOptions::GetOption(\r\n            $params['category'],\r\n            $params['name'],\r\n            false,\r\n            false\r\n        );\r\n\r\n        $extractedTabs = [];\r\n\r\n        if (!$option || empty($option['tabs'])) {\r\n            return $extractedTabs;\r\n        }\r\n\r\n        $optionTabs = explode(';', $option['tabs']);\r\n\r\n        foreach ($optionTabs as $tabStrings) {\r\n            $extractedFields = [];\r\n            $tabTitle = '';\r\n            $tabId = '';\r\n\r\n            $columnString = explode(',', $tabStrings);\r\n\r\n            foreach ($columnString as $fieldIndex => $fieldString) {\r\n                if (!strpos($fieldString, '#')) {\r\n                    continue;\r\n                }\r\n\r\n                list($fieldCode, $fieldTitle) = explode('#', $fieldString);\r\n\r\n                $fieldCode = str_replace('--', '', strval($fieldCode));\r\n                $fieldTitle = str_replace('--', '', strval($fieldTitle));\r\n\r\n                $fieldCode = trim($fieldCode, '*');\r\n                $fieldTitle = trim($fieldTitle, '*');\r\n\r\n                if ($fieldIndex == 0) {\r\n                    $tabTitle = $fieldTitle;\r\n                    $tabId = $fieldCode;\r\n                } else {\r\n                    $fieldCode = $this->revertCode($fieldCode);\r\n                    $extractedFields[$fieldCode] = $fieldTitle;\r\n                }\r\n            }\r\n\r\n            if ($tabTitle) {\r\n                $extractedTabs[$tabTitle . '|' . $tabId] = $extractedFields;\r\n            }\r\n        }\r\n\r\n        return $extractedTabs;\r\n    }\r\n\r\n    /**\r\n     * @param array $formData\r\n     * @param array $params\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function buildForm($formData = [], $params = [])\r\n    {\r\n        /** @compability */\r\n        if (isset($params['name_prefix'])) {\r\n            $this->throwException(__METHOD__, 'name_prefix is no longer supported, see examples');\r\n        }\r\n\r\n        $params = array_merge(\r\n            [\r\n                'name' => '',\r\n                'category' => 'form',\r\n            ],\r\n            $params\r\n        );\r\n\r\n        if (empty($formData)) {\r\n            CUserOptions::DeleteOptionsByName(\r\n                $params['category'],\r\n                $params['name']\r\n            );\r\n            return true;\r\n        }\r\n\r\n        $tabIndex = 0;\r\n        $tabVals = [];\r\n\r\n        foreach ($formData as $tabTitle => $fields) {\r\n            list($tabTitle, $tabId) = explode('|', $tabTitle);\r\n\r\n            if (!$tabId) {\r\n                $tabId = 'edit' . ($tabIndex + 1);\r\n            }\r\n\r\n            $tabId = ($tabIndex == 0) ? $tabId : '--' . $tabId;\r\n\r\n            $tabVals[$tabIndex][] = $tabId . '--#--' . $tabTitle . '--';\r\n\r\n            foreach ($fields as $fieldKey => $fieldValue) {\r\n                if (is_numeric($fieldKey)) {\r\n                    /** @compability */\r\n                    list($fcode, $ftitle) = explode('|', $fieldValue);\r\n                } else {\r\n                    $fcode = $fieldKey;\r\n                    $ftitle = $fieldValue;\r\n                }\r\n\r\n                $fcode = $this->transformCode($fcode);\r\n                $ftitle = $this->prepareTitle($fcode, $ftitle);\r\n\r\n                $tabVals[$tabIndex][] = '--' . $fcode . '--#--' . $ftitle . '--';\r\n            }\r\n\r\n            $tabIndex++;\r\n        }\r\n\r\n        $opts = [];\r\n        foreach ($tabVals as $fields) {\r\n            $opts[] = implode(',', $fields);\r\n        }\r\n\r\n        $opts = implode(';', $opts) . ';--';\r\n\r\n        $value = [\r\n            'tabs' => $opts,\r\n        ];\r\n\r\n        CUserOptions::DeleteOptionsByName(\r\n            $params['category'],\r\n            $params['name']\r\n        );\r\n        CUserOptions::SetOption(\r\n            $params['category'],\r\n            $params['name'],\r\n            $value,\r\n            true\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param array $formData\r\n     * @param array $params\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function saveForm($formData = [], $params = [])\r\n    {\r\n        $exists = $this->exportForm($params);\r\n        if ($this->hasDiffStrict($exists, $formData)) {\r\n            $ok = $this->getMode('test') ? true : $this->buildForm($formData, $params);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'USER_OPTION_FORM_CREATED',\r\n                    [\r\n                        '#NAME#' => $params['name'],\r\n                    ]\r\n                )\r\n            );\r\n            $this->outDiffIf($ok, $exists, $formData);\r\n            return $ok;\r\n        } else {\r\n            if ($this->getMode('out_equal')) {\r\n                $this->out(\r\n                    Locale::getMessage(\r\n                        'USER_OPTION_FORM_EQUAL',\r\n                        [\r\n                            '#NAME#' => $params['name'],\r\n                        ]\r\n                    )\r\n                );\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/useroptionshelper.php b/local/modules/sprint.migration/lib/helpers/useroptionshelper.php
--- a/local/modules/sprint.migration/lib/helpers/useroptionshelper.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/useroptionshelper.php	(date 1670844554000)
@@ -182,20 +182,9 @@
             );
             $this->outDiffIf($ok, $exists, $data);
             return $ok;
-        } else {
-            if ($this->getMode('out_equal')) {
-
-                $this->out(
-                    Locale::getMessage(
-                        'USER_OPTION_LIST_EQUAL',
-                        [
-                            '#NAME#' => $params['name'],
-                        ]
-                    )
-                );
-            }
-            return true;
-        }
+        }
+
+        return true;
     }
 
     public function exportGrid($gridId)
@@ -210,6 +199,7 @@
 
             foreach ($options['views'] as $viewCode => $view) {
                 $view['columns'] = $this->revertCodesFromColumns($view['columns']);
+                $view['custom_names'] = $this->revertCustomNames($view['custom_names']);
                 $options['views'][$viewCode] = $view;
             }
 
@@ -222,6 +212,7 @@
     {
         foreach ($options['views'] as $viewCode => $view) {
             $view['columns'] = $this->transformCodesToColumns($view['columns']);
+            $view['custom_names'] = $this->transformCustomNames($view['custom_names']);
             $options['views'][$viewCode] = $view;
         }
 
@@ -255,19 +246,9 @@
             );
             $this->outDiffIf($ok, $exists, $params);
             return $ok;
-        } else {
-            if ($this->getMode('out_equal')) {
-                $this->out(
-                    Locale::getMessage(
-                        'USER_OPTION_GRID_EQUAL',
-                        [
-                            '#NAME#' => $gridId,
-                        ]
-                    )
-                );
-            }
-            return true;
-        }
+        }
+
+        return true;
     }
 
     /**
@@ -450,18 +431,7 @@
             );
             $this->outDiffIf($ok, $exists, $formData);
             return $ok;
-        } else {
-            if ($this->getMode('out_equal')) {
-                $this->out(
-                    Locale::getMessage(
-                        'USER_OPTION_FORM_EQUAL',
-                        [
-                            '#NAME#' => $params['name'],
-                        ]
-                    )
-                );
-            }
-            return true;
-        }
+        }
+        return true;
     }
 }
Index: local/modules/sprint.migration/lib/helpers/agenthelper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers;\r\n\r\nuse CAgent;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Helper;\r\nuse Sprint\\Migration\\Locale;\r\n\r\nclass AgentHelper extends Helper\r\n{\r\n    /**\r\n     * Получает список агентов по фильтру\r\n     *\r\n     * @param array $filter\r\n     *\r\n     * @return array\r\n     */\r\n    public function getList($filter = [])\r\n    {\r\n        $res = [];\r\n        $dbres = CAgent::GetList([\"MODULE_ID\" => \"ASC\"], $filter);\r\n        while ($item = $dbres->Fetch()) {\r\n            $res[] = $item;\r\n        }\r\n        return $res;\r\n    }\r\n\r\n    /**\r\n     * Получает список агентов по фильтру\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param array $filter\r\n     *\r\n     * @return array\r\n     */\r\n    public function exportAgents($filter = [])\r\n    {\r\n        $agents = $this->getList($filter);\r\n\r\n        $exportAgents = [];\r\n        foreach ($agents as $agent) {\r\n            $exportAgents[] = $this->prepareExportAgent($agent);\r\n        }\r\n\r\n        return $exportAgents;\r\n    }\r\n\r\n    /**\r\n     * Получает агента\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param        $moduleId\r\n     * @param string $name\r\n     *\r\n     * @return bool\r\n     */\r\n    public function exportAgent($moduleId, $name = '')\r\n    {\r\n        $agent = $this->getAgent($moduleId, $name);\r\n        if (empty($agent)) {\r\n            return false;\r\n        }\r\n\r\n        return $this->prepareExportAgent($agent);\r\n    }\r\n\r\n    /**\r\n     * Получает агента\r\n     *\r\n     * @param        $moduleId\r\n     * @param string $name\r\n     *\r\n     * @return array\r\n     */\r\n    public function getAgent($moduleId, $name = '')\r\n    {\r\n        $filter = is_array($moduleId)\r\n            ? $moduleId\r\n            : [\r\n                'MODULE_ID' => $moduleId,\r\n            ];\r\n\r\n        if (!empty($name)) {\r\n            $filter['NAME'] = $name;\r\n        }\r\n\r\n        return CAgent::GetList([\r\n            \"MODULE_ID\" => \"ASC\",\r\n        ], $filter)->Fetch();\r\n    }\r\n\r\n    /**\r\n     * Удаляет агента\r\n     *\r\n     * @param $moduleId\r\n     * @param $name\r\n     *\r\n     * @return bool\r\n     */\r\n    public function deleteAgent($moduleId, $name)\r\n    {\r\n        CAgent::RemoveAgent($name, $moduleId);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Удаляет агента если существует\r\n     *\r\n     * @param $moduleId\r\n     * @param $name\r\n     *\r\n     * @return bool\r\n     */\r\n    public function deleteAgentIfExists($moduleId, $name)\r\n    {\r\n        $item = $this->getAgent($moduleId, $name);\r\n        if (empty($item)) {\r\n            return false;\r\n        }\r\n\r\n        return $this->deleteAgent($moduleId, $name);\r\n    }\r\n\r\n    /**\r\n     * Сохраняет агента\r\n     * Создаст если не было, обновит если существует и отличается\r\n     *\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|mixed\r\n     */\r\n    public function saveAgent($fields = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['MODULE_ID', 'NAME']);\r\n\r\n        $exists = $this->getAgent([\r\n            'MODULE_ID' => $fields['MODULE_ID'],\r\n            'NAME'      => $fields['NAME'],\r\n        ]);\r\n\r\n        $exportExists = $this->prepareExportAgent($exists);\r\n        $fields = $this->prepareExportAgent($fields);\r\n\r\n        if (empty($exists)) {\r\n            $ok = $this->getMode('test') ? true : $this->addAgent($fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'AGENT_CREATED',\r\n                    [\r\n                        '#NAME#' => $fields['NAME'],\r\n                    ]\r\n                )\r\n            );\r\n            return $ok;\r\n        }\r\n\r\n        if (strtotime($fields['NEXT_EXEC']) <= strtotime($exportExists['NEXT_EXEC'])) {\r\n            unset($fields['NEXT_EXEC']);\r\n            unset($exportExists['NEXT_EXEC']);\r\n        }\r\n\r\n        if ($this->hasDiff($exportExists, $fields)) {\r\n            $ok = $this->getMode('test') ? true : $this->updateAgent($fields);\r\n\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'AGENT_UPDATED',\r\n                    [\r\n                        '#NAME#' => $fields['NAME'],\r\n                    ]\r\n                )\r\n            );\r\n\r\n            $this->outDiffIf($ok, $exportExists, $fields);\r\n            return $ok;\r\n        }\r\n\r\n        $ok = $this->getMode('test') ? true : $exists['ID'];\r\n        if ($this->getMode('out_equal')) {\r\n            $this->outIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'AGENT_EQUAL',\r\n                    [\r\n                        '#NAME#' => $fields['NAME'],\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n        return $ok;\r\n    }\r\n\r\n    /**\r\n     * Обновление агента, бросает исключение в случае неудачи\r\n     *\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function updateAgent($fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['MODULE_ID', 'NAME']);\r\n        $this->deleteAgent($fields['MODULE_ID'], $fields['NAME']);\r\n        return $this->addAgent($fields);\r\n    }\r\n\r\n    /**\r\n     * Создание агента, бросает исключение в случае неудачи\r\n     *\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int\r\n     */\r\n    public function addAgent($fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['MODULE_ID', 'NAME']);\r\n\r\n        global $DB;\r\n\r\n        $fields = array_merge([\r\n            'AGENT_INTERVAL' => 86400,\r\n            'ACTIVE'         => 'Y',\r\n            'IS_PERIOD'      => 'N',\r\n            'NEXT_EXEC'      => $DB->GetNowDate(),\r\n            'SORT'           => 100,\r\n        ], $fields);\r\n\r\n        $agentId = CAgent::AddAgent(\r\n            $fields['NAME'],\r\n            $fields['MODULE_ID'],\r\n            $fields['IS_PERIOD'],\r\n            $fields['AGENT_INTERVAL'],\r\n            '',\r\n            $fields['ACTIVE'],\r\n            $fields['NEXT_EXEC'],\r\n            $fields['SORT']\r\n        );\r\n\r\n        if ($agentId) {\r\n            return $agentId;\r\n        }\r\n\r\n        $this->throwApplicationExceptionIfExists(__METHOD__);\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_AGENT_NOT_ADDED',\r\n                [\r\n                    '#NAME#' => $fields['NAME'],\r\n                ]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param $moduleId\r\n     * @param $name\r\n     * @param $interval\r\n     * @param $nextExec\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|mixed\r\n     * @deprecated\r\n     */\r\n    public function replaceAgent($moduleId, $name, $interval, $nextExec)\r\n    {\r\n        return $this->saveAgent([\r\n            'MODULE_ID'      => $moduleId,\r\n            'NAME'           => $name,\r\n            'AGENT_INTERVAL' => $interval,\r\n            'NEXT_EXEC'      => $nextExec,\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @param $moduleId\r\n     * @param $name\r\n     * @param $interval\r\n     * @param $nextExec\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|mixed\r\n     * @deprecated\r\n     */\r\n    public function addAgentIfNotExists($moduleId, $name, $interval, $nextExec)\r\n    {\r\n        return $this->saveAgent([\r\n            'MODULE_ID'      => $moduleId,\r\n            'NAME'           => $name,\r\n            'AGENT_INTERVAL' => $interval,\r\n            'NEXT_EXEC'      => $nextExec,\r\n        ]);\r\n    }\r\n\r\n    protected function prepareExportAgent($item)\r\n    {\r\n        if (empty($item)) {\r\n            return $item;\r\n        }\r\n\r\n        unset($item['ID']);\r\n        unset($item['LOGIN']);\r\n        unset($item['USER_NAME']);\r\n        unset($item['LAST_NAME']);\r\n        unset($item['RUNNING']);\r\n        unset($item['DATE_CHECK']);\r\n        unset($item['LAST_EXEC']);\r\n\r\n        return $item;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/agenthelper.php b/local/modules/sprint.migration/lib/helpers/agenthelper.php
--- a/local/modules/sprint.migration/lib/helpers/agenthelper.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/agenthelper.php	(date 1670844554000)
@@ -179,19 +179,7 @@
             return $ok;
         }
 
-        $ok = $this->getMode('test') ? true : $exists['ID'];
-        if ($this->getMode('out_equal')) {
-            $this->outIf(
-                $ok,
-                Locale::getMessage(
-                    'AGENT_EQUAL',
-                    [
-                        '#NAME#' => $fields['NAME'],
-                    ]
-                )
-            );
-        }
-        return $ok;
+        return $this->getMode('test') ? true : $exists['ID'];
     }
 
     /**
Index: local/modules/sprint.migration/lib/helpers/usergrouphelper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers;\r\n\r\nuse CGroup;\r\nuse CModule;\r\nuse CSite;\r\nuse CTask;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Helper;\r\nuse Sprint\\Migration\\Locale;\r\n\r\nclass UserGroupHelper extends Helper\r\n{\r\n    /**\r\n     * Получает список групп пользователей\r\n     *\r\n     * @param array $filter\r\n     *\r\n     * @return array\r\n     */\r\n    public function getGroups($filter = [])\r\n    {\r\n        $by = 'c_sort';\r\n        $order = 'asc';\r\n\r\n        $res = [];\r\n\r\n        $dbres = CGroup::GetList($by, $order, $filter);\r\n        while ($item = $dbres->Fetch()) {\r\n            $res[] = $this->getGroup($item['ID']);\r\n        }\r\n\r\n        return $res;\r\n    }\r\n\r\n    /**\r\n     * Получает группу пользователей\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param $code\r\n     *\r\n     * @throws HelperException\r\n     * @return array|void\r\n     */\r\n    public function exportGroup($code)\r\n    {\r\n        $item = $this->prepareExportGroup(\r\n            $this->getGroup($code)\r\n        );\r\n\r\n        if (!empty($item['STRING_ID'])) {\r\n            return $item;\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_USER_GROUP_CODE_NOT_FOUND'\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Получает список групп пользователей\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param array $filter\r\n     *\r\n     * @return array\r\n     */\r\n    public function exportGroups($filter = [])\r\n    {\r\n        $items = $this->getGroups($filter);\r\n        $exports = [];\r\n        foreach ($items as $item) {\r\n            if (!empty($item['STRING_ID'])) {\r\n                $exports[] = $this->prepareExportGroup($item);\r\n            }\r\n        }\r\n        return $exports;\r\n    }\r\n\r\n    /**\r\n     * Получает код группы пользователей по id\r\n     *\r\n     * @param int|string  $id\r\n     * @param bool|string $default\r\n     *\r\n     * @return bool|string\r\n     */\r\n    public function getGroupCode($id, $default = false)\r\n    {\r\n        $group = $this->getGroup($id);\r\n        return ($group) ? $group['STRING_ID'] : $default;\r\n    }\r\n\r\n    /**\r\n     * Получает id группы пользователей по id\r\n     *\r\n     * @param int|string  $code\r\n     * @param bool|string $default\r\n     *\r\n     * @return bool|string\r\n     */\r\n    public function getGroupId($code, $default = false)\r\n    {\r\n        $group = $this->getGroup($code);\r\n        return ($group) ? $group['ID'] : $default;\r\n    }\r\n\r\n    /**\r\n     * Получает группу пользователей\r\n     *\r\n     * @param $code int|string - id или код группы\r\n     *\r\n     * @return array|bool\r\n     */\r\n    public function getGroup($code)\r\n    {\r\n        $groupId = is_numeric($code) ? $code : CGroup::GetIDByCode($code);\r\n\r\n        if (empty($groupId)) {\r\n            return false;\r\n        }\r\n\r\n        /* extract SECURITY_POLICY */\r\n        $item = CGroup::GetByID($groupId)->Fetch();\r\n        if (empty($item)) {\r\n            return false;\r\n        }\r\n\r\n        if (!empty($item['SECURITY_POLICY'])) {\r\n            $item['SECURITY_POLICY'] = unserialize($item['SECURITY_POLICY']);\r\n        }\r\n\r\n        if ($item['ID'] == 1) {\r\n            $item['STRING_ID'] = 'administrators';\r\n        } elseif ($item['ID'] == 2) {\r\n            $item['STRING_ID'] = 'everyone';\r\n        }\r\n\r\n        return $item;\r\n    }\r\n\r\n    /**\r\n     * Сохраняет группу\r\n     * Создаст если не было, обновит если существует и отличается\r\n     *\r\n     * @param string $code\r\n     * @param array  $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int|mixed\r\n     */\r\n    public function saveGroup($code, $fields = [])\r\n    {\r\n        $fields['STRING_ID'] = $code;\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['STRING_ID', 'NAME']);\r\n\r\n        $exists = $this->getGroup($fields['STRING_ID']);\r\n        $exportExists = $this->prepareExportGroup($exists);\r\n        $fields = $this->prepareExportGroup($fields);\r\n\r\n        if (empty($exists)) {\r\n            $ok = $this->getMode('test') ? true : $this->addGroup($fields['STRING_ID'], $fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'USER_GROUP_CREATED',\r\n                    [\r\n                        '#NAME#' => $fields['NAME'],\r\n                    ]\r\n                )\r\n            );\r\n            return $ok;\r\n        }\r\n\r\n        if ($this->hasDiff($exportExists, $fields)) {\r\n            $ok = $this->getMode('test') ? true : $this->updateGroup($exists['ID'], $fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'USER_GROUP_UPDATED',\r\n                    [\r\n                        '#NAME#' => $fields['NAME'],\r\n                    ]\r\n                )\r\n            );\r\n            $this->outDiffIf($ok, $exportExists, $fields);\r\n            return $ok;\r\n        }\r\n\r\n        $ok = $this->getMode('test') ? true : $exists['ID'];\r\n        if ($this->getMode('out_equal')) {\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'USER_GROUP_EQUAL',\r\n                    [\r\n                        '#NAME#' => $fields['NAME'],\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n        return $ok;\r\n    }\r\n\r\n    /**\r\n     * Добаляет группу пользователей если она не существует\r\n     *\r\n     * @param       $code\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int\r\n     */\r\n    public function addGroupIfNotExists($code, $fields = [])\r\n    {\r\n        $groupId = $this->getGroupId($code);\r\n        if ($groupId) {\r\n            return intval($groupId);\r\n        }\r\n\r\n        return $this->addGroup($code, $fields);\r\n    }\r\n\r\n    /**\r\n     * Обновляет группу пользователей если она существует\r\n     *\r\n     * @param       $code\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int\r\n     */\r\n    public function updateGroupIfExists($code, $fields = [])\r\n    {\r\n        $groupId = $this->getGroupId($code);\r\n        if (!$groupId) {\r\n            return false;\r\n        }\r\n\r\n        return $this->updateGroup($groupId, $fields);\r\n    }\r\n\r\n    /**\r\n     * Добавляет группу пользователей\r\n     *\r\n     * @param       $code\r\n     * @param array $fields , , обязательные параметры - название групы\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function addGroup($code, $fields = [])\r\n    {\r\n        $fields['STRING_ID'] = $code;\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['STRING_ID', 'NAME']);\r\n\r\n        $group = new CGroup;\r\n        $groupId = $group->Add($this->prepareFields($fields));\r\n\r\n        if ($groupId) {\r\n            return intval($groupId);\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $group->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * Обновляет группу пользователей\r\n     *\r\n     * @param       $groupId\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function updateGroup($groupId, $fields = [])\r\n    {\r\n        if (empty($fields)) {\r\n            $this->throwException(\r\n                __METHOD__,\r\n                Locale::getMessage(\r\n                    'ERR_SET_FIELDS_FOR_UPDATE_GROUP'\r\n                )\r\n            );\r\n        }\r\n\r\n        $group = new CGroup;\r\n        if ($group->Update($groupId, $this->prepareFields($fields))) {\r\n            return intval($groupId);\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $group->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * Удаляет группу пользователей\r\n     *\r\n     * @param $code\r\n     *\r\n     * @return bool\r\n     */\r\n    public function deleteGroup($code)\r\n    {\r\n        $groupId = $this->getGroupId($code);\r\n        if (empty($groupId)) {\r\n            return false;\r\n        }\r\n\r\n        $group = new CGroup;\r\n        $group->Delete($groupId);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param array $filter\r\n     *\r\n     * @return array\r\n     * @deprecated\r\n     */\r\n    public function getGroupsByFilter($filter = [])\r\n    {\r\n        return $this->getGroups($filter);\r\n    }\r\n\r\n    /**\r\n     * Cброс настроек доступа группы\r\n     *\r\n     * @param $groupId\r\n     */\r\n    public function deleteGroupPermissions($groupId)\r\n    {\r\n        global $APPLICATION;\r\n\r\n        $moduleIds = [];\r\n        $dbres = CModule::GetList();\r\n        while ($item = $dbres->Fetch()) {\r\n            $moduleIds[] = $item['ID'];\r\n        }\r\n\r\n        $by = \"sort\";\r\n        $order = \"asc\";\r\n\r\n        $siteIds = [];\r\n        $dbres = CSite::GetList($by, $order, [\"ACTIVE\" => \"Y\"]);\r\n        while ($item = $dbres->GetNext()) {\r\n            $siteIds[] = $item[\"ID\"];\r\n        }\r\n\r\n        foreach ($moduleIds as $moduleId) {\r\n            $APPLICATION->DelGroupRight($moduleId, [$groupId], false);\r\n            foreach ($siteIds as $siteId) {\r\n                $APPLICATION->DelGroupRight($moduleId, [$groupId], $siteId);\r\n            }\r\n        }\r\n\r\n        CGroup::SetSubordinateGroups($groupId);\r\n\r\n        $tasksMap = CGroup::GetTasks($groupId, true);\r\n        foreach ($tasksMap as $moduleId => $taskId) {\r\n            CTask::Delete($taskId, false);\r\n        }\r\n    }\r\n\r\n    protected function prepareExportGroup($item)\r\n    {\r\n        if (empty($item)) {\r\n            return $item;\r\n        }\r\n\r\n        unset($item['ID']);\r\n        unset($item['TIMESTAMP_X']);\r\n\r\n        return $item;\r\n    }\r\n\r\n    protected function prepareFields($fields)\r\n    {\r\n        if (!empty($fields['SECURITY_POLICY']) && is_array($fields['SECURITY_POLICY'])) {\r\n            $fields['SECURITY_POLICY'] = serialize($fields['SECURITY_POLICY']);\r\n        }\r\n\r\n        return $fields;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/usergrouphelper.php b/local/modules/sprint.migration/lib/helpers/usergrouphelper.php
--- a/local/modules/sprint.migration/lib/helpers/usergrouphelper.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/usergrouphelper.php	(date 1670844554000)
@@ -191,19 +191,7 @@
             return $ok;
         }
 
-        $ok = $this->getMode('test') ? true : $exists['ID'];
-        if ($this->getMode('out_equal')) {
-            $this->outNoticeIf(
-                $ok,
-                Locale::getMessage(
-                    'USER_GROUP_EQUAL',
-                    [
-                        '#NAME#' => $fields['NAME'],
-                    ]
-                )
-            );
-        }
-        return $ok;
+        return $this->getMode('test') ? true : $exists['ID'];
     }
 
     /**
Index: local/modules/sprint.migration/lib/helpers/optionhelper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers;\r\n\r\nuse Bitrix\\Main\\Config\\Option;\r\nuse Bitrix\\Main\\ModuleManager;\r\nuse Exception;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Helper;\r\nuse Sprint\\Migration\\Locale;\r\n\r\nclass OptionHelper extends Helper\r\n{\r\n    public function isEnabled()\r\n    {\r\n        return (\r\n            class_exists('\\Bitrix\\Main\\ModuleManager') && class_exists('\\Bitrix\\Main\\Entity\\DataManager') && class_exists('\\Bitrix\\Main\\Config\\Option')\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return array|mixed\r\n     */\r\n    public function getModules()\r\n    {\r\n        return ModuleManager::getInstalledModules();\r\n    }\r\n\r\n    /**\r\n     * @param array $filter\r\n     *\r\n     * @throws HelperException\r\n     * @return array\r\n     */\r\n    public function getOptions($filter = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $filter, ['MODULE_ID']);\r\n\r\n        try {\r\n            $values = Option::getForModule($filter['MODULE_ID']);\r\n        } catch (Exception $e) {\r\n            $values = [];\r\n        }\r\n\r\n        $result = [];\r\n        foreach ($values as $optionName => $value) {\r\n            $result[] = $this->prepareOption([\r\n                'MODULE_ID' => $filter['MODULE_ID'],\r\n                'NAME'      => $optionName,\r\n                'VALUE'     => $value,\r\n            ]);\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * @param array $filter\r\n     *\r\n     * @throws HelperException\r\n     * @return array|false\r\n     */\r\n    public function getOption($filter = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $filter, ['MODULE_ID', 'NAME']);\r\n\r\n        try {\r\n            $value = Option::get($filter['MODULE_ID'], $filter['NAME']);\r\n            return $this->prepareOption([\r\n                'MODULE_ID' => $filter['MODULE_ID'],\r\n                'NAME'      => $filter['NAME'],\r\n                'VALUE'     => $value,\r\n            ]);\r\n        } catch (Exception $e) {\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function saveOption($fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['MODULE_ID', 'NAME']);\r\n\r\n        $exists = $this->getOption([\r\n            'MODULE_ID' => $fields['MODULE_ID'],\r\n            'NAME'      => $fields['NAME'],\r\n        ]);\r\n\r\n        if (empty($exists)) {\r\n            $ok = $this->getMode('test') || $this->setOption($fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'OPTION_CREATED',\r\n                    [\r\n                        '#NAME#' => $fields['MODULE_ID'] . ':' . $fields['NAME'],\r\n                    ]\r\n                )\r\n            );\r\n            return $ok;\r\n        }\r\n\r\n        if ($this->hasDiff($exists, $fields)) {\r\n            $ok = $this->getMode('test') || $this->setOption($fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'OPTION_UPDATED',\r\n                    [\r\n                        '#NAME#' => $fields['MODULE_ID'] . ':' . $fields['NAME'],\r\n                    ]\r\n                )\r\n            );\r\n            $this->outDiffIf($ok, $exists, $fields);\r\n            return $ok;\r\n        }\r\n\r\n        $ok = true;\r\n        if ($this->getMode('out_equal')) {\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'OPTION_EQUAL',\r\n                    [\r\n                        '#NAME#' => $fields['MODULE_ID'] . ':' . $fields['NAME'],\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n        return $ok;\r\n    }\r\n\r\n    /**\r\n     * @param array $filter\r\n     *\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function deleteOptions($filter = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $filter, ['MODULE_ID']);\r\n\r\n        $params = [];\r\n\r\n        if (isset($filter['NAME'])) {\r\n            $params['name'] = $filter['NAME'];\r\n        }\r\n\r\n        try {\r\n            Option::delete($filter['MODULE_ID'], $params);\r\n            return true;\r\n        } catch (Exception $e) {\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param $fields\r\n     *\r\n     * @return bool\r\n     */\r\n    protected function setOption($fields)\r\n    {\r\n        $fields = $this->revertOption($fields);\r\n        try {\r\n            Option::set($fields['MODULE_ID'], $fields['NAME'], $fields['VALUE']);\r\n            return true;\r\n        } catch (Exception $e) {\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param $item\r\n     *\r\n     * @return array\r\n     */\r\n    protected function prepareOption($item)\r\n    {\r\n        if (!empty($item['VALUE']) && !is_numeric($item['VALUE'])) {\r\n            if ($this->isSerialize($item['VALUE'])) {\r\n                $item['VALUE'] = unserialize($item['VALUE']);\r\n            } elseif ($this->isJson($item['VALUE'])) {\r\n                $item['VALUE'] = json_decode($item['VALUE'], true);\r\n                $item['TYPE'] = 'json';\r\n            }\r\n        }\r\n        return $item;\r\n    }\r\n\r\n    protected function revertOption($item)\r\n    {\r\n        $type = '';\r\n        if (isset($item['TYPE'])) {\r\n            $type = $item['TYPE'];\r\n            unset($item['TYPE']);\r\n        }\r\n\r\n        if (is_array($item['VALUE'])) {\r\n            if ($type == 'json') {\r\n                $item['VALUE'] = json_encode($item['VALUE']);\r\n            } else {\r\n                $item['VALUE'] = serialize($item['VALUE']);\r\n            }\r\n        }\r\n\r\n        return $item;\r\n    }\r\n\r\n    protected function isSerialize($string)\r\n    {\r\n        return (unserialize($string) !== false || $string == 'b:0;');\r\n    }\r\n\r\n    protected function isJson($string)\r\n    {\r\n        json_decode($string);\r\n        return (json_last_error() == JSON_ERROR_NONE);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/optionhelper.php b/local/modules/sprint.migration/lib/helpers/optionhelper.php
--- a/local/modules/sprint.migration/lib/helpers/optionhelper.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/optionhelper.php	(date 1670844554000)
@@ -121,19 +121,7 @@
             return $ok;
         }
 
-        $ok = true;
-        if ($this->getMode('out_equal')) {
-            $this->outNoticeIf(
-                $ok,
-                Locale::getMessage(
-                    'OPTION_EQUAL',
-                    [
-                        '#NAME#' => $fields['MODULE_ID'] . ':' . $fields['NAME'],
-                    ]
-                )
-            );
-        }
-        return $ok;
+        return true;
     }
 
     /**
Index: local/modules/sprint.migration/lib/helpers/hlblockhelper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers;\r\n\r\nuse Bitrix\\Highloadblock\\HighloadBlockLangTable;\r\nuse Bitrix\\Highloadblock\\HighloadBlockRightsTable;\r\nuse Bitrix\\Highloadblock\\HighloadBlockTable;\r\nuse Bitrix\\Main\\Entity\\DataManager;\r\nuse Bitrix\\Main\\Entity\\ExpressionField;\r\nuse CTask;\r\nuse Exception;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Helper;\r\nuse Sprint\\Migration\\Locale;\r\n\r\nclass HlblockHelper extends Helper\r\n{\r\n    /**\r\n     * HlblockHelper constructor.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function isEnabled()\r\n    {\r\n        return $this->checkModules(['highloadblock']);\r\n    }\r\n\r\n    /**\r\n     * Получает список highload-блоков\r\n     *\r\n     * @param array $filter\r\n     *\r\n     * @throws HelperException\r\n     * @return array\r\n     */\r\n    public function getHlblocks($filter = [])\r\n    {\r\n        $result = [];\r\n        try {\r\n            $dbres = HighloadBlockTable::getList(\r\n                [\r\n                    'select' => ['*'],\r\n                    'filter' => $filter,\r\n                ]\r\n            );\r\n            while ($hlblock = $dbres->fetch()) {\r\n                $result[] = $this->prepareHlblock($hlblock);\r\n            }\r\n        } catch (Exception $e) {\r\n            $this->throwException(__METHOD__, $e);\r\n        }\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * Получает список highload-блоков\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param array $filter\r\n     *\r\n     * @throws HelperException\r\n     * @return array\r\n     */\r\n    public function exportHlblocks($filter = [])\r\n    {\r\n        $items = $this->getHlblocks($filter);\r\n\r\n        $export = [];\r\n        foreach ($items as $item) {\r\n            $export[] = $this->prepareExportHlblock($item);\r\n        }\r\n\r\n        return $export;\r\n    }\r\n\r\n    /**\r\n     * Получает список полей highload-блока\r\n     *\r\n     * @param $hlblockName int|string|array - id, имя или фильтр\r\n     *\r\n     * @throws HelperException\r\n     * @return array\r\n     */\r\n    public function getFields($hlblockName)\r\n    {\r\n        $entityHelper = new UserTypeEntityHelper();\r\n        $entityHelper->setMode($this);\r\n        return $entityHelper->getUserTypeEntities(\r\n            $this->getEntityId($hlblockName)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Получает поле highload-блока\r\n     *\r\n     * @param $hlblockName\r\n     * @param $fieldName\r\n     *\r\n     * @throws HelperException\r\n     * @return array|bool\r\n     */\r\n    public function getField($hlblockName, $fieldName)\r\n    {\r\n        $entityHelper = new UserTypeEntityHelper();\r\n        $entityHelper->setMode($this);\r\n\r\n        return $entityHelper->getUserTypeEntity(\r\n            $this->getEntityId($hlblockName),\r\n            $fieldName\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockName\r\n     * @param $field\r\n     *\r\n     * @throws HelperException\r\n     * @return string|void\r\n     */\r\n    public function getFieldUid($hlblockName, $field)\r\n    {\r\n        $entityHelper = new UserTypeEntityHelper();\r\n        $entityHelper->setMode($this);\r\n\r\n        if (!is_array($field)) {\r\n            //на вход пришел id или название поля\r\n            if (is_numeric($field)) {\r\n                $field = $entityHelper->getUserTypeEntityById($field);\r\n            } else {\r\n                $field = $entityHelper->getUserTypeEntity(\r\n                    $this->getEntityId($hlblockName),\r\n                    $field\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!empty($field['FIELD_NAME'])) {\r\n            return $field['FIELD_NAME'];\r\n        }\r\n        $this->throwException(__METHOD__, Locale::getMessage('ERR_HLBLOCK_FIELD_NOT_FOUND'));\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockName\r\n     * @param $fieldName\r\n     *\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function getFieldType($hlblockName, $fieldName)\r\n    {\r\n        $field = $this->getField($hlblockName, $fieldName);\r\n        return $field['USER_TYPE_ID'];\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockName\r\n     * @param $fieldName\r\n     *\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function isFieldMultiple($hlblockName, $fieldName)\r\n    {\r\n        $field = $this->getField($hlblockName, $fieldName);\r\n        return ($field['MULTIPLE'] == 'Y');\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockName\r\n     * @param $fieldName\r\n     * @param $xmlId\r\n     *\r\n     * @throws HelperException\r\n     * @return mixed|string\r\n     */\r\n    public function getFieldEnumIdByXmlId($hlblockName, $fieldName, $xmlId)\r\n    {\r\n        $field = $this->getField($hlblockName, $fieldName);\r\n        if (empty($field['ENUM_VALUES']) || !is_array($field['ENUM_VALUES'])) {\r\n            return '';\r\n        }\r\n\r\n        foreach ($field['ENUM_VALUES'] as $val) {\r\n            if ($val['XML_ID'] == $xmlId) {\r\n                return $val['ID'];\r\n            }\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockName\r\n     * @param $fieldName\r\n     * @param $id\r\n     *\r\n     * @throws HelperException\r\n     * @return mixed|string\r\n     */\r\n    public function getFieldEnumXmlIdById($hlblockName, $fieldName, $id)\r\n    {\r\n        $field = $this->getField($hlblockName, $fieldName);\r\n        if (empty($field['ENUM_VALUES']) || !is_array($field['ENUM_VALUES'])) {\r\n            return '';\r\n        }\r\n\r\n        foreach ($field['ENUM_VALUES'] as $val) {\r\n            if ($val['ID'] == $id) {\r\n                return $val['XML_ID'];\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockName\r\n     * @param $fieldUid\r\n     *\r\n     * @throws HelperException\r\n     * @return int\r\n     */\r\n    public function getFieldIdByUid($hlblockName, $fieldUid)\r\n    {\r\n        $fieldId = 0;\r\n\r\n        if (empty($fieldUid)) {\r\n            return $fieldId;\r\n        }\r\n\r\n        if (is_numeric($fieldUid)) {\r\n            return $fieldUid;\r\n        }\r\n\r\n        $field = $this->getField($hlblockName, $fieldUid);\r\n\r\n        return ($field) ? (int)$field['ID'] : 0;\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockName\r\n     *\r\n     * @throws HelperException\r\n     * @return string\r\n     */\r\n    public function getEntityId($hlblockName)\r\n    {\r\n        $hlblockId = is_numeric($hlblockName) ? $hlblockName : $this->getHlblockId($hlblockName);\r\n        return 'HLBLOCK_' . $hlblockId;\r\n    }\r\n\r\n    /**\r\n     * Сохраняет поле highload-блока\r\n     * Создаст если не было, обновит если существует и отличается\r\n     *\r\n     * @param       $hlblockName int|string|array - id, имя или фильтр\r\n     * @param array $field\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int|mixed\r\n     */\r\n    public function saveField($hlblockName, $field = [])\r\n    {\r\n        $field['ENTITY_ID'] = $this->getEntityId($hlblockName);\r\n\r\n        $entityHelper = new UserTypeEntityHelper();\r\n        $entityHelper->setMode($this);\r\n        return $entityHelper->saveUserTypeEntity($field);\r\n    }\r\n\r\n    /**\r\n     * Сохраняет highload-блок\r\n     * Создаст если не было, обновит если существует и отличается\r\n     *\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int|mixed\r\n     */\r\n    public function saveHlblock($fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['NAME']);\r\n\r\n        $exists = $this->getHlblock($fields['NAME']);\r\n        $exportExists = $this->prepareExportHlblock($exists);\r\n        $fields = $this->prepareExportHlblock($fields);\r\n\r\n        if (empty($exists)) {\r\n            $ok = $this->getMode('test') ? true : $this->addHlblock($fields);\r\n\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'HLBLOCK_CREATED',\r\n                    [\r\n                        '#NAME#' => $fields['NAME'],\r\n                    ]\r\n                )\r\n            );\r\n\r\n            return $ok;\r\n        }\r\n\r\n        if ($this->hasDiff($exportExists, $fields)) {\r\n            $ok = $this->getMode('test') ? true : $this->updateHlblock($exists['ID'], $fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'HLBLOCK_UPDATED',\r\n                    [\r\n                        '#NAME#' => $fields['NAME'],\r\n                    ]\r\n                )\r\n            );\r\n\r\n            $this->outDiffIf($ok, $exportExists, $fields);\r\n            return $ok;\r\n        }\r\n\r\n        $ok = $this->getMode('test') ? true : $exists['ID'];\r\n        if ($this->getMode('out_equal')) {\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'HLBLOCK_EQUAL',\r\n                    [\r\n                        '#NAME#' => $fields['NAME'],\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n        return $ok;\r\n    }\r\n\r\n    /**\r\n     * Удаляет поле highload-блока\r\n     *\r\n     * @param $hlblockName\r\n     * @param $fieldName\r\n     *\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function deleteField($hlblockName, $fieldName)\r\n    {\r\n        $entityHelper = new UserTypeEntityHelper();\r\n        $entityHelper->setMode($this);\r\n        return $entityHelper->deleteUserTypeEntity(\r\n            $this->getEntityId($hlblockName),\r\n            $fieldName\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Получает список полей highload-блока\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param $hlblockName\r\n     *\r\n     * @throws HelperException\r\n     * @return array\r\n     */\r\n    public function exportFields($hlblockName)\r\n    {\r\n        $entityHelper = new UserTypeEntityHelper();\r\n        $entityHelper->setMode($this);\r\n\r\n        $fields = $entityHelper->exportUserTypeEntities(\r\n            $this->getEntityId($hlblockName)\r\n        );\r\n\r\n        foreach ($fields as $index => $field) {\r\n            unset($field['ENTITY_ID']);\r\n            $fields[$index] = $field;\r\n        }\r\n\r\n        return $fields;\r\n    }\r\n\r\n    /**\r\n     * Получает highload-блок\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param $hlblockName\r\n     *\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function exportHlblock($hlblockName)\r\n    {\r\n        return $this->prepareExportHlblock(\r\n            $this->getHlblock($hlblockName)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Получает highload-блок\r\n     *\r\n     * @param $hlblockName - id, имя или фильтр\r\n     *\r\n     * @throws HelperException\r\n     * @return array|false\r\n     */\r\n    public function getHlblock($hlblockName)\r\n    {\r\n        if (is_array($hlblockName)) {\r\n            $filter = $hlblockName;\r\n        } elseif (is_numeric($hlblockName)) {\r\n            $filter = ['ID' => $hlblockName];\r\n        } else {\r\n            $filter = ['NAME' => $hlblockName];\r\n        }\r\n\r\n        try {\r\n            $hlblock = HighloadBlockTable::getList(\r\n                [\r\n                    'select' => ['*'],\r\n                    'filter' => $filter,\r\n                ]\r\n            )->fetch();\r\n\r\n            return $this->prepareHlblock($hlblock);\r\n        } catch (Exception $e) {\r\n            $this->throwException(__METHOD__, $e);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockName\r\n     *\r\n     * @throws HelperException\r\n     * @return array|void\r\n     */\r\n    public function getHlblockIfExists($hlblockName)\r\n    {\r\n        $item = $this->getHlblock($hlblockName);\r\n        if ($item && isset($item['ID'])) {\r\n            return $item;\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_HLBLOCK_NOT_FOUND',\r\n                ['#HLBLOCK#' => is_array($hlblockName) ? var_export($hlblockName, true) : $hlblockName]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Получает highload-блок, бросает исключение если его не существует\r\n     *\r\n     * @param $hlblockName - id, имя или фильтр\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function getHlblockIdIfExists($hlblockName)\r\n    {\r\n        $item = $this->getHlblock($hlblockName);\r\n        if ($item && isset($item['ID'])) {\r\n            return $item['ID'];\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_HLBLOCK_NOT_FOUND',\r\n                ['#HLBLOCK#' => is_array($hlblockName) ? var_export($hlblockName, true) : $hlblockName]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Получает id highload-блока\r\n     *\r\n     * @param $hlblockName - id, имя или фильтр\r\n     *\r\n     * @throws HelperException\r\n     * @return int|mixed\r\n     */\r\n    public function getHlblockId($hlblockName)\r\n    {\r\n        $item = $this->getHlblock($hlblockName);\r\n        return ($item && isset($item['ID'])) ? $item['ID'] : 0;\r\n    }\r\n\r\n    /**\r\n     * Добавляет highload-блок\r\n     *\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function addHlblock($fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['NAME', 'TABLE_NAME']);\r\n        $fields['NAME'] = ucfirst($fields['NAME']);\r\n\r\n        $lang = [];\r\n        if (isset($fields['LANG'])) {\r\n            $lang = $fields['LANG'];\r\n            unset($fields['LANG']);\r\n        }\r\n\r\n        try {\r\n            $result = HighloadBlockTable::add($fields);\r\n            if ($result->isSuccess()) {\r\n                $this->replaceHblockLangs($result->getId(), $lang);\r\n                return $result->getId();\r\n            }\r\n\r\n            throw new HelperException(implode(PHP_EOL, $result->getErrorMessages()));\r\n        } catch (Exception $e) {\r\n            $this->throwException(__METHOD__, $e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Добавляет highload-блок, если его не существует\r\n     *\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|mixed\r\n     */\r\n    public function addHlblockIfNotExists($fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['NAME']);\r\n\r\n        $item = $this->getHlblock($fields['NAME']);\r\n        if ($item) {\r\n            return $item['ID'];\r\n        }\r\n\r\n        return $this->addHlblock($fields);\r\n    }\r\n\r\n    /**\r\n     * Обновляет highload-блок\r\n     *\r\n     * @param $hlblockId\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function updateHlblock($hlblockId, $fields)\r\n    {\r\n        $lang = [];\r\n        if (isset($fields['LANG'])) {\r\n            $lang = $fields['LANG'];\r\n            unset($fields['LANG']);\r\n        }\r\n\r\n        try {\r\n            $result = HighloadBlockTable::update($hlblockId, $fields);\r\n\r\n            if ($result->isSuccess()) {\r\n                $this->replaceHblockLangs($hlblockId, $lang);\r\n                return $hlblockId;\r\n            }\r\n\r\n            throw new HelperException(implode(PHP_EOL, $result->getErrorMessages()));\r\n        } catch (Exception $e) {\r\n            $this->throwException(__METHOD__, $e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Обновляет highload-блок, если существует\r\n     *\r\n     * @param $hlblockName\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int\r\n     */\r\n    public function updateHlblockIfExists($hlblockName, $fields)\r\n    {\r\n        $item = $this->getHlblock($hlblockName);\r\n        if (!$item) {\r\n            return false;\r\n        }\r\n\r\n        return $this->updateHlblock($item['ID'], $fields);\r\n    }\r\n\r\n    /**\r\n     * Удаляет highload-блок\r\n     *\r\n     * @param $hlblockId\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|void\r\n     */\r\n    public function deleteHlblock($hlblockId)\r\n    {\r\n        try {\r\n            $result = HighloadBlockTable::delete($hlblockId);\r\n            if ($result->isSuccess()) {\r\n                return true;\r\n            }\r\n\r\n            throw new HelperException(implode(PHP_EOL, $result->getErrorMessages()));\r\n        } catch (Exception $e) {\r\n            $this->throwException(__METHOD__, $e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Удаляет highload-блок, если существует\r\n     *\r\n     * @param $hlblockName\r\n     *\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function deleteHlblockIfExists($hlblockName)\r\n    {\r\n        $item = $this->getHlblock($hlblockName);\r\n        if (!$item) {\r\n            return false;\r\n        }\r\n\r\n        return $this->deleteHlblock($item['ID']);\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockName\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function addElement($hlblockName, $fields)\r\n    {\r\n        $dataManager = $this->getDataManager($hlblockName);\r\n\r\n        try {\r\n            $result = $dataManager::add($fields);\r\n\r\n            if ($result->isSuccess()) {\r\n                return $result->getId();\r\n            }\r\n\r\n            throw new HelperException(implode(PHP_EOL, $result->getErrorMessages()));\r\n        } catch (Exception $e) {\r\n            $this->throwException(__METHOD__, $e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Получает права доступа к highload-блоку для групп\r\n     * возвращает массив вида [$groupId => $letter]\r\n     *\r\n     * @param $hlblockId\r\n     *\r\n     * @return array\r\n     */\r\n    public function getGroupPermissions($hlblockId)\r\n    {\r\n        $permissions = [];\r\n        $rights = $this->getGroupRights($hlblockId);\r\n        foreach ($rights as $right) {\r\n            $permissions[$right['GROUP_ID']] = $right['LETTER'];\r\n        }\r\n        return $permissions;\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockId\r\n     *\r\n     * @throws HelperException\r\n     * @return array\r\n     */\r\n    public function exportGroupPermissions($hlblockId)\r\n    {\r\n        $groupHelper = new UserGroupHelper();\r\n        $permissions = $this->getGroupPermissions($hlblockId);\r\n\r\n        $result = [];\r\n        foreach ($permissions as $groupId => $letter) {\r\n            $groupCode = $groupHelper->getGroupCode($groupId);\r\n            $groupCode = !empty($groupCode) ? $groupCode : $groupId;\r\n            $result[$groupCode] = $letter;\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    public function saveGroupPermissions($hlblockId, $permissions = [])\r\n    {\r\n        $groupHelper = new UserGroupHelper();\r\n\r\n        $result = [];\r\n        foreach ($permissions as $groupCode => $letter) {\r\n            $groupId = is_numeric($groupCode) ? $groupCode : $groupHelper->getGroupId($groupCode);\r\n            $result[$groupId] = $letter;\r\n        }\r\n\r\n        $this->setGroupPermissions($hlblockId, $result);\r\n    }\r\n\r\n    /**\r\n     * Устанавливает права доступа к highload-блоку для групп\r\n     * предыдущие права сбрасываются\r\n     * принимает массив вида [$groupId => $letter]\r\n     *\r\n     * @param       $hlblockId\r\n     * @param array $permissions\r\n     *\r\n     * @return bool\r\n     */\r\n    public function setGroupPermissions($hlblockId, $permissions = [])\r\n    {\r\n        if (!class_exists('\\Bitrix\\Highloadblock\\HighloadBlockRightsTable')) {\r\n            return false;\r\n        }\r\n\r\n        $rights = $this->getGroupRights($hlblockId);\r\n\r\n        try {\r\n            foreach ($rights as $right) {\r\n                HighloadBlockRightsTable::delete($right['ID']);\r\n            }\r\n\r\n            foreach ($permissions as $groupId => $letter) {\r\n                $taskId = CTask::GetIdByLetter($letter, 'highloadblock');\r\n\r\n                if (!empty($taskId)) {\r\n                    HighloadBlockRightsTable::add(\r\n                        [\r\n                            'HL_ID'       => $hlblockId,\r\n                            'TASK_ID'     => $taskId,\r\n                            'ACCESS_CODE' => 'G' . $groupId,\r\n                        ]\r\n                    );\r\n                }\r\n            }\r\n        } catch (Exception $e) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockName\r\n     *\r\n     * @throws HelperException\r\n     * @return DataManager|void\r\n     */\r\n    public function getDataManager($hlblockName)\r\n    {\r\n        try {\r\n            $hlblock = $this->getHlblockIfExists($hlblockName);\r\n            $entity = HighloadBlockTable::compileEntity($hlblock);\r\n            return $entity->getDataClass();\r\n        } catch (Exception $e) {\r\n            $this->throwException(__METHOD__, $e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param       $hlblockName\r\n     * @param array $params\r\n     *\r\n     * @throws HelperException\r\n     * @return array|void\r\n     */\r\n    public function getElements($hlblockName, $params = [])\r\n    {\r\n        $dataManager = $this->getDataManager($hlblockName);\r\n        try {\r\n            return $dataManager::getList($params)->fetchAll();\r\n        } catch (Exception $e) {\r\n            $this->throwException(__METHOD__, $e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param       $hlblockName\r\n     * @param array $filter\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function getElementsCount($hlblockName, $filter = [])\r\n    {\r\n        $dataManager = $this->getDataManager($hlblockName);\r\n        try {\r\n            $item = $dataManager::getList(\r\n                [\r\n                    'select'  => ['CNT'],\r\n                    'filter'  => $filter,\r\n                    'runtime' => [\r\n                        new ExpressionField('CNT', 'COUNT(*)'),\r\n                    ],\r\n                ]\r\n            )->fetch();\r\n\r\n            return ($item) ? $item['CNT'] : 0;\r\n        } catch (Exception $e) {\r\n            $this->throwException(__METHOD__, $e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param        $hlblock\r\n     *\r\n     * @throws HelperException\r\n     * @return string|void\r\n     */\r\n    public function getHlblockUid($hlblock)\r\n    {\r\n        if (!is_array($hlblock)) {\r\n            // если хайлоадблок не найден, надо показать что искали\r\n            $getHlblock = $this->getHlblock($hlblock);\r\n\r\n            if (false === $getHlblock) {\r\n                $this->throwException(\r\n                    __METHOD__,\r\n                    Locale::getMessage(\r\n                        'ERR_HLBLOCK_NOT_FOUND',\r\n                        ['#HLBLOCK#' => $hlblock]\r\n                    )\r\n                );\r\n            }\r\n\r\n            $hlblock = $getHlblock;\r\n        }\r\n\r\n        if (!empty($hlblock['NAME'])) {\r\n            return $hlblock['NAME'];\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_HLBLOCK_NOT_FOUND',\r\n                ['#HLBLOCK#' => is_array($hlblock) ? var_export($hlblock, true) : $hlblock]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockUid\r\n     *\r\n     * @throws HelperException\r\n     * @return int\r\n     */\r\n    public function getHlblockIdByUid($hlblockUid)\r\n    {\r\n        $hlblockId = 0;\r\n        if (empty($hlblockUid)) {\r\n            return $hlblockId;\r\n        }\r\n\r\n        return $this->getHlblockId($hlblockUid);\r\n    }\r\n\r\n    /**\r\n     * @param $item\r\n     *\r\n     * @return mixed\r\n     */\r\n    protected function prepareHlblock($item)\r\n    {\r\n        if (empty($item['ID'])) {\r\n            return $item;\r\n        }\r\n\r\n        $langs = $this->getHblockLangs($item['ID']);\r\n        if (!empty($langs)) {\r\n            $item['LANG'] = $langs;\r\n        }\r\n\r\n        return $item;\r\n    }\r\n\r\n    /**\r\n     * @param int $hlblockId\r\n     *\r\n     * @return array\r\n     */\r\n    protected function getGroupRights($hlblockId)\r\n    {\r\n        $result = [];\r\n        if (!class_exists('\\Bitrix\\Highloadblock\\HighloadBlockRightsTable')) {\r\n            return $result;\r\n        }\r\n\r\n        try {\r\n            $items = HighloadBlockRightsTable::getList(\r\n                [\r\n                    'filter' => [\r\n                        'HL_ID' => $hlblockId,\r\n                    ],\r\n                ]\r\n            )->fetchAll();\r\n        } catch (Exception $e) {\r\n            $items = [];\r\n        }\r\n\r\n        foreach ($items as $item) {\r\n            if (strpos($item['ACCESS_CODE'], 'G') !== 0) {\r\n                continue;\r\n            }\r\n\r\n            $groupId = (int)substr($item['ACCESS_CODE'], 1);\r\n            if (empty($groupId)) {\r\n                continue;\r\n            }\r\n\r\n            $letter = CTask::GetLetter($item['TASK_ID']);\r\n            if (empty($letter)) {\r\n                continue;\r\n            }\r\n\r\n            $item['LETTER'] = $letter;\r\n            $item['GROUP_ID'] = $groupId;\r\n\r\n            $result[] = $item;\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    protected function prepareExportHlblock($item)\r\n    {\r\n        if (empty($item)) {\r\n            return $item;\r\n        }\r\n\r\n        unset($item['ID']);\r\n\r\n        return $item;\r\n    }\r\n\r\n    /**\r\n     * @param int $hlblockId\r\n     *\r\n     * @return array\r\n     */\r\n    protected function getHblockLangs($hlblockId)\r\n    {\r\n        $result = [];\r\n\r\n        if (!class_exists('\\Bitrix\\Highloadblock\\HighloadBlockLangTable')) {\r\n            return $result;\r\n        }\r\n\r\n        try {\r\n            $dbres = HighloadBlockLangTable::getList(\r\n                [\r\n                    'filter' => ['ID' => $hlblockId],\r\n                ]\r\n            );\r\n\r\n            while ($item = $dbres->fetch()) {\r\n                $result[$item['LID']] = [\r\n                    'NAME' => $item['NAME'],\r\n                ];\r\n            }\r\n        } catch (Exception $e) {\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * @param int $hlblockId\r\n     *\r\n     * @throws Exception\r\n     * @return int\r\n     */\r\n    protected function deleteHblockLangs($hlblockId)\r\n    {\r\n        $del = 0;\r\n\r\n        if (!class_exists('\\Bitrix\\Highloadblock\\HighloadBlockLangTable')) {\r\n            return $del;\r\n        }\r\n\r\n        try {\r\n            $items = HighloadBlockLangTable::getList(\r\n                [\r\n                    'filter' => ['ID' => $hlblockId],\r\n                ]\r\n            )->fetchAll();\r\n        } catch (Exception $e) {\r\n            $items = [];\r\n        }\r\n\r\n        foreach ($items as $item) {\r\n            HighloadBlockLangTable::delete($item['ID']);\r\n            $del++;\r\n        }\r\n\r\n        return $del;\r\n    }\r\n\r\n    /**\r\n     * @param int   $hlblockId\r\n     * @param array $lang\r\n     *\r\n     * @throws Exception\r\n     * @return int\r\n     */\r\n    protected function addHblockLangs($hlblockId, $lang = [])\r\n    {\r\n        $add = 0;\r\n\r\n        if (!class_exists('\\Bitrix\\Highloadblock\\HighloadBlockLangTable')) {\r\n            return $add;\r\n        }\r\n\r\n        foreach ($lang as $lid => $item) {\r\n            if (!empty($item['NAME'])) {\r\n                HighloadBlockLangTable::add(\r\n                    [\r\n                        'ID'   => $hlblockId,\r\n                        'LID'  => $lid,\r\n                        'NAME' => $item['NAME'],\r\n                    ]\r\n                );\r\n\r\n                $add++;\r\n            }\r\n        }\r\n\r\n        return $add;\r\n    }\r\n\r\n    /**\r\n     * @param int   $hlblockId\r\n     * @param array $lang\r\n     *\r\n     * @throws Exception\r\n     */\r\n    protected function replaceHblockLangs($hlblockId, $lang = [])\r\n    {\r\n        if (!empty($lang) && is_array($lang)) {\r\n            $this->deleteHblockLangs($hlblockId);\r\n            $this->addHblockLangs($hlblockId, $lang);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/hlblockhelper.php b/local/modules/sprint.migration/lib/helpers/hlblockhelper.php
--- a/local/modules/sprint.migration/lib/helpers/hlblockhelper.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/hlblockhelper.php	(date 1670844554000)
@@ -317,19 +317,7 @@
             return $ok;
         }
 
-        $ok = $this->getMode('test') ? true : $exists['ID'];
-        if ($this->getMode('out_equal')) {
-            $this->outNoticeIf(
-                $ok,
-                Locale::getMessage(
-                    'HLBLOCK_EQUAL',
-                    [
-                        '#NAME#' => $fields['NAME'],
-                    ]
-                )
-            );
-        }
-        return $ok;
+        return $this->getMode('test') ? true : $exists['ID'];
     }
 
     /**
@@ -653,6 +641,71 @@
         }
     }
 
+    /**
+     * @param $hlblockName
+     * @param $elementId
+     * @param $fields
+     *
+     * @throws HelperException
+     * @return int|void
+     */
+    public function updateElement($hlblockName, $elementId, $fields)
+    {
+        $dataManager = $this->getDataManager($hlblockName);
+
+        try {
+            $result = $dataManager::update($elementId, $fields);
+
+            if ($result->isSuccess()) {
+                return $result->getId();
+            }
+
+            throw new HelperException(implode(PHP_EOL, $result->getErrorMessages()));
+        } catch (Exception $e) {
+            $this->throwException(__METHOD__, $e);
+        }
+    }
+
+    public function deleteElement($hlblockName, $elementId)
+    {
+        $dataManager = $this->getDataManager($hlblockName);
+        try {
+            $result = $dataManager::delete($elementId);
+
+            if ($result->isSuccess()) {
+                return true;
+            }
+
+            throw new HelperException(implode(PHP_EOL, $result->getErrorMessages()));
+        } catch (Exception $e) {
+            $this->throwException(__METHOD__, $e);
+        }
+    }
+
+    public function saveElementByXmlId($hlblockName, $fields)
+    {
+        $this->checkRequiredKeys(__METHOD__, $fields, ['UF_XML_ID']);
+
+        $item = $this->getElementByXmlId($hlblockName, $fields['UF_XML_ID']);
+
+        if (!empty($item['ID'])) {
+            return $this->updateElement($hlblockName, $item['ID'], $fields);
+        }
+
+        return $this->addElement($hlblockName, $fields);
+    }
+
+    public function deleteElementByXmlId($hlblockName, $xmlId)
+    {
+        if (!empty($xmlId)) {
+            $item = $this->getElementByXmlId($hlblockName, $xmlId);
+            if ($item) {
+                return $this->deleteElement($hlblockName, $item['ID']);
+            }
+        }
+        return false;
+    }
+
     /**
      * Получает права доступа к highload-блоку для групп
      * возвращает массив вида [$groupId => $letter]
@@ -781,6 +834,27 @@
             $this->throwException(__METHOD__, $e);
         }
     }
+
+    /**
+     * @param string $hlblockName
+     * @param string $xmlId
+     *
+     * @throws HelperException
+     * @return array|void
+     */
+    public function getElementByXmlId($hlblockName, $xmlId)
+    {
+        $dataManager = $this->getDataManager($hlblockName);
+        try {
+            return $dataManager::getList([
+                'filter' => ['UF_XML_ID' => $xmlId],
+                'offset' => 0,
+                'limit'  => 1,
+            ])->fetch();
+        } catch (Exception $e) {
+            $this->throwException(__METHOD__, $e);
+        }
+    }
 
     /**
      * @param       $hlblockName
Index: local/modules/sprint.migration/lib/helpers/formhelper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers;\r\n\r\nuse Bitrix\\Main\\Application;\r\nuse Bitrix\\Main\\Db\\SqlQueryException;\r\nuse CForm;\r\nuse CFormAnswer;\r\nuse CFormField;\r\nuse CFormStatus;\r\nuse CFormValidator;\r\nuse Exception;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Helper;\r\nuse Sprint\\Migration\\Locale;\r\n\r\nclass FormHelper extends Helper\r\n{\r\n    /**\r\n     * FormHelper constructor.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function isEnabled()\r\n    {\r\n        return $this->checkModules(['form']);\r\n    }\r\n\r\n    /**\r\n     * @param array $filter\r\n     *\r\n     * @return array\r\n     */\r\n    public function getList($filter = [])\r\n    {\r\n        $by = 's_name';\r\n        $order = 'asc';\r\n        $isFiltered = null;\r\n\r\n        $dbres = CForm::GetList($by, $order, $filter, $isFiltered);\r\n        return $this->fetchAll($dbres);\r\n    }\r\n\r\n    /**\r\n     * @param $formId\r\n     *\r\n     * @throws HelperException\r\n     * @throws SqlQueryException\r\n     * @return array|bool\r\n     */\r\n    public function getFormById($formId)\r\n    {\r\n        $formId = (int)$formId;\r\n\r\n        $form = CForm::GetByID($formId)->Fetch();\r\n        if (empty($form)) {\r\n            return false;\r\n        }\r\n\r\n        $form['arSITE'] = $this->exportSites($formId);\r\n\r\n        $form[\"arMENU\"] = $this->exportMenus($formId);\r\n\r\n        $form['arGROUP'] = $this->exportRights($formId);\r\n\r\n        $form['arMAIL_TEMPLATE'] = $this->exportMailTemplates($formId);\r\n\r\n        return $form;\r\n    }\r\n\r\n    /**\r\n     * @param $sid\r\n     *\r\n     * @return bool|int\r\n     */\r\n    public function getFormId($sid)\r\n    {\r\n        $form = CForm::GetBySID($sid)->Fetch();\r\n        return ($form && isset($form['ID'])) ? $form['ID'] : false;\r\n    }\r\n\r\n    /**\r\n     * @param $sid\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function getFormIdIfExists($sid)\r\n    {\r\n        $formId = $this->getFormId($sid);\r\n        if ($formId) {\r\n            return $formId;\r\n        }\r\n\r\n        $this->throwException(__METHOD__, Locale::getMessage('ERR_FORM_NOT_FOUND', ['#NAME#' => $sid]));\r\n    }\r\n\r\n    /**\r\n     * @param $form\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function saveForm($form)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $form, ['SID']);\r\n\r\n        $form['VARNAME'] = $form['SID'];\r\n\r\n        $userGroupHelper = new UserGroupHelper();\r\n        if (isset($form['arGROUP']) && is_array($form['arGROUP'])) {\r\n            $arGroup = [];\r\n            foreach ($form['arGROUP'] as $groupCode => $permissionValue) {\r\n                $groupId = $userGroupHelper->getGroupId($groupCode);\r\n                $arGroup[$groupId] = $permissionValue;\r\n            }\r\n            $form['arGROUP'] = $arGroup;\r\n        }\r\n\r\n        $formId = $this->getFormId($form['SID']);\r\n\r\n        $formId = CForm::Set($form, $formId, 'N');\r\n\r\n        if ($formId) {\r\n            return $formId;\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $GLOBALS['strError']);\r\n    }\r\n\r\n    /**\r\n     * @param $formId\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    public function saveFields($formId, $fields)\r\n    {\r\n        $currentFields = $this->getFormFields($formId);\r\n        $updatedIds = [];\r\n\r\n        foreach ($fields as $field) {\r\n            $field['FORM_ID'] = $formId;\r\n            $field['VARNAME'] = $field['SID'];\r\n\r\n            $answers = [];\r\n            if (isset($field['ANSWERS'])) {\r\n                if (is_array($field['ANSWERS'])) {\r\n                    $answers = $field['ANSWERS'];\r\n                }\r\n                unset($field['ANSWERS']);\r\n            }\r\n\r\n            $validators = [];\r\n            if (isset($field['VALIDATORS'])) {\r\n                if (is_array($field['VALIDATORS'])) {\r\n                    $validators = $field['VALIDATORS'];\r\n                }\r\n                unset($field['VALIDATORS']);\r\n            }\r\n\r\n            $fieldId = false;\r\n            foreach ($currentFields as $currentField) {\r\n                if (\r\n                    !in_array($currentField['ID'], $updatedIds)\r\n                    && $currentField['SID'] == $field['SID']\r\n                ) {\r\n                    $fieldId = $currentField['ID'];\r\n                    $updatedIds[] = $currentField['ID'];\r\n                    break;\r\n                }\r\n            }\r\n            /** @noinspection PhpDynamicAsStaticMethodCallInspection */\r\n            $fieldId = CFormField::Set($field, $fieldId, 'N');\r\n            if (empty($fieldId)) {\r\n                $this->throwException(__METHOD__, $GLOBALS['strError']);\r\n            }\r\n\r\n            $this->saveFieldAnswers($fieldId, $answers);\r\n            $this->saveFieldValidators($formId, $fieldId, $validators);\r\n        }\r\n\r\n        foreach ($currentFields as $currentField) {\r\n            if (!in_array($currentField['ID'], $updatedIds)) {\r\n                /** @noinspection PhpDynamicAsStaticMethodCallInspection */\r\n                CFormField::Delete($currentField['ID'], 'N');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $formId\r\n     * @param $statuses\r\n     *\r\n     * @throws Exception\r\n     */\r\n    public function saveStatuses($formId, $statuses)\r\n    {\r\n        $currentStatuses = $this->getFormStatuses($formId);\r\n\r\n        $updatedIds = [];\r\n\r\n        foreach ($statuses as $status) {\r\n            $status['FORM_ID'] = $formId;\r\n\r\n            $statusId = false;\r\n            foreach ($currentStatuses as $currentStatus) {\r\n                if (\r\n                    !in_array($currentStatus['ID'], $updatedIds)\r\n                    && $currentStatus['TITLE'] == $status['TITLE']\r\n                ) {\r\n                    $statusId = $currentStatus['ID'];\r\n                    $updatedIds[] = $currentStatus['ID'];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            //Зададим доступы к статусу для создателя результата\r\n            //Сделано по аналогии с тем, как  у самого Битрикс при создании новой веб-формы в упрощенном режиме\r\n            //см. \\bitrix\\modules\\form\\admin\\form_edit.php#295\r\n            $status['arPERMISSION_VIEW'] = $status['arPERMISSION_VIEW'] ? $status['arPERMISSION_VIEW'] : [0];\r\n            $status['arPERMISSION_MOVE'] = $status['arPERMISSION_MOVE'] ? $status['arPERMISSION_MOVE'] : [0];\r\n            $status['arPERMISSION_EDIT'] = $status['arPERMISSION_EDIT'] ? $status['arPERMISSION_EDIT'] : [0];\r\n            $status['arPERMISSION_DELETE'] = $status['arPERMISSION_DELETE'] ? $status['arPERMISSION_DELETE'] : [0];\r\n\r\n            /** @noinspection PhpDynamicAsStaticMethodCallInspection */\r\n            $statusId = CFormStatus::Set($status, $statusId, 'N');\r\n            if (empty($statusId)) {\r\n                $this->throwException(__METHOD__, $GLOBALS['strError']);\r\n            }\r\n        }\r\n\r\n        foreach ($currentStatuses as $currentStatus) {\r\n            if (!in_array($currentStatus['ID'], $updatedIds)) {\r\n                /** @noinspection PhpDynamicAsStaticMethodCallInspection */\r\n                CFormStatus::Delete($currentStatus['ID'], 'N');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $formId\r\n     *\r\n     * @return array\r\n     */\r\n    public function getFormStatuses($formId)\r\n    {\r\n        $isFiltered = false;\r\n        $by = 's_sort';\r\n        $order = 'asc';\r\n        /** @noinspection PhpDynamicAsStaticMethodCallInspection */\r\n        $dbres = CFormStatus::GetList($formId, $by, $order, [], $isFiltered);\r\n        return $this->fetchAll($dbres);\r\n    }\r\n\r\n    /**\r\n     * @param $formId\r\n     *\r\n     * @return array\r\n     */\r\n    public function getFormFields($formId)\r\n    {\r\n        $isFiltered = false;\r\n        $by = 's_sort';\r\n        $order = 'asc';\r\n        /** @noinspection PhpDynamicAsStaticMethodCallInspection */\r\n        $dbres = CFormField::GetList($formId, 'ALL', $by, $order, [], $isFiltered);\r\n        $fields = $this->fetchAll($dbres);\r\n        foreach ($fields as $index => $field) {\r\n            $fields[$index]['ANSWERS'] = $this->getFieldAnswers($field['ID']);\r\n            $fields[$index]['VALIDATORS'] = $this->getFieldValidators($field['ID']);\r\n        }\r\n        return $fields;\r\n    }\r\n\r\n    /**\r\n     * @param $sid\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|void\r\n     */\r\n    public function deleteFormIfExists($sid)\r\n    {\r\n        $formId = $this->getFormId($sid);\r\n\r\n        if (!$formId) {\r\n            return false;\r\n        }\r\n        if (CForm::Delete($formId)) {\r\n            return true;\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_CANT_DELETE_FORM', [\r\n                    '#NAME#' => $sid,\r\n                ]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param $fieldId\r\n     *\r\n     * @return array\r\n     */\r\n    protected function getFieldAnswers($fieldId)\r\n    {\r\n        $isFiltered = false;\r\n        $by = 's_sort';\r\n        $order = 'asc';\r\n        /** @noinspection PhpDynamicAsStaticMethodCallInspection */\r\n        $dbres = CFormAnswer::GetList($fieldId, $by, $order, [], $isFiltered);\r\n        return $this->fetchAll($dbres);\r\n    }\r\n\r\n    /**\r\n     * @param $fieldId\r\n     *\r\n     * @return array\r\n     */\r\n    protected function getFieldValidators($fieldId)\r\n    {\r\n        $by = 's_sort';\r\n        $order = 'asc';\r\n        /** @noinspection PhpDynamicAsStaticMethodCallInspection */\r\n        $dbres = CFormValidator::GetList($fieldId, [], $by, $order);\r\n        return $this->fetchAll($dbres);\r\n    }\r\n\r\n    /**\r\n     * @param int $formId\r\n     *\r\n     * @throws HelperException\r\n     * @throws SqlQueryException\r\n     * @return array\r\n     */\r\n    protected function exportRights($formId)\r\n    {\r\n        $userGroupHelper = new UserGroupHelper();\r\n\r\n        $dbres = Application::getConnection()->query(\r\n            \"SELECT GROUP_ID, PERMISSION FROM b_form_2_group WHERE FORM_ID = {$formId}\"\r\n        );\r\n\r\n        $rights = [];\r\n        while ($group = $dbres->fetch()) {\r\n            $groupCode = $userGroupHelper->getGroupCode($group['GROUP_ID']);\r\n            if ($groupCode) {\r\n                $rights[$groupCode] = $group[\"PERMISSION\"];\r\n            }\r\n        }\r\n        return $rights;\r\n    }\r\n\r\n    /**\r\n     * @param $formId\r\n     *\r\n     * @return array|bool\r\n     */\r\n    protected function exportSites($formId)\r\n    {\r\n        return CForm::GetSiteArray($formId);\r\n    }\r\n\r\n    /**\r\n     * @param int $formId\r\n     *\r\n     * @return array\r\n     */\r\n    protected function exportMailTemplates($formId)\r\n    {\r\n        return CForm::GetMailTemplateArray($formId);\r\n    }\r\n\r\n    /**\r\n     * @param $formId\r\n     *\r\n     * @return array\r\n     */\r\n    protected function exportMenus($formId)\r\n    {\r\n        $res = [];\r\n        $dbres = CForm::GetMenuList(['FORM_ID' => $formId], 'N');\r\n        while ($menuItem = $dbres->Fetch()) {\r\n            $res[$menuItem[\"LID\"]] = $menuItem[\"MENU\"];\r\n        }\r\n        return $res;\r\n    }\r\n\r\n    /**\r\n     * @param $fieldId\r\n     * @param $answers\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function saveFieldAnswers($fieldId, $answers)\r\n    {\r\n        $currentAnswers = $this->getFieldAnswers($fieldId);\r\n\r\n        $updatedIds = [];\r\n\r\n        foreach ($answers as $index => $answer) {\r\n            $answerId = false;\r\n\r\n            foreach ($currentAnswers as $currentAnswer) {\r\n                if (\r\n                    !in_array($currentAnswer['ID'], $updatedIds)\r\n                    && $currentAnswer['MESSAGE'] == $answer['MESSAGE']\r\n                ) {\r\n                    $answerId = $currentAnswer['ID'];\r\n                    $updatedIds[] = $currentAnswer['ID'];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            $answer['FIELD_ID'] = $fieldId;\r\n\r\n            /** @noinspection PhpDynamicAsStaticMethodCallInspection */\r\n            $answerId = CFormAnswer::Set(\r\n                $answer,\r\n                $answerId\r\n            );\r\n            if (empty($answerId)) {\r\n                $this->throwException(__METHOD__, $GLOBALS['strError']);\r\n            }\r\n        }\r\n\r\n        foreach ($currentAnswers as $currentAnswer) {\r\n            if (!in_array($currentAnswer['ID'], $updatedIds)) {\r\n                /** @noinspection PhpDynamicAsStaticMethodCallInspection */\r\n                CFormAnswer::Delete($currentAnswer['ID'], $fieldId);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $formId\r\n     * @param $fieldId\r\n     * @param $validators\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function saveFieldValidators($formId, $fieldId, $validators)\r\n    {\r\n        /** @noinspection PhpDynamicAsStaticMethodCallInspection */\r\n        CFormValidator::Clear($fieldId);\r\n\r\n        foreach ($validators as $index => $validator) {\r\n            /** @noinspection PhpDynamicAsStaticMethodCallInspection */\r\n            $validatorId = CFormValidator::Set(\r\n                $formId,\r\n                $fieldId,\r\n                $validator['NAME'],\r\n                $validator['PARAMS'],\r\n                $validator['C_SORT']\r\n            );\r\n\r\n            if (empty($validatorId)) {\r\n                $this->throwException(__METHOD__, $GLOBALS['strError']);\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/formhelper.php b/local/modules/sprint.migration/lib/helpers/formhelper.php
--- a/local/modules/sprint.migration/lib/helpers/formhelper.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/formhelper.php	(date 1670844554000)
@@ -112,11 +112,25 @@
             $arGroup = [];
             foreach ($form['arGROUP'] as $groupCode => $permissionValue) {
                 $groupId = $userGroupHelper->getGroupId($groupCode);
-                $arGroup[$groupId] = $permissionValue;
+                if ($groupId) {
+                    $arGroup[$groupId] = $permissionValue;
+                }
             }
             $form['arGROUP'] = $arGroup;
         }
 
+        $eventHelper = new EventHelper();
+        if (isset($form['arMAIL_TEMPLATE']) && is_array($form['arMAIL_TEMPLATE'])) {
+            $arTemplates = [];
+            foreach ($form['arMAIL_TEMPLATE'] as $templateId) {
+                $templateId = $eventHelper->getEventMessageIdByUidFilter($templateId);
+                if ($templateId){
+                    $arTemplates[] = $templateId;
+                }
+            }
+            $form['arMAIL_TEMPLATE'] = $arTemplates;
+        }
+
         $formId = $this->getFormId($form['SID']);
 
         $formId = CForm::Set($form, $formId, 'N');
@@ -371,7 +385,13 @@
      */
     protected function exportMailTemplates($formId)
     {
-        return CForm::GetMailTemplateArray($formId);
+        $templateIds = CForm::GetMailTemplateArray($formId);
+        $templates = [];
+        foreach ($templateIds as $templateId) {
+            $templates[] = (new EventHelper())->getEventMessageUidFilterById($templateId);
+        }
+
+        return $templates;
     }
 
     /**
Index: local/modules/sprint.migration/lib/helpers/eventhelper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers;\r\n\r\nuse CEventMessage;\r\nuse CEventType;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Helper;\r\nuse Sprint\\Migration\\Locale;\r\n\r\nclass EventHelper extends Helper\r\n{\r\n    /**\r\n     * Получает тип почтового события по фильтру или типу почтового события\r\n     *\r\n     * @param $eventName\r\n     *\r\n     * @return array\r\n     */\r\n    public function getEventType($eventName)\r\n    {\r\n        $filter = is_array($eventName)\r\n            ? $eventName\r\n            : [\r\n                'EVENT_NAME' => $eventName,\r\n            ];\r\n\r\n        $dbres = CEventType::GetList($filter);\r\n        return $dbres->Fetch();\r\n    }\r\n\r\n    /**\r\n     * Получает список типов почтовых событий по фильтру или типу почтового события\r\n     *\r\n     * @param $eventName\r\n     *\r\n     * @return array\r\n     */\r\n    public function getEventTypes($eventName)\r\n    {\r\n        $filter = is_array($eventName)\r\n            ? $eventName\r\n            : [\r\n                'EVENT_NAME' => $eventName,\r\n            ];\r\n\r\n        $dbres = CEventType::GetList($filter);\r\n        return $this->fetchAll($dbres);\r\n    }\r\n\r\n    /**\r\n     * Получает почтовый шаблон по фильтру или типу почтового события\r\n     *\r\n     * @param $eventName\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function getEventMessage($eventName)\r\n    {\r\n        $filter = is_array($eventName)\r\n            ? $eventName\r\n            : [\r\n                'EVENT_NAME' => $eventName,\r\n            ];\r\n\r\n        $by = 'id';\r\n        $order = 'asc';\r\n\r\n        if (isset($filter['EVENT_NAME'])) {\r\n            $filter['EVENT_NAME_EXACT_MATCH'] = 'Y';\r\n        }\r\n        if (isset($filter['SUBJECT'])) {\r\n            $filter['SUBJECT_EXACT_MATCH'] = 'Y';\r\n        }\r\n\r\n        $item = CEventMessage::GetList($by, $order, $filter)->Fetch();\r\n        return $this->prepareEventMessage($item);\r\n    }\r\n\r\n    /**\r\n     * Получает почтовые шаблоны по фильтру или типу почтового события\r\n     *\r\n     * @param $eventName\r\n     *\r\n     * @return array\r\n     */\r\n    public function getEventMessages($eventName)\r\n    {\r\n        $filter = is_array($eventName)\r\n            ? $eventName\r\n            : [\r\n                'EVENT_NAME' => $eventName,\r\n            ];\r\n\r\n        $by = 'id';\r\n        $order = 'asc';\r\n\r\n        if (isset($filter['EVENT_NAME'])) {\r\n            $filter['EVENT_NAME_EXACT_MATCH'] = 'Y';\r\n        }\r\n        if (isset($filter['SUBJECT'])) {\r\n            $filter['SUBJECT_EXACT_MATCH'] = 'Y';\r\n        }\r\n\r\n        $result = [];\r\n        $dbres = CEventMessage::GetList($by, $order, $filter);\r\n        while ($item = $dbres->Fetch()) {\r\n            $result[] = $this->prepareEventMessage($item);\r\n        }\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * Получает список сайтов для почтового шаблона\r\n     *\r\n     * @param $messageId\r\n     *\r\n     * @return array\r\n     */\r\n    public function getEventMessageSites($messageId)\r\n    {\r\n        $dbres = CEventMessage::GetLang($messageId);\r\n        return $this->fetchAll($dbres, false, 'LID');\r\n    }\r\n\r\n    /**\r\n     * Получает почтовые шаблоны по фильтру или типу почтового события\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param $eventName\r\n     *\r\n     * @return array\r\n     */\r\n    public function exportEventMessages($eventName)\r\n    {\r\n        $exports = [];\r\n        $items = $this->getEventMessages($eventName);\r\n        foreach ($items as $item) {\r\n            $exports[] = $this->prepareExportEventMessage($item);\r\n        }\r\n        return $exports;\r\n    }\r\n\r\n    /**\r\n     * Получает список типов почтовых событий по фильтру или типу почтового события\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param $eventName\r\n     *\r\n     * @return array\r\n     */\r\n    public function exportEventTypes($eventName)\r\n    {\r\n        $exports = [];\r\n        $items = $this->getEventTypes($eventName);\r\n        foreach ($items as $item) {\r\n            $exports[] = $this->prepareExportEventType($item);\r\n        }\r\n        return $exports;\r\n    }\r\n\r\n    /**\r\n     * Добавляет тип почтового события если его не существует\r\n     *\r\n     * @param       $eventName\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int|mixed\r\n     */\r\n    public function addEventTypeIfNotExists($eventName, $fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['LID']);\r\n\r\n        $item = $this->getEventType([\r\n            'EVENT_NAME' => $eventName,\r\n            'LID'        => $fields['LID'],\r\n        ]);\r\n\r\n        if ($item) {\r\n            return $item['ID'];\r\n        }\r\n\r\n        return $this->addEventType($eventName, $fields);\r\n    }\r\n\r\n    /**\r\n     * Добавляет почтовый шаблон если его не существует\r\n     *\r\n     * @param       $eventName\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int\r\n     */\r\n    public function addEventMessageIfNotExists($eventName, $fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['SUBJECT', 'LID']);\r\n\r\n        $item = $this->getEventMessage([\r\n            'EVENT_NAME' => $eventName,\r\n            'SUBJECT'    => $fields['SUBJECT'],\r\n        ]);\r\n\r\n        if ($item) {\r\n            return $item['ID'];\r\n        }\r\n\r\n        return $this->addEventMessage($eventName, $fields);\r\n    }\r\n\r\n    /**\r\n     * Обновляет почтовые шаблоны по типу почтового события или фильтру\r\n     *\r\n     * @param $eventName\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function updateEventMessage($eventName, $fields)\r\n    {\r\n        $items = $this->getEventMessages($eventName);\r\n\r\n        foreach ($items as $item) {\r\n            $this->updateEventMessageById($item[\"ID\"], $fields);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Обновляет почтовый шаблон по id\r\n     *\r\n     * @param $id\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function updateEventMessageById($id, $fields)\r\n    {\r\n        $event = new CEventMessage;\r\n\r\n        //Удаление \"лишних\" значений из массива, наличие которых вызовет ошибку при \\CAllEventMessage::Update() (bitrix\\modules\\main\\classes\\general\\event.php#355)\r\n        //Код удаления взят из соседнего метода \\CAllEventMessage::Add() (bitrix\\modules\\main\\classes\\general\\event.php#310), который сам удаляет эти значения,\r\n        //а в \\CAllEventMessage::Update() Битрикс видимо забыл это перенести\r\n        $arDeleteFields = [\r\n            'EVENT_MESSAGE_TYPE_ID',\r\n            'EVENT_MESSAGE_TYPE_ID',\r\n            'EVENT_MESSAGE_TYPE_NAME',\r\n            'EVENT_MESSAGE_TYPE_EVENT_NAME',\r\n            'SITE_ID',\r\n            'EVENT_TYPE',\r\n        ];\r\n\r\n        foreach ($arDeleteFields as $deleteField) {\r\n            if (array_key_exists($deleteField, $fields)) {\r\n                unset($fields[$deleteField]);\r\n            }\r\n        }\r\n\r\n        if ($event->Update($id, $fields)) {\r\n            return $id;\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $event->LAST_ERROR);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Обновляет тип почтового события по id\r\n     *\r\n     * @param $id\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function updateEventTypeById($id, $fields)\r\n    {\r\n        $event = new CEventType();\r\n        if ($event->Update(['ID' => $id], $fields)) {\r\n            return $id;\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_EVENT_TYPE_NOT_UPDATED'\r\n            )\r\n        );\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Сохраняет почтовый шаблон\r\n     * Создаст если не было, обновит если существует и отличается\r\n     *\r\n     * @param       $eventName\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int|mixed\r\n     */\r\n    public function saveEventMessage($eventName, $fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['SUBJECT', 'LID']);\r\n\r\n        $exists = $this->getEventMessage([\r\n            'EVENT_NAME' => $eventName,\r\n            'SUBJECT'    => $fields['SUBJECT'],\r\n        ]);\r\n\r\n        $exportExists = $this->prepareExportEventMessage($exists);\r\n        $fields = $this->prepareExportEventMessage($fields);\r\n\r\n        if (empty($exists)) {\r\n            $ok = $this->getMode('test') ? true : $this->addEventMessage($eventName, $fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'EVENT_MESSAGE_CREATED',\r\n                    [\r\n                        '#NAME#' => $eventName . ':' . $fields['SUBJECT'],\r\n                    ]\r\n                )\r\n            );\r\n            return $ok;\r\n        }\r\n\r\n        if ($this->hasDiff($exportExists, $fields)) {\r\n            $ok = $this->getMode('test') ? true : $this->updateEventMessageById($exists['ID'], $fields);\r\n\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'EVENT_MESSAGE_UPDATED',\r\n                    [\r\n                        '#NAME#' => $eventName . ':' . $fields['SUBJECT'],\r\n                    ]\r\n                )\r\n            );\r\n\r\n            $this->outDiffIf($ok, $exportExists, $fields);\r\n            return $ok;\r\n        }\r\n\r\n        $ok = $this->getMode('test') ? true : $eventName;\r\n        if ($this->getMode('out_equal')) {\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'EVENT_MESSAGE_EQUAL',\r\n                    [\r\n                        '#NAME#' => $eventName . ':' . $fields['SUBJECT'],\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n        return $ok;\r\n    }\r\n\r\n    /**\r\n     * Сохраняет тип почтового события\r\n     * Создаст если не было, обновит если существует и отличается\r\n     *\r\n     * @param       $eventName\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int|mixed\r\n     */\r\n    public function saveEventType($eventName, $fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['LID']);\r\n\r\n        $exists = $this->getEventType([\r\n            'EVENT_NAME' => $eventName,\r\n            'LID'        => $fields['LID'],\r\n        ]);\r\n\r\n        $exportExists = $this->prepareExportEventType($exists);\r\n        $fields = $this->prepareExportEventType($fields);\r\n\r\n        if (empty($exists)) {\r\n            $ok = $this->getMode('test') ? true : $this->addEventType($eventName, $fields);\r\n\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'EVENT_TYPE_CREATED',\r\n                    [\r\n                        '#NAME#' => $eventName . ':' . $fields['LID'],\r\n                    ]\r\n                )\r\n            );\r\n\r\n            return $ok;\r\n        }\r\n\r\n        if ($this->hasDiff($exportExists, $fields)) {\r\n            $ok = $this->getMode('test') ? true : $this->updateEventTypeById($exists['ID'], $fields);\r\n\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'EVENT_TYPE_UPDATED',\r\n                    [\r\n                        '#NAME#' => $eventName . ':' . $fields['LID'],\r\n                    ]\r\n                )\r\n            );\r\n\r\n            $this->outDiffIf($ok, $exportExists, $fields);\r\n            return $ok;\r\n        }\r\n\r\n        $ok = $this->getMode('test') ? true : $eventName;\r\n        if ($this->getMode('out_equal')) {\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'EVENT_TYPE_EQUAL',\r\n                    [\r\n                        '#NAME#' => $eventName . ':' . $fields['LID'],\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n        return $ok;\r\n    }\r\n\r\n    /**\r\n     * Удаляет тип почтового события\r\n     *\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function deleteEventType($fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['LID', 'EVENT_NAME']);\r\n\r\n        $exists = $this->getEventType([\r\n            'EVENT_NAME' => $fields['EVENT_NAME'],\r\n            'LID'        => $fields['LID'],\r\n        ]);\r\n\r\n        if (empty($exists)) {\r\n            return false;\r\n        }\r\n\r\n        if (CEventType::Delete([\"ID\" => $exists['ID']])) {\r\n            return true;\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_CANT_DELETE_EVENT_TYPE',\r\n                [\r\n                    '#NAME#' => $fields['EVENT_NAME'] . ':' . $fields['LID'],\r\n                ]\r\n            )\r\n        );\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Удаляет почтовый шаблон\r\n     *\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function deleteEventMessage($fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['SUBJECT', 'EVENT_NAME']);\r\n\r\n        $exists = $this->getEventMessage([\r\n            'EVENT_NAME' => $fields['EVENT_NAME'],\r\n            'SUBJECT'    => $fields['SUBJECT'],\r\n        ]);\r\n\r\n        if (empty($exists)) {\r\n            return false;\r\n        }\r\n\r\n        if (CEventMessage::Delete($exists['ID'])) {\r\n            return true;\r\n        };\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_CANT_DELETE_EVENT_MESSAGE',\r\n                [\r\n                    '#NAME#' => $fields['EVENT_NAME'] . ':' . $fields['SUBJECT'],\r\n                ]\r\n            )\r\n        );\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Добавляет тип почтового события\r\n     *\r\n     * @param       $eventName\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int\r\n     */\r\n    public function addEventType($eventName, $fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['LID', 'NAME']);\r\n        $fields['EVENT_NAME'] = $eventName;\r\n\r\n        $event = new CEventType;\r\n        $id = $event->Add($fields);\r\n\r\n        if ($id) {\r\n            return $id;\r\n        }\r\n\r\n        $this->throwApplicationExceptionIfExists(__METHOD__);\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_EVENT_TYPE_NOT_ADDED',\r\n                [\r\n                    '#NAME#' => $eventName,\r\n                ]\r\n            )\r\n        );\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Добавляет почтовый шаблон\r\n     *\r\n     * @param       $eventName\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int\r\n     */\r\n    public function addEventMessage($eventName, $fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['LID', 'SUBJECT']);\r\n\r\n        $default = [\r\n            'ACTIVE'     => 'Y',\r\n            'EMAIL_FROM' => '#DEFAULT_EMAIL_FROM#',\r\n            'EMAIL_TO'   => '#EMAIL_TO#',\r\n            'BCC'        => '',\r\n            'BODY_TYPE'  => 'text',\r\n            'MESSAGE'    => '',\r\n        ];\r\n\r\n        $fields = array_merge($default, $fields);\r\n        $fields['EVENT_NAME'] = $eventName;\r\n\r\n        $event = new CEventMessage;\r\n        $id = $event->Add($fields);\r\n\r\n        if ($id) {\r\n            return $id;\r\n        }\r\n\r\n        $this->throwApplicationExceptionIfExists(__METHOD__);\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_EVENT_MESSAGE_NOT_ADDED',\r\n                [\r\n                    '#NAME#' => $eventName,\r\n                ]\r\n            )\r\n        );\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param $filter\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool\r\n     * @deprecated use updateEventMessage\r\n     */\r\n    public function updateEventMessageByFilter($filter, $fields)\r\n    {\r\n        return $this->updateEventMessage($filter, $fields);\r\n    }\r\n\r\n    protected function prepareEventMessage($item)\r\n    {\r\n        if (empty($item['ID'])) {\r\n            return $item;\r\n        }\r\n        $item['LID'] = $this->getEventMessageSites($item['ID']);\r\n        return $item;\r\n    }\r\n\r\n    protected function prepareExportEventType($item)\r\n    {\r\n        if (empty($item)) {\r\n            return $item;\r\n        }\r\n\r\n        unset($item['ID']);\r\n        unset($item['EVENT_NAME']);\r\n\r\n        return $item;\r\n    }\r\n\r\n    protected function prepareExportEventMessage($item)\r\n    {\r\n        if (empty($item)) {\r\n            return $item;\r\n        }\r\n\r\n        unset($item['ID']);\r\n        unset($item['SITE_ID']);\r\n        unset($item['TIMESTAMP_X']);\r\n        unset($item['MESSAGE_PHP']);\r\n        unset($item['EVENT_NAME']);\r\n        unset($item['EVENT_MESSAGE_TYPE_ID']);\r\n        unset($item['EVENT_MESSAGE_TYPE_NAME']);\r\n        unset($item['EVENT_MESSAGE_TYPE_EVENT_NAME']);\r\n\r\n        return $item;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/eventhelper.php b/local/modules/sprint.migration/lib/helpers/eventhelper.php
--- a/local/modules/sprint.migration/lib/helpers/eventhelper.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/eventhelper.php	(date 1670844554000)
@@ -110,6 +110,47 @@
         return $result;
     }
 
+    public function getEventMessageById($messageId)
+    {
+        $item = CEventMessage::GetByID($messageId)->Fetch();
+        if ($item) {
+            return $this->prepareEventMessage($item);
+        }
+        return false;
+    }
+
+    public function getEventMessageUidFilterById($messageId)
+    {
+        $item = CEventMessage::GetByID($messageId)->Fetch();
+        if ($item) {
+            return [
+                'EVENT_NAME' => $item['EVENT_NAME'],
+                'SUBJECT'    => $item['SUBJECT'],
+            ];
+        }
+        return $messageId;
+    }
+
+    public function getEventMessageIdByUidFilter($templateId)
+    {
+        if (empty($templateId)) {
+            return false;
+        }
+
+        if (is_numeric($templateId)) {
+            return $templateId;
+        }
+
+        if (is_array($templateId) && isset($templateId['EVENT_NAME'])) {
+            $item = $this->getEventMessage($templateId);
+            if ($item) {
+                return $item['ID'];
+            }
+        }
+
+        return false;
+    }
+
     /**
      * Получает список сайтов для почтового шаблона
      *
@@ -197,10 +238,12 @@
     {
         $this->checkRequiredKeys(__METHOD__, $fields, ['SUBJECT', 'LID']);
 
-        $item = $this->getEventMessage([
-            'EVENT_NAME' => $eventName,
-            'SUBJECT'    => $fields['SUBJECT'],
-        ]);
+        $item = $this->getEventMessage(
+            [
+                'EVENT_NAME' => $eventName,
+                'SUBJECT'    => $fields['SUBJECT'],
+            ]
+        );
 
         if ($item) {
             return $item['ID'];
@@ -308,10 +351,12 @@
     {
         $this->checkRequiredKeys(__METHOD__, $fields, ['SUBJECT', 'LID']);
 
-        $exists = $this->getEventMessage([
-            'EVENT_NAME' => $eventName,
-            'SUBJECT'    => $fields['SUBJECT'],
-        ]);
+        $exists = $this->getEventMessage(
+            [
+                'EVENT_NAME' => $eventName,
+                'SUBJECT'    => $fields['SUBJECT'],
+            ]
+        );
 
         $exportExists = $this->prepareExportEventMessage($exists);
         $fields = $this->prepareExportEventMessage($fields);
@@ -347,19 +392,7 @@
             return $ok;
         }
 
-        $ok = $this->getMode('test') ? true : $eventName;
-        if ($this->getMode('out_equal')) {
-            $this->outNoticeIf(
-                $ok,
-                Locale::getMessage(
-                    'EVENT_MESSAGE_EQUAL',
-                    [
-                        '#NAME#' => $eventName . ':' . $fields['SUBJECT'],
-                    ]
-                )
-            );
-        }
-        return $ok;
+        return $this->getMode('test') ? true : $eventName;
     }
 
     /**
@@ -417,19 +450,7 @@
             return $ok;
         }
 
-        $ok = $this->getMode('test') ? true : $eventName;
-        if ($this->getMode('out_equal')) {
-            $this->outNoticeIf(
-                $ok,
-                Locale::getMessage(
-                    'EVENT_TYPE_EQUAL',
-                    [
-                        '#NAME#' => $eventName . ':' . $fields['LID'],
-                    ]
-                )
-            );
-        }
-        return $ok;
+        return $this->getMode('test') ? true : $eventName;
     }
 
     /**
@@ -481,10 +502,12 @@
     {
         $this->checkRequiredKeys(__METHOD__, $fields, ['SUBJECT', 'EVENT_NAME']);
 
-        $exists = $this->getEventMessage([
-            'EVENT_NAME' => $fields['EVENT_NAME'],
-            'SUBJECT'    => $fields['SUBJECT'],
-        ]);
+        $exists = $this->getEventMessage(
+            [
+                'EVENT_NAME' => $fields['EVENT_NAME'],
+                'SUBJECT'    => $fields['SUBJECT'],
+            ]
+        );
 
         if (empty($exists)) {
             return false;
Index: local/modules/sprint.migration/lib/helpers/traits/iblock/iblockfieldtrait.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers\\Traits\\Iblock;\r\n\r\nuse CIBlock;\r\nuse Sprint\\Migration\\Locale;\r\n\r\ntrait IblockFieldTrait\r\n{\r\n    /**\r\n     * Получает список полей инфоблока\r\n     *\r\n     * @param $iblockId\r\n     *\r\n     * @return array|bool\r\n     */\r\n    public function getIblockFields($iblockId)\r\n    {\r\n        return CIBlock::GetFields($iblockId);\r\n    }\r\n\r\n    /**\r\n     * Сохраняет поля инфоблока\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $fields\r\n     *\r\n     * @return bool\r\n     */\r\n    public function saveIblockFields($iblockId, $fields = [])\r\n    {\r\n        $exists = CIBlock::GetFields($iblockId);\r\n\r\n        $exportExists = $this->prepareExportIblockFields($exists);\r\n        $fields = $this->prepareExportIblockFields($fields);\r\n\r\n        $fields = array_replace_recursive($exportExists, $fields);\r\n\r\n        if (empty($exists)) {\r\n            $ok = $this->getMode('test') || $this->updateIblockFields($iblockId, $fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'IB_FIELDS_CREATED',\r\n                    [\r\n                        '#NAME#' => $iblockId,\r\n                    ]\r\n                )\r\n            );\r\n            return $ok;\r\n        }\r\n\r\n        if ($this->hasDiff($exportExists, $fields)) {\r\n            $ok = $this->getMode('test') || $this->updateIblockFields($iblockId, $fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'IB_FIELDS_UPDATED',\r\n                    [\r\n                        '#NAME#' => $iblockId,\r\n                    ]\r\n                )\r\n            );\r\n            $this->outDiffIf($ok, $exportExists, $fields);\r\n            return $ok;\r\n        }\r\n\r\n        if ($this->getMode('out_equal')) {\r\n            $this->out(\r\n                Locale::getMessage(\r\n                    'IB_FIELDS_EQUAL',\r\n                    [\r\n                        '#NAME#' => $iblockId,\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Получает список полей инфоблока\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param $iblockId\r\n     *\r\n     * @return array\r\n     */\r\n    public function exportIblockFields($iblockId)\r\n    {\r\n        return $this->prepareExportIblockFields(\r\n            $this->getIblockFields($iblockId)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Обновляет поля инфоблока\r\n     *\r\n     * @param $iblockId\r\n     * @param $fields\r\n     *\r\n     * @return bool\r\n     */\r\n    public function updateIblockFields($iblockId, $fields)\r\n    {\r\n        if ($iblockId && !empty($fields)) {\r\n            CIBlock::SetFields($iblockId, $fields);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param $fields\r\n     *\r\n     * @deprecated\r\n     */\r\n    public function mergeIblockFields($iblockId, $fields)\r\n    {\r\n        $this->saveIblockFields($iblockId, $fields);\r\n    }\r\n\r\n    public function exportIblockElementFields($iblockId)\r\n    {\r\n        return $this->prepareExportIblockElementFields(\r\n            $this->getIblockFields($iblockId)\r\n        );\r\n    }\r\n\r\n    protected function prepareExportIblockFields($fields)\r\n    {\r\n        if (empty($fields)) {\r\n            return $fields;\r\n        }\r\n\r\n        $exportFields = [];\r\n        foreach ($fields as $code => $field) {\r\n            if ($field['VISIBLE'] == 'N' || preg_match('/^(LOG_)/', $code)) {\r\n                continue;\r\n            }\r\n            $exportFields[$code] = $field;\r\n        }\r\n\r\n        return $exportFields;\r\n    }\r\n\r\n    protected function prepareExportIblockElementFields($fields)\r\n    {\r\n        if (empty($fields)) {\r\n            return $fields;\r\n        }\r\n\r\n        $exportFields = [];\r\n        foreach ($fields as $code => $field) {\r\n            if ($field['VISIBLE'] == 'N' || preg_match('/^(SECTION_|LOG_)/', $code)) {\r\n                continue;\r\n            }\r\n            $exportFields[$code] = $field;\r\n        }\r\n\r\n        return $exportFields;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/traits/iblock/iblockfieldtrait.php b/local/modules/sprint.migration/lib/helpers/traits/iblock/iblockfieldtrait.php
--- a/local/modules/sprint.migration/lib/helpers/traits/iblock/iblockfieldtrait.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/traits/iblock/iblockfieldtrait.php	(date 1670844554000)
@@ -65,17 +65,6 @@
             return $ok;
         }
 
-        if ($this->getMode('out_equal')) {
-            $this->out(
-                Locale::getMessage(
-                    'IB_FIELDS_EQUAL',
-                    [
-                        '#NAME#' => $iblockId,
-                    ]
-                )
-            );
-        }
-
         return true;
     }
 
@@ -131,35 +120,15 @@
 
     protected function prepareExportIblockFields($fields)
     {
-        if (empty($fields)) {
-            return $fields;
-        }
-
-        $exportFields = [];
-        foreach ($fields as $code => $field) {
-            if ($field['VISIBLE'] == 'N' || preg_match('/^(LOG_)/', $code)) {
-                continue;
-            }
-            $exportFields[$code] = $field;
-        }
-
-        return $exportFields;
+        return array_filter($fields, function ($field, $code) {
+            return ($field['VISIBLE'] != 'N');
+        }, ARRAY_FILTER_USE_BOTH);
     }
 
     protected function prepareExportIblockElementFields($fields)
     {
-        if (empty($fields)) {
-            return $fields;
-        }
-
-        $exportFields = [];
-        foreach ($fields as $code => $field) {
-            if ($field['VISIBLE'] == 'N' || preg_match('/^(SECTION_|LOG_)/', $code)) {
-                continue;
-            }
-            $exportFields[$code] = $field;
-        }
-
-        return $exportFields;
+        return array_filter($fields, function ($field, $code) {
+            return !($field['VISIBLE'] == 'N' || preg_match('/^(SECTION_|LOG_)/', $code));
+        },ARRAY_FILTER_USE_BOTH);
     }
 }
Index: local/modules/sprint.migration/lib/helpers/traits/iblock/iblockpropertytrait.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers\\Traits\\Iblock;\r\n\r\nuse Bitrix\\Iblock\\Model\\PropertyFeature;\r\nuse Bitrix\\Iblock\\PropertyFeatureTable;\r\nuse CIBlockProperty;\r\nuse CIBlockPropertyEnum;\r\nuse Exception;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Locale;\r\n\r\ntrait IblockPropertyTrait\r\n{\r\n    /**\r\n     * Сохраняет свойство инфоблока\r\n     * Создаст если не было, обновит если существует и отличается\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|mixed\r\n     */\r\n    public function saveProperty($iblockId, $fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['CODE']);\r\n\r\n        $exists = $this->getProperty($iblockId, $fields['CODE']);\r\n        $exportExists = $this->prepareExportProperty($exists);\r\n        $fields = $this->prepareExportProperty($fields);\r\n\r\n        if (empty($exists)) {\r\n            $ok = $this->getMode('test') ? true : $this->addProperty($iblockId, $fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'IB_PROPERTY_CREATED',\r\n                    [\r\n                        '#IBLOCK_ID#' => $iblockId,\r\n                        '#NAME#'      => $fields['CODE'],\r\n                    ]\r\n                )\r\n            );\r\n            return $ok;\r\n        }\r\n\r\n        if ($this->hasDiff($exportExists, $fields)) {\r\n            $ok = $this->getMode('test') ? true : $this->updatePropertyById($exists['ID'], $fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'IB_PROPERTY_UPDATED',\r\n                    [\r\n                        '#IBLOCK_ID#' => $iblockId,\r\n                        '#NAME#'      => $fields['CODE'],\r\n                    ]\r\n                )\r\n            );\r\n            $this->outDiffIf($ok, $exportExists, $fields);\r\n            return $ok;\r\n        }\r\n\r\n        $ok = $this->getMode('test') ? true : $exists['ID'];\r\n        if ($this->getMode('out_equal')) {\r\n            $this->outIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'IB_PROPERTY_EQUAL',\r\n                    [\r\n                        '#IBLOCK_ID#' => $iblockId,\r\n                        '#NAME#'      => $fields['CODE'],\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n        return $ok;\r\n    }\r\n\r\n    /**\r\n     * Получает свойство инфоблока\r\n     *\r\n     * @param $iblockId\r\n     * @param $code int|array - код или фильтр\r\n     *\r\n     * @return array|bool\r\n     */\r\n    public function getProperty($iblockId, $code)\r\n    {\r\n        /** @compatibility filter or code */\r\n        $filter = is_array($code)\r\n            ? $code\r\n            : [\r\n                'CODE' => $code,\r\n            ];\r\n\r\n        $filter['IBLOCK_ID'] = $iblockId;\r\n        $filter['CHECK_PERMISSIONS'] = 'N';\r\n        /* do not use =CODE in filter */\r\n        $property = CIBlockProperty::GetList(['SORT' => 'ASC'], $filter)->Fetch();\r\n        return $this->prepareProperty($property);\r\n    }\r\n\r\n    /**\r\n     * Получает значения списков для свойств инфоблоков\r\n     *\r\n     * @param array $filter\r\n     *\r\n     * @return array\r\n     */\r\n    public function getPropertyEnums($filter = [])\r\n    {\r\n        $result = [];\r\n        $dbres = CIBlockPropertyEnum::GetList(\r\n            [\r\n                'SORT'  => 'ASC',\r\n                'VALUE' => 'ASC',\r\n            ], $filter\r\n        );\r\n        while ($item = $dbres->Fetch()) {\r\n            $result[] = $item;\r\n        }\r\n        return $result;\r\n    }\r\n\r\n    public function getPropertyFeatures($propertyId)\r\n    {\r\n        if (!class_exists('\\Bitrix\\Iblock\\Model\\PropertyFeature')) {\r\n            return [];\r\n        }\r\n        if (!class_exists('\\Bitrix\\Iblock\\PropertyFeatureTable')) {\r\n            return [];\r\n        }\r\n\r\n        $features = [];\r\n        try {\r\n            if (PropertyFeature::isEnabledFeatures()) {\r\n                $features = PropertyFeatureTable::getList([\r\n                    'select' => ['ID', 'MODULE_ID', 'FEATURE_ID', 'IS_ENABLED'],\r\n                    'filter' => ['=PROPERTY_ID' => (int)$propertyId],\r\n                ])->fetchAll();\r\n            }\r\n        } catch (Exception $e) {\r\n        }\r\n\r\n        return $features;\r\n    }\r\n\r\n    /**\r\n     * Получает значения списков для свойства инфоблока\r\n     *\r\n     * @param $iblockId\r\n     * @param $propertyId\r\n     *\r\n     * @return array\r\n     */\r\n    public function getPropertyEnumValues($iblockId, $propertyId)\r\n    {\r\n        return $this->getPropertyEnums(\r\n            [\r\n                'IBLOCK_ID'   => $iblockId,\r\n                'PROPERTY_ID' => $propertyId,\r\n            ]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Получает свойство инфоблока\r\n     *\r\n     * @param $iblockId\r\n     * @param $code int|array - код или фильтр\r\n     *\r\n     * @return int\r\n     */\r\n    public function getPropertyId($iblockId, $code)\r\n    {\r\n        $item = $this->getProperty($iblockId, $code);\r\n        return ($item && isset($item['ID'])) ? $item['ID'] : 0;\r\n    }\r\n\r\n    /**\r\n     * Получает свойства инфоблока\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $filter\r\n     *\r\n     * @return array\r\n     */\r\n    public function getProperties($iblockId, $filter = [])\r\n    {\r\n        $filter['IBLOCK_ID'] = $iblockId;\r\n        $filter['CHECK_PERMISSIONS'] = 'N';\r\n\r\n        $filterIds = false;\r\n        if (isset($filter['ID']) && is_array($filter['ID'])) {\r\n            $filterIds = $filter['ID'];\r\n            unset($filter['ID']);\r\n        }\r\n\r\n        $dbres = CIBlockProperty::GetList(['SORT' => 'ASC'], $filter);\r\n\r\n        $result = [];\r\n\r\n        while ($property = $dbres->Fetch()) {\r\n            if ($filterIds) {\r\n                if (in_array($property['ID'], $filterIds)) {\r\n                    $result[] = $this->prepareProperty($property);\r\n                }\r\n            } else {\r\n                $result[] = $this->prepareProperty($property);\r\n            }\r\n        }\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * Добавляет свойство инфоблока если его не существует\r\n     *\r\n     * @param int   $iblockId\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function addPropertyIfNotExists($iblockId, $fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['CODE']);\r\n\r\n        $property = $this->getProperty($iblockId, $fields['CODE']);\r\n        if ($property) {\r\n            return $property['ID'];\r\n        }\r\n\r\n        return $this->addProperty($iblockId, $fields);\r\n    }\r\n\r\n    /**\r\n     * Добавляет свойство инфоблока\r\n     *\r\n     * @param $iblockId\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function addProperty($iblockId, $fields)\r\n    {\r\n        $default = [\r\n            'NAME'           => '',\r\n            'ACTIVE'         => 'Y',\r\n            'SORT'           => '500',\r\n            'CODE'           => '',\r\n            'PROPERTY_TYPE'  => 'S',\r\n            'USER_TYPE'      => '',\r\n            'ROW_COUNT'      => '1',\r\n            'COL_COUNT'      => '30',\r\n            'LIST_TYPE'      => 'L',\r\n            'MULTIPLE'       => 'N',\r\n            'IS_REQUIRED'    => 'N',\r\n            'FILTRABLE'      => 'Y',\r\n            'LINK_IBLOCK_ID' => 0,\r\n        ];\r\n\r\n        if (!empty($fields['VALUES'])) {\r\n            $default['PROPERTY_TYPE'] = 'L';\r\n        }\r\n\r\n        if (!empty($fields['LINK_IBLOCK_ID'])) {\r\n            $default['PROPERTY_TYPE'] = 'E';\r\n        }\r\n\r\n        $fields = array_replace_recursive($default, $fields);\r\n\r\n        if (false !== strpos($fields['PROPERTY_TYPE'], ':')) {\r\n            list($ptype, $utype) = explode(':', $fields['PROPERTY_TYPE']);\r\n            $fields['PROPERTY_TYPE'] = $ptype;\r\n            $fields['USER_TYPE'] = $utype;\r\n        }\r\n\r\n        if (false !== strpos($fields['LINK_IBLOCK_ID'], ':')) {\r\n            $fields['LINK_IBLOCK_ID'] = $this->getIblockIdByUid($fields['LINK_IBLOCK_ID']);\r\n        }\r\n\r\n        $fields['IBLOCK_ID'] = $iblockId;\r\n\r\n        $ib = new CIBlockProperty;\r\n        $propertyId = $ib->Add($fields);\r\n\r\n        if ($propertyId) {\r\n            return $propertyId;\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $ib->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * Удаляет свойство инфоблока если оно существует\r\n     *\r\n     * @param $iblockId\r\n     * @param $code\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|void\r\n     */\r\n    public function deletePropertyIfExists($iblockId, $code)\r\n    {\r\n        $property = $this->getProperty($iblockId, $code);\r\n        if (!$property) {\r\n            return false;\r\n        }\r\n\r\n        return $this->deletePropertyById($property['ID']);\r\n    }\r\n\r\n    /**\r\n     * Удаляет свойство инфоблока\r\n     *\r\n     * @param $propertyId\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|void\r\n     */\r\n    public function deletePropertyById($propertyId)\r\n    {\r\n        $ib = new CIBlockProperty;\r\n        if ($ib->Delete($propertyId)) {\r\n            return true;\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $ib->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * Обновляет свойство инфоблока если оно существует\r\n     *\r\n     * @param $iblockId\r\n     * @param $code\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int|void\r\n     */\r\n    public function updatePropertyIfExists($iblockId, $code, $fields)\r\n    {\r\n        $property = $this->getProperty($iblockId, $code);\r\n        if (!$property) {\r\n            return false;\r\n        }\r\n        return $this->updatePropertyById($property['ID'], $fields);\r\n    }\r\n\r\n    /**\r\n     * Обновляет свойство инфоблока\r\n     *\r\n     * @param $propertyId\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function updatePropertyById($propertyId, $fields)\r\n    {\r\n        if (!empty($fields['VALUES']) && !isset($fields['PROPERTY_TYPE'])) {\r\n            $fields['PROPERTY_TYPE'] = 'L';\r\n        }\r\n\r\n        if (!empty($fields['LINK_IBLOCK_ID']) && !isset($fields['PROPERTY_TYPE'])) {\r\n            $fields['PROPERTY_TYPE'] = 'E';\r\n        }\r\n\r\n        if (false !== strpos($fields['PROPERTY_TYPE'], ':')) {\r\n            list($ptype, $utype) = explode(':', $fields['PROPERTY_TYPE']);\r\n            $fields['PROPERTY_TYPE'] = $ptype;\r\n            $fields['USER_TYPE'] = $utype;\r\n        }\r\n\r\n        if (false !== strpos($fields['LINK_IBLOCK_ID'], ':')) {\r\n            $fields['LINK_IBLOCK_ID'] = $this->getIblockIdByUid($fields['LINK_IBLOCK_ID']);\r\n        }\r\n\r\n        if (isset($fields['VALUES']) && is_array($fields['VALUES'])) {\r\n            $existsEnums = $this->getPropertyEnums(\r\n                [\r\n                    'PROPERTY_ID' => $propertyId,\r\n                ]\r\n            );\r\n\r\n            $newValues = [];\r\n            foreach ($fields['VALUES'] as $index => $item) {\r\n                foreach ($existsEnums as $existsEnum) {\r\n                    if ($existsEnum['XML_ID'] == $item['XML_ID']) {\r\n                        $item['ID'] = $existsEnum['ID'];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!empty($item['ID'])) {\r\n                    $newValues[$item['ID']] = $item;\r\n                } else {\r\n                    $newValues['n' . $index] = $item;\r\n                }\r\n            }\r\n\r\n            $fields['VALUES'] = $newValues;\r\n        }\r\n\r\n        $ib = new CIBlockProperty();\r\n        if ($ib->Update($propertyId, $fields)) {\r\n            return $propertyId;\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $ib->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * Получает свойство инфоблока\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param      $iblockId\r\n     * @param bool $code\r\n     *\r\n     * @throws HelperException\r\n     * @return array|void\r\n     */\r\n    public function exportProperty($iblockId, $code = false)\r\n    {\r\n        $export = $this->prepareExportProperty(\r\n            $this->getProperty($iblockId, $code)\r\n        );\r\n\r\n        if (!empty($export['CODE'])) {\r\n            return $export;\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_IB_PROPERTY_CODE_NOT_FOUND'\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Получает свойства инфоблока\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $filter\r\n     *\r\n     * @return array\r\n     */\r\n    public function exportProperties($iblockId, $filter = [])\r\n    {\r\n        $exports = [];\r\n        $items = $this->getProperties($iblockId, $filter);\r\n        foreach ($items as $item) {\r\n            if (!empty($item['CODE'])) {\r\n                if (!empty($item['LINK_IBLOCK_ID'])) {\r\n                    try {\r\n                        $item['LINK_IBLOCK_ID'] = $this->getIblockUid($item['LINK_IBLOCK_ID']);\r\n                    } catch (HelperException $e) {\r\n                        continue;\r\n                    }\r\n                }\r\n                $exports[] = $this->prepareExportProperty($item);\r\n            }\r\n        }\r\n        return $exports;\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param $code\r\n     *\r\n     * @throws HelperException\r\n     * @return bool\r\n     * @deprecated\r\n     */\r\n    public function deleteProperty($iblockId, $code)\r\n    {\r\n        return $this->deletePropertyIfExists($iblockId, $code);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param $code\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|mixed\r\n     * @deprecated\r\n     */\r\n    public function updateProperty($iblockId, $code, $fields)\r\n    {\r\n        return $this->updatePropertyIfExists($iblockId, $code, $fields);\r\n    }\r\n\r\n    public function getPropertyType($iblockId, $code)\r\n    {\r\n        $prop = $this->getProperty($iblockId, $code);\r\n        return $prop['PROPERTY_TYPE'];\r\n    }\r\n\r\n    public function getPropertyLinkIblockId($iblockId, $code)\r\n    {\r\n        $prop = $this->getProperty($iblockId, $code);\r\n        return $prop['LINK_IBLOCK_ID'];\r\n    }\r\n\r\n    public function isPropertyMultiple($iblockId, $code)\r\n    {\r\n        $prop = $this->getProperty($iblockId, $code);\r\n        return ($prop['MULTIPLE'] == 'Y');\r\n    }\r\n\r\n    public function getPropertyEnumIdByXmlId($iblockId, $code, $xmlId)\r\n    {\r\n        $prop = $this->getProperty($iblockId, $code);\r\n        if (empty($prop['VALUES']) || !is_array($prop['VALUES'])) {\r\n            return '';\r\n        }\r\n\r\n        foreach ($prop['VALUES'] as $val) {\r\n            if ($val['XML_ID'] == $xmlId) {\r\n                return $val['ID'];\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    protected function prepareProperty($property)\r\n    {\r\n        if (!empty($property['ID']) && !empty($property['IBLOCK_ID'])) {\r\n            if ($property['PROPERTY_TYPE'] == 'L') {\r\n                $property['VALUES'] = $this->getPropertyEnums(\r\n                    [\r\n                        'IBLOCK_ID'   => $property['IBLOCK_ID'],\r\n                        'PROPERTY_ID' => $property['ID'],\r\n                    ]\r\n                );\r\n            }\r\n\r\n            $features = $this->getPropertyFeatures($property['ID']);\r\n            if (!empty($features)) {\r\n                $property['FEATURES'] = $features;\r\n            }\r\n        }\r\n\r\n        return $property;\r\n    }\r\n\r\n    protected function prepareExportProperty($prop)\r\n    {\r\n        if (empty($prop)) {\r\n            return $prop;\r\n        }\r\n\r\n        if (!empty($prop['VALUES']) && is_array($prop['VALUES'])) {\r\n            $exportValues = [];\r\n\r\n            foreach ($prop['VALUES'] as $item) {\r\n                $exportValues[] = [\r\n                    'VALUE'  => $item['VALUE'],\r\n                    'DEF'    => $item['DEF'],\r\n                    'SORT'   => $item['SORT'],\r\n                    'XML_ID' => $item['XML_ID'],\r\n                ];\r\n            }\r\n\r\n            $prop['VALUES'] = $exportValues;\r\n        }\r\n\r\n        if (!empty($prop['FEATURES']) && is_array($prop['FEATURES'])) {\r\n            $exportFeatures = [];\r\n            foreach ($prop['FEATURES'] as $item) {\r\n                $exportFeatures[] = [\r\n                    'MODULE_ID'  => $item['MODULE_ID'],\r\n                    'FEATURE_ID' => $item['FEATURE_ID'],\r\n                    'IS_ENABLED' => $item['IS_ENABLED'],\r\n                ];\r\n            }\r\n\r\n            $prop['FEATURES'] = $exportFeatures;\r\n        }\r\n\r\n        if (!empty($prop['LINK_IBLOCK_ID'])) {\r\n            $prop['LINK_IBLOCK_ID'] = $this->getIblockUid($prop['LINK_IBLOCK_ID']);\r\n        }\r\n\r\n        unset($prop['ID']);\r\n        unset($prop['IBLOCK_ID']);\r\n        unset($prop['TIMESTAMP_X']);\r\n        unset($prop['TMP_ID']);\r\n\r\n        return $prop;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/traits/iblock/iblockpropertytrait.php b/local/modules/sprint.migration/lib/helpers/traits/iblock/iblockpropertytrait.php
--- a/local/modules/sprint.migration/lib/helpers/traits/iblock/iblockpropertytrait.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/traits/iblock/iblockpropertytrait.php	(date 1670844554000)
@@ -61,20 +61,7 @@
             return $ok;
         }
 
-        $ok = $this->getMode('test') ? true : $exists['ID'];
-        if ($this->getMode('out_equal')) {
-            $this->outIf(
-                $ok,
-                Locale::getMessage(
-                    'IB_PROPERTY_EQUAL',
-                    [
-                        '#IBLOCK_ID#' => $iblockId,
-                        '#NAME#'      => $fields['CODE'],
-                    ]
-                )
-            );
-        }
-        return $ok;
+        return $this->getMode('test') ? true : $exists['ID'];
     }
 
     /**
Index: local/modules/sprint.migration/lib/helpers/traits/iblock/iblocksectiontrait.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers\\Traits\\Iblock;\r\n\r\nuse CIBlockSection;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Locale;\r\n\r\ntrait IblockSectionTrait\r\n{\r\n    /**\r\n     * Получает секцию инфоблока\r\n     *\r\n     * @param $iblockId\r\n     * @param $code string|array - код или фильтр\r\n     *\r\n     * @return array|false\r\n     */\r\n    public function getSection($iblockId, $code)\r\n    {\r\n        /** @compatibility filter or code */\r\n        $filter = is_array($code)\r\n            ? $code\r\n            : [\r\n                '=CODE' => $code,\r\n            ];\r\n\r\n        $sections = $this->getSections($iblockId, $filter);\r\n        return (isset($sections[0])) ? $sections[0] : false;\r\n    }\r\n\r\n    /**\r\n     * Получает id секции инфоблока\r\n     *\r\n     * @param $iblockId\r\n     * @param $code string|array - код или фильтр\r\n     *\r\n     * @return int|mixed\r\n     */\r\n    public function getSectionId($iblockId, $code)\r\n    {\r\n        $item = $this->getSection($iblockId, $code);\r\n        return ($item && isset($item['ID'])) ? $item['ID'] : 0;\r\n    }\r\n\r\n    /**\r\n     * Получает секции инфоблока\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $filter\r\n     *\r\n     * @return array\r\n     */\r\n    public function getSections($iblockId, $filter = [])\r\n    {\r\n        $filter['IBLOCK_ID'] = $iblockId;\r\n        $filter['CHECK_PERMISSIONS'] = 'N';\r\n\r\n        $dbres = CIBlockSection::GetList(\r\n            [\r\n                'SORT' => 'ASC',\r\n            ], $filter, false, [\r\n                'ID',\r\n                'NAME',\r\n                'CODE',\r\n                'IBLOCK_SECTION_ID',\r\n                'SORT',\r\n                'ACTIVE',\r\n                'XML_ID',\r\n                'PICTURE',\r\n                'DESCRIPTION',\r\n                'DESCRIPTION_TYPE',\r\n                'LEFT_MARGIN',\r\n                'RIGHT_MARGIN',\r\n                'DEPTH_LEVEL',\r\n                'DETAIL_PICTURE',\r\n                'UF_*',\r\n            ]\r\n        );\r\n\r\n        return $this->fetchAll($dbres);\r\n    }\r\n\r\n    /**\r\n     * Сохраняет категорию инфоблока\r\n     * Создаст если не было, обновит если существует (поиск по коду)\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int|mixed\r\n     */\r\n    public function saveSection($iblockId, $fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['CODE']);\r\n\r\n        $item = $this->getSection($iblockId, $fields['CODE']);\r\n        if (!empty($item['ID'])) {\r\n            return $this->updateSection($item['ID'], $fields);\r\n        }\r\n\r\n        return $this->addSection($iblockId, $fields);\r\n    }\r\n\r\n    /**\r\n     * Добавляет секцию инфоблока если она не существует\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int|mixed\r\n     */\r\n    public function addSectionIfNotExists($iblockId, $fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['CODE']);\r\n\r\n        $item = $this->getSection($iblockId, $fields['CODE']);\r\n        if ($item) {\r\n            return $item['ID'];\r\n        }\r\n\r\n        return $this->addSection($iblockId, $fields);\r\n    }\r\n\r\n    /**\r\n     * Добавляет секцию инфоблока\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function addSection($iblockId, $fields = [])\r\n    {\r\n        $default = [\r\n            'ACTIVE'            => 'Y',\r\n            'IBLOCK_SECTION_ID' => false,\r\n            'NAME'              => 'section',\r\n            'CODE'              => '',\r\n            'SORT'              => 100,\r\n            'PICTURE'           => false,\r\n            'DESCRIPTION'       => '',\r\n            'DESCRIPTION_TYPE'  => 'text',\r\n        ];\r\n\r\n        $fields = array_replace_recursive($default, $fields);\r\n        $fields['IBLOCK_ID'] = $iblockId;\r\n\r\n        $ib = new CIBlockSection;\r\n        $id = $ib->Add($fields);\r\n\r\n        if ($id) {\r\n            return $id;\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $ib->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * Обновляет секцию инфоблока если она существует\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function updateSectionIfExists($iblockId, $fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['CODE']);\r\n\r\n        $item = $this->getSection($iblockId, $fields['CODE']);\r\n        if (!$item) {\r\n            return false;\r\n        }\r\n\r\n        unset($fields['CODE']);\r\n\r\n        return $this->updateSection($item['ID'], $fields);\r\n    }\r\n\r\n    /**\r\n     * Обновляет секцию инфоблока\r\n     *\r\n     * @param $sectionId\r\n     * @param $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function updateSection($sectionId, $fields)\r\n    {\r\n        $ib = new CIBlockSection;\r\n        if ($ib->Update($sectionId, $fields)) {\r\n            return $sectionId;\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $ib->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * Удаляет секцию инфоблока если она существует\r\n     *\r\n     * @param $iblockId\r\n     * @param $code\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|void\r\n     */\r\n    public function deleteSectionIfExists($iblockId, $code)\r\n    {\r\n        $item = $this->getSection($iblockId, $code);\r\n        if (!$item) {\r\n            return false;\r\n        }\r\n\r\n        return $this->deleteSection($item['ID']);\r\n    }\r\n\r\n    /**\r\n     * Удаляет секцию инфоблока\r\n     *\r\n     * @param $sectionId\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|void\r\n     */\r\n    public function deleteSection($sectionId)\r\n    {\r\n        $ib = new CIBlockSection;\r\n        if ($ib->Delete($sectionId)) {\r\n            return true;\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $ib->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * Возвращает ID категории по пути из названий категорий\r\n     *\r\n     * Пример:\r\n     * ищем Категория3 которая находится по пути Категория1/Категория2/Категория3\r\n     * то $path = ['Категория1','Категория2','Категория3']\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $path\r\n     *\r\n     * @return int|mixed\r\n     */\r\n    public function getSectionIdByNamePath($iblockId, $path = [])\r\n    {\r\n        $sectionId = 0;\r\n        foreach ($path as $name) {\r\n            $sectionId = $this->getSectionId(\r\n                $iblockId, [\r\n                    '=NAME'      => $name,\r\n                    'SECTION_ID' => $sectionId,\r\n                ]\r\n            );\r\n        }\r\n        return $sectionId;\r\n    }\r\n\r\n    /**\r\n     * Возвращает путь из названий категорий до заданной\r\n     *\r\n     * @param $iblockId\r\n     * @param $sectionId\r\n     *\r\n     * @return array\r\n     */\r\n    public function getSectionNamePathById($iblockId, $sectionId)\r\n    {\r\n        $sectionId = intval($sectionId);\r\n        if ($sectionId > 0) {\r\n            $items = CIBlockSection::GetNavChain($iblockId, $sectionId, ['ID', 'NAME'], true);\r\n            return array_column($items, 'NAME');\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param      $iblockId\r\n     * @param      $tree\r\n     * @param bool $parentId\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    public function addSectionsFromTree($iblockId, $tree, $parentId = false)\r\n    {\r\n        foreach ($tree as $item) {\r\n            if (empty($item['NAME'])) {\r\n                $this->throwException(\r\n                    __METHOD__,\r\n                    Locale::getMessage(\r\n                        'ERR_IB_SECTION_NAME_NOT_FOUND'\r\n                    )\r\n                );\r\n            }\r\n\r\n            $childs = [];\r\n            if (isset($item['CHILDS'])) {\r\n                $childs = is_array($item['CHILDS']) ? $item['CHILDS'] : [];\r\n                unset($item['CHILDS']);\r\n            }\r\n\r\n            $item['IBLOCK_SECTION_ID'] = $parentId;\r\n\r\n            $sectionId = $this->getSectionId(\r\n                $iblockId, [\r\n                    '=NAME'      => $item['NAME'],\r\n                    'SECTION_ID' => $parentId,\r\n                ]\r\n            );\r\n\r\n            if (empty($sectionId)) {\r\n                $sectionId = $this->addSection($iblockId, $item);\r\n            }\r\n\r\n            if (!empty($childs)) {\r\n                $this->addSectionsFromTree($iblockId, $childs, $sectionId);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     *\r\n     * @return array\r\n     */\r\n    public function getSectionsTree($iblockId)\r\n    {\r\n        $sections = $this->getSections($iblockId);\r\n        return $this->buildSectionsTree($sections, 0, false);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param $sectionId\r\n     *\r\n     * @throws HelperException\r\n     * @return string\r\n     */\r\n    public function getSectionUniqNameById($iblockId, $sectionId)\r\n    {\r\n        if (empty($sectionId)) {\r\n            $this->throwException(\r\n                __METHOD__,\r\n                Locale::getMessage(\r\n                    'ERR_IB_SECTION_ID_EMPTY',\r\n                    [\r\n                        '#IBLOCK_ID#' => $iblockId,\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n\r\n        $section = CIBlockSection::GetList(\r\n            [],\r\n            [\r\n                'ID'        => $sectionId,\r\n                'IBLOCK_ID' => $iblockId,\r\n            ]\r\n        )->Fetch();\r\n\r\n        if (empty($section['ID'])) {\r\n            $this->throwException(\r\n                __METHOD__,\r\n                Locale::getMessage(\r\n                    'ERR_IB_SECTION_ID_NOT_FOUND',\r\n                    [\r\n                        '#IBLOCK_ID#'  => $iblockId,\r\n                        '#SECTION_ID#' => $sectionId,\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n\r\n        return $section['NAME'] . '|' . (int)$section['DEPTH_LEVEL'] . '|' . $section['CODE'];\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param $uniqName\r\n     *\r\n     * @throws HelperException\r\n     * @return int|mixed|string\r\n     */\r\n    public function getSectionIdByUniqName($iblockId, $uniqName)\r\n    {\r\n        if (empty($uniqName)) {\r\n            $this->throwException(\r\n                __METHOD__,\r\n                Locale::getMessage(\r\n                    'ERR_IB_SECTION_ID_EMPTY',\r\n                    [\r\n                        '#IBLOCK_ID#' => $iblockId,\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n\r\n        if (is_numeric($uniqName)) {\r\n            return $uniqName;\r\n        }\r\n\r\n        list($sectionName, $depthLevel, $code) = explode('|', $uniqName);\r\n\r\n        $filter = [\r\n            'NAME'        => $sectionName,\r\n            'DEPTH_LEVEL' => $depthLevel,\r\n            'IBLOCK_ID'   => $iblockId,\r\n        ];\r\n\r\n        if ($code) {\r\n            $filter['CODE'] = $code;\r\n        }\r\n\r\n        $section = CIBlockSection::GetList([], $filter)->Fetch();\r\n\r\n        if (empty($section['ID'])) {\r\n            $this->throwException(\r\n                __METHOD__,\r\n                Locale::getMessage(\r\n                    'ERR_IB_SECTION_ON_LEVEL_NOT_FOUND',\r\n                    [\r\n                        '#SECTION_NAME#' => $sectionName,\r\n                        '#DEPTH_LEVEL#'  => $depthLevel,\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n\r\n        return $section['ID'];\r\n    }\r\n\r\n    /**\r\n     * @param       $iblockId\r\n     * @param array $sectionIds\r\n     *\r\n     * @throws HelperException\r\n     * @return array\r\n     */\r\n    public function getSectionUniqNamesByIds($iblockId, $sectionIds = [])\r\n    {\r\n        $uniqNames = [];\r\n        $sectionIds = is_array($sectionIds) ? array_filter($sectionIds) : [];\r\n\r\n        if (empty($sectionIds)) {\r\n            return $uniqNames;\r\n        }\r\n        foreach ($sectionIds as $sectionId) {\r\n            $uniqNames[] = $this->getSectionUniqNameById($iblockId, $sectionId);\r\n        }\r\n\r\n        return $uniqNames;\r\n    }\r\n\r\n    /**\r\n     * @param       $iblockId\r\n     * @param array $uniqNames\r\n     *\r\n     * @throws HelperException\r\n     * @return array\r\n     */\r\n    public function getSectionIdsByUniqNames($iblockId, $uniqNames = [])\r\n    {\r\n        $ids = [];\r\n        $uniqNames = is_array($uniqNames) ? array_filter($uniqNames) : [];\r\n\r\n        if (empty($uniqNames)) {\r\n            return $ids;\r\n        }\r\n\r\n        foreach ($uniqNames as $uniqName) {\r\n            $ids[] = $this->getSectionIdByUniqName($iblockId, $uniqName);\r\n        }\r\n        return $ids;\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     *\r\n     * @return array\r\n     */\r\n    public function exportSectionsTree($iblockId)\r\n    {\r\n        $sections = $this->getSections($iblockId);\r\n        return $this->buildSectionsTree($sections, 0, true);\r\n    }\r\n\r\n    protected function buildSectionsTree(array &$sections, $parentId = 0, $export = false)\r\n    {\r\n        $branch = [];\r\n        foreach ($sections as $section) {\r\n            if ((int)$section['IBLOCK_SECTION_ID'] == $parentId) {\r\n                $childs = $this->buildSectionsTree($sections, $section['ID'], $export);\r\n\r\n                if ($export) {\r\n                    unset($section['ID']);\r\n                    unset($section['IBLOCK_SECTION_ID']);\r\n                    unset($section['LEFT_MARGIN']);\r\n                    unset($section['RIGHT_MARGIN']);\r\n                    unset($section['DEPTH_LEVEL']);\r\n                    unset($section['PICTURE']);\r\n                    unset($section['DETAIL_PICTURE']);\r\n                }\r\n\r\n                if (!empty($childs)) {\r\n                    $section['CHILDS'] = $childs;\r\n                }\r\n                $branch[] = $section;\r\n            }\r\n        }\r\n        return $branch;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/traits/iblock/iblocksectiontrait.php b/local/modules/sprint.migration/lib/helpers/traits/iblock/iblocksectiontrait.php
--- a/local/modules/sprint.migration/lib/helpers/traits/iblock/iblocksectiontrait.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/traits/iblock/iblocksectiontrait.php	(date 1670844554000)
@@ -343,9 +343,9 @@
      * @param $sectionId
      *
      * @throws HelperException
-     * @return string
+     * @return array
      */
-    public function getSectionUniqNameById($iblockId, $sectionId)
+    public function getSectionUniqFilterById($iblockId, $sectionId)
     {
         if (empty($sectionId)) {
             $this->throwException(
@@ -380,19 +380,19 @@
             );
         }
 
-        return $section['NAME'] . '|' . (int)$section['DEPTH_LEVEL'] . '|' . $section['CODE'];
+        return [
+            'NAME'        => $section['NAME'],
+            'DEPTH_LEVEL' => (int)$section['DEPTH_LEVEL'],
+            'CODE'        => $section['CODE'],
+        ];
     }
 
     /**
-     * @param $iblockId
-     * @param $uniqName
-     *
      * @throws HelperException
-     * @return int|mixed|string
      */
-    public function getSectionIdByUniqName($iblockId, $uniqName)
+    public function getSectionIdByUniqFilter($iblockId, $uniqFilter)
     {
-        if (empty($uniqName)) {
+        if (empty($uniqFilter)) {
             $this->throwException(
                 __METHOD__,
                 Locale::getMessage(
@@ -404,32 +404,19 @@
             );
         }
 
-        if (is_numeric($uniqName)) {
-            return $uniqName;
-        }
-
-        list($sectionName, $depthLevel, $code) = explode('|', $uniqName);
+        $uniqFilter['IBLOCK_ID'] = $iblockId;
 
-        $filter = [
-            'NAME'        => $sectionName,
-            'DEPTH_LEVEL' => $depthLevel,
-            'IBLOCK_ID'   => $iblockId,
-        ];
-
-        if ($code) {
-            $filter['CODE'] = $code;
-        }
-
-        $section = CIBlockSection::GetList([], $filter)->Fetch();
+        $section = CIBlockSection::GetList([], $uniqFilter)->Fetch();
 
         if (empty($section['ID'])) {
             $this->throwException(
                 __METHOD__,
                 Locale::getMessage(
-                    'ERR_IB_SECTION_ON_LEVEL_NOT_FOUND',
+                    'ERR_IB_SECTION_BY_FILTER_NOT_FOUND',
                     [
-                        '#SECTION_NAME#' => $sectionName,
-                        '#DEPTH_LEVEL#'  => $depthLevel,
+                        '#IBLOCK_ID#'   => $uniqFilter['IBLOCK_ID'],
+                        '#NAME#'        => $uniqFilter['NAME'],
+                        '#DEPTH_LEVEL#' => $uniqFilter['DEPTH_LEVEL'],
                     ]
                 )
             );
@@ -438,50 +425,6 @@
         return $section['ID'];
     }
 
-    /**
-     * @param       $iblockId
-     * @param array $sectionIds
-     *
-     * @throws HelperException
-     * @return array
-     */
-    public function getSectionUniqNamesByIds($iblockId, $sectionIds = [])
-    {
-        $uniqNames = [];
-        $sectionIds = is_array($sectionIds) ? array_filter($sectionIds) : [];
-
-        if (empty($sectionIds)) {
-            return $uniqNames;
-        }
-        foreach ($sectionIds as $sectionId) {
-            $uniqNames[] = $this->getSectionUniqNameById($iblockId, $sectionId);
-        }
-
-        return $uniqNames;
-    }
-
-    /**
-     * @param       $iblockId
-     * @param array $uniqNames
-     *
-     * @throws HelperException
-     * @return array
-     */
-    public function getSectionIdsByUniqNames($iblockId, $uniqNames = [])
-    {
-        $ids = [];
-        $uniqNames = is_array($uniqNames) ? array_filter($uniqNames) : [];
-
-        if (empty($uniqNames)) {
-            return $ids;
-        }
-
-        foreach ($uniqNames as $uniqName) {
-            $ids[] = $this->getSectionIdByUniqName($iblockId, $uniqName);
-        }
-        return $ids;
-    }
-
     /**
      * @param $iblockId
      *
Index: local/modules/sprint.migration/lib/helpers/traits/iblock/iblocktrait.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers\\Traits\\Iblock;\r\n\r\nuse Bitrix\\Iblock\\InheritedProperty\\IblockTemplates;\r\nuse CIBlock;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Helpers\\UserGroupHelper;\r\nuse Sprint\\Migration\\Locale;\r\n\r\ntrait IblockTrait\r\n{\r\n    /**\r\n     * Получает инфоблок, бросает исключение если его не существует\r\n     *\r\n     * @param        $code string|array - код или фильтр\r\n     * @param string $typeId\r\n     *\r\n     * @throws HelperException\r\n     * @return array|void\r\n     */\r\n    public function getIblockIfExists($code, $typeId = '')\r\n    {\r\n        $item = $this->getIblock($code, $typeId);\r\n        if ($item && isset($item['ID'])) {\r\n            return $item;\r\n        }\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_IB_NOT_FOUND',\r\n                ['#IBLOCK#' => is_array($code) ? var_export($code, true) : $code]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Получает id инфоблока, бросает исключение если его не существует\r\n     *\r\n     * @param        $code string|array - код или фильтр\r\n     * @param string $typeId\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function getIblockIdIfExists($code, $typeId = '')\r\n    {\r\n        $item = $this->getIblock($code, $typeId);\r\n        if ($item && isset($item['ID'])) {\r\n            return $item['ID'];\r\n        }\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_IB_NOT_FOUND',\r\n                ['#IBLOCK#' => is_array($code) ? var_export($code, true) : $code]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Получает инфоблок\r\n     *\r\n     * @param        $code int|string|array - id, код или фильтр\r\n     * @param string $typeId\r\n     *\r\n     * @return array|false\r\n     */\r\n    public function getIblock($code, $typeId = '')\r\n    {\r\n        if (is_array($code)) {\r\n            $filter = $code;\r\n        } elseif (is_numeric($code)) {\r\n            $filter = ['ID' => $code];\r\n        } else {\r\n            $filter = ['=CODE' => $code];\r\n        }\r\n\r\n        if (!empty($typeId)) {\r\n            $filter['=TYPE'] = $typeId;\r\n        }\r\n\r\n        $filter['CHECK_PERMISSIONS'] = 'N';\r\n\r\n        $item = CIBlock::GetList(['SORT' => 'ASC'], $filter)->Fetch();\r\n        return $this->prepareIblock($item);\r\n    }\r\n\r\n    /**\r\n     * Получает список сайтов для инфоблока\r\n     *\r\n     * @param $iblockId\r\n     *\r\n     * @return array\r\n     */\r\n    public function getIblockSites($iblockId)\r\n    {\r\n        $dbres = CIBlock::GetSite($iblockId);\r\n        return $this->fetchAll($dbres, false, 'LID');\r\n    }\r\n\r\n    /**\r\n     * Получает id инфоблока\r\n     *\r\n     * @param        $code string|array - код или фильтр\r\n     * @param string $typeId\r\n     *\r\n     * @return int\r\n     */\r\n    public function getIblockId($code, $typeId = '')\r\n    {\r\n        $iblock = $this->getIblock($code, $typeId);\r\n        return ($iblock && isset($iblock['ID'])) ? $iblock['ID'] : 0;\r\n    }\r\n\r\n    /**\r\n     * Получает список инфоблоков\r\n     *\r\n     * @param array $filter\r\n     *\r\n     * @return array\r\n     */\r\n    public function getIblocks($filter = [])\r\n    {\r\n        $filter['CHECK_PERMISSIONS'] = 'N';\r\n\r\n        $dbres = CIBlock::GetList(['SORT' => 'ASC'], $filter);\r\n        $list = [];\r\n        while ($item = $dbres->Fetch()) {\r\n            $list[] = $this->prepareIblock($item);\r\n        }\r\n        return $list;\r\n    }\r\n\r\n    /**\r\n     * Добавляет инфоблок если его не существует\r\n     *\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function addIblockIfNotExists($fields = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['CODE', 'IBLOCK_TYPE_ID', 'LID']);\r\n\r\n        $typeId = false;\r\n        if (!empty($fields['IBLOCK_TYPE_ID'])) {\r\n            $typeId = $fields['IBLOCK_TYPE_ID'];\r\n        }\r\n\r\n        $iblock = $this->getIblock($fields['CODE'], $typeId);\r\n        if ($iblock) {\r\n            return $iblock['ID'];\r\n        }\r\n\r\n        return $this->addIblock($fields);\r\n    }\r\n\r\n    /**\r\n     * Добавляет инфоблок\r\n     *\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function addIblock($fields)\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['CODE', 'IBLOCK_TYPE_ID', 'LID']);\r\n\r\n        $default = [\r\n            'ACTIVE'           => 'Y',\r\n            'NAME'             => '',\r\n            'CODE'             => '',\r\n            'LIST_PAGE_URL'    => '',\r\n            'DETAIL_PAGE_URL'  => '',\r\n            'SECTION_PAGE_URL' => '',\r\n            'IBLOCK_TYPE_ID'   => 'main',\r\n            'LID'              => ['s1'],\r\n            'SORT'             => 500,\r\n            'GROUP_ID'         => ['2' => 'R'],\r\n            'VERSION'          => 2,\r\n            'BIZPROC'          => 'N',\r\n            'WORKFLOW'         => 'N',\r\n            'INDEX_ELEMENT'    => 'N',\r\n            'INDEX_SECTION'    => 'N',\r\n        ];\r\n\r\n        $fields = array_replace_recursive($default, $fields);\r\n\r\n        $ib = new CIBlock;\r\n        $iblockId = $ib->Add($fields);\r\n\r\n        if ($iblockId) {\r\n            return $iblockId;\r\n        }\r\n        $this->throwException(__METHOD__, $ib->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * Обновляет инфоблок\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function updateIblock($iblockId, $fields = [])\r\n    {\r\n        $ib = new CIBlock;\r\n        if ($ib->Update($iblockId, $fields)) {\r\n            return $iblockId;\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $ib->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * Обновляет инфоблок если он существует\r\n     *\r\n     * @param       $code\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int|void\r\n     */\r\n    public function updateIblockIfExists($code, $fields = [])\r\n    {\r\n        $iblock = $this->getIblock($code);\r\n        if (!$iblock) {\r\n            return false;\r\n        }\r\n        return $this->updateIblock($iblock['ID'], $fields);\r\n    }\r\n\r\n    /**\r\n     * Удаляет инфоблок если он существует\r\n     *\r\n     * @param        $code\r\n     * @param string $typeId\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|void\r\n     */\r\n    public function deleteIblockIfExists($code, $typeId = '')\r\n    {\r\n        $iblock = $this->getIblock($code, $typeId);\r\n        if (!$iblock) {\r\n            return false;\r\n        }\r\n        return $this->deleteIblock($iblock['ID']);\r\n    }\r\n\r\n    /**\r\n     * Удаляет инфоблок\r\n     *\r\n     * @param $iblockId\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|void\r\n     */\r\n    public function deleteIblock($iblockId)\r\n    {\r\n        if (CIBlock::Delete($iblockId)) {\r\n            return true;\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_CANT_DELETE_IBLOCK', [\r\n                    '#NAME#' => $iblockId,\r\n                ]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Сохраняет инфоблок\r\n     * Создаст если не было, обновит если существует и отличается\r\n     *\r\n     * @param array $fields\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|mixed\r\n     */\r\n    public function saveIblock($fields = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['CODE', 'IBLOCK_TYPE_ID', 'LID']);\r\n\r\n        $item = $this->getIblock($fields['CODE'], $fields['IBLOCK_TYPE_ID']);\r\n        $exists = $this->prepareExportIblock($item);\r\n        $fields = $this->prepareExportIblock($fields);\r\n\r\n        if (empty($item)) {\r\n            $ok = $this->getMode('test') ? true : $this->addIblock($fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'IB_CREATED',\r\n                    [\r\n                        '#NAME#' => $fields['CODE'],\r\n                    ]\r\n                )\r\n            );\r\n            return $ok;\r\n        }\r\n\r\n        if ($this->hasDiff($exists, $fields)) {\r\n            $ok = $this->getMode('test') ? true : $this->updateIblock($item['ID'], $fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'IB_UPDATED',\r\n                    [\r\n                        '#NAME#' => $fields['CODE'],\r\n                    ]\r\n                )\r\n            );\r\n            $this->outDiffIf($ok, $exists, $fields);\r\n            return $ok;\r\n        }\r\n\r\n        $ok = $this->getMode('test') ? true : $item['ID'];\r\n\r\n        if ($this->getMode('out_equal')) {\r\n            $this->outIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'IB_EQUAL',\r\n                    [\r\n                        '#NAME#' => $fields['CODE'],\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n        return $ok;\r\n    }\r\n\r\n    /**\r\n     * Получает инфоблок\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param $iblockId\r\n     *\r\n     * @throws HelperException\r\n     * @return array|void\r\n     */\r\n    public function exportIblock($iblockId)\r\n    {\r\n        $export = $this->prepareExportIblock(\r\n            $this->getIblock($iblockId)\r\n        );\r\n\r\n        if (!empty($export['CODE'])) {\r\n            return $export;\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_IB_CODE_NOT_FOUND',\r\n                ['#IBLOCK_ID#' => $iblockId]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Получает список инфоблоков\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     *\r\n     * @param array $filter\r\n     *\r\n     * @return array\r\n     */\r\n    public function exportIblocks($filter = [])\r\n    {\r\n        $exports = [];\r\n        $items = $this->getIblocks($filter);\r\n        foreach ($items as $item) {\r\n            if (!empty($item['CODE'])) {\r\n                $exports[] = $this->prepareExportIblock($item);\r\n            }\r\n        }\r\n        return $exports;\r\n    }\r\n\r\n    /**\r\n     * Получает права доступа к инфоблоку для групп\r\n     * возвращает массив вида [$groupCode => $letter]\r\n     *\r\n     * @param $iblockId\r\n     *\r\n     * @return array\r\n     */\r\n    public function getGroupPermissions($iblockId)\r\n    {\r\n        return CIBlock::GetGroupPermissions($iblockId);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     *\r\n     * @return array\r\n     */\r\n    public function exportGroupPermissions($iblockId)\r\n    {\r\n        $groupHelper = new UserGroupHelper();\r\n\r\n        $permissions = $this->getGroupPermissions($iblockId);\r\n\r\n        $result = [];\r\n        foreach ($permissions as $groupId => $letter) {\r\n            $groupCode = $groupHelper->getGroupCode($groupId);\r\n            $groupCode = !empty($groupCode) ? $groupCode : $groupId;\r\n            $result[$groupCode] = $letter;\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * @param       $iblockId\r\n     * @param array $permissions\r\n     */\r\n    public function saveGroupPermissions($iblockId, $permissions = [])\r\n    {\r\n        $groupHelper = new UserGroupHelper();\r\n\r\n        $result = [];\r\n        foreach ($permissions as $groupCode => $letter) {\r\n            $groupId = is_numeric($groupCode) ? $groupCode : $groupHelper->getGroupId($groupCode);\r\n            $result[$groupId] = $letter;\r\n        }\r\n\r\n        $this->setGroupPermissions($iblockId, $result);\r\n    }\r\n\r\n    /**\r\n     * Устанавливает права доступа к инфоблоку для групп\r\n     * предыдущие права сбрасываются\r\n     * принимает массив вида [$groupCode => $letter]\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $permissions\r\n     */\r\n    public function setGroupPermissions($iblockId, $permissions = [])\r\n    {\r\n        CIBlock::SetPermission($iblockId, $permissions);\r\n    }\r\n\r\n    /**\r\n     * @param        $code\r\n     * @param string $typeId\r\n     *\r\n     * @throws HelperException\r\n     * @return mixed\r\n     * @deprecated\r\n     */\r\n    public function findIblockId($code, $typeId = '')\r\n    {\r\n        return $this->getIblockIdIfExists($code, $typeId);\r\n    }\r\n\r\n    /**\r\n     * @param        $code\r\n     * @param string $typeId\r\n     *\r\n     * @throws HelperException\r\n     * @return mixed\r\n     * @deprecated\r\n     */\r\n    public function findIblock($code, $typeId = '')\r\n    {\r\n        return $this->getIblockIfExists($code, $typeId);\r\n    }\r\n\r\n    /**\r\n     * @param $iblock int|array\r\n     *\r\n     * @throws HelperException\r\n     * @return string|void\r\n     */\r\n    public function getIblockUid($iblock)\r\n    {\r\n        if (!is_array($iblock)) {\r\n            //на вход уже пришел uid\r\n            if (false !== strpos($iblock, ':')) {\r\n                return $iblock;\r\n            }\r\n\r\n            //на вход пришел id или код инфоблока\r\n            $getIblock = $this->getIblock($iblock);\r\n\r\n            //если инфоблок не найден, надо показать что искали\r\n            if (false === $getIblock) {\r\n                $this->throwException(\r\n                    __METHOD__,\r\n                    Locale::getMessage(\r\n                        'ERR_IB_NOT_FOUND',\r\n                        ['#IBLOCK#' => $iblock]\r\n                    )\r\n                );\r\n            }\r\n\r\n            $iblock = $getIblock;\r\n        }\r\n\r\n        if (empty($iblock['IBLOCK_TYPE_ID'])) {\r\n            $this->throwException(\r\n                __METHOD__,\r\n                Locale::getMessage(\r\n                    'ERR_TYPE_OF_IB_NOT_FOUND',\r\n                    ['#IBLOCK_ID#' => $iblock['ID']]\r\n                )\r\n            );\r\n        }\r\n\r\n        if (empty($iblock['CODE'])) {\r\n            $this->throwException(\r\n                __METHOD__,\r\n                Locale::getMessage(\r\n                    'ERR_IB_CODE_NOT_FOUND',\r\n                    ['#IBLOCK_ID#' => $iblock['ID']]\r\n                )\r\n            );\r\n        }\r\n\r\n        return $iblock['IBLOCK_TYPE_ID'] . ':' . $iblock['CODE'];\r\n    }\r\n\r\n    /**\r\n     * @param $iblockUid\r\n     *\r\n     * @return int\r\n     */\r\n    public function getIblockIdByUid($iblockUid)\r\n    {\r\n        $iblockId = 0;\r\n\r\n        if (empty($iblockUid)) {\r\n            return $iblockId;\r\n        }\r\n\r\n        list($type, $code) = explode(':', $iblockUid);\r\n        if (!empty($type) && !empty($code)) {\r\n            $iblockId = $this->getIblockId($code, $type);\r\n        }\r\n\r\n        return $iblockId;\r\n    }\r\n\r\n    /**\r\n     * @param $item\r\n     *\r\n     * @return mixed\r\n     */\r\n    protected function prepareIblock($item)\r\n    {\r\n        if (empty($item['ID'])) {\r\n            return $item;\r\n        }\r\n        $item['LID'] = $this->getIblockSites($item['ID']);\r\n\r\n        $messages = CIBlock::GetMessages($item['ID']);\r\n\r\n        $iblockTemlates = new IblockTemplates($item['ID']);\r\n\r\n        $item['IPROPERTY_TEMPLATES'] = array_column(\r\n            $iblockTemlates->findTemplates(),\r\n            'TEMPLATE',\r\n            'CODE'\r\n        );\r\n\r\n        return array_merge($item, $messages);\r\n    }\r\n\r\n    protected function prepareExportIblock($iblock)\r\n    {\r\n        if (empty($iblock)) {\r\n            return $iblock;\r\n        }\r\n\r\n        unset($iblock['ID']);\r\n        unset($iblock['TIMESTAMP_X']);\r\n        unset($iblock['TMP_ID']);\r\n\r\n        return $iblock;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/traits/iblock/iblocktrait.php b/local/modules/sprint.migration/lib/helpers/traits/iblock/iblocktrait.php
--- a/local/modules/sprint.migration/lib/helpers/traits/iblock/iblocktrait.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/traits/iblock/iblocktrait.php	(date 1670844554000)
@@ -323,20 +323,7 @@
             return $ok;
         }
 
-        $ok = $this->getMode('test') ? true : $item['ID'];
-
-        if ($this->getMode('out_equal')) {
-            $this->outIf(
-                $ok,
-                Locale::getMessage(
-                    'IB_EQUAL',
-                    [
-                        '#NAME#' => $fields['CODE'],
-                    ]
-                )
-            );
-        }
-        return $ok;
+        return $this->getMode('test') ? true : $item['ID'];
     }
 
     /**
Index: local/modules/sprint.migration/lib/helpers/traits/iblock/iblockelementtrait.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers\\Traits\\Iblock;\r\n\r\nuse CIBlockElement;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\n\r\ntrait IblockElementTrait\r\n{\r\n    /**\r\n     * Получает элемент инфоблока\r\n     *\r\n     * @param       $iblockId\r\n     * @param       $code\r\n     * @param array $select\r\n     *\r\n     * @return array\r\n     */\r\n    public function getElement($iblockId, $code, $select = [])\r\n    {\r\n        /** @compatibility filter or code */\r\n        $filter = is_array($code)\r\n            ? $code\r\n            : [\r\n                '=CODE' => $code,\r\n            ];\r\n\r\n        $filter['IBLOCK_ID'] = $iblockId;\r\n        $filter['CHECK_PERMISSIONS'] = 'N';\r\n\r\n        $select = array_merge(\r\n            [\r\n                'ID',\r\n                'XML_ID',\r\n                'IBLOCK_ID',\r\n                'NAME',\r\n                'CODE',\r\n                'ACTIVE',\r\n            ], $select\r\n        );\r\n\r\n        $item = CIBlockElement::GetList(\r\n            [\r\n                'SORT' => 'ASC',\r\n            ], $filter, false, [\r\n            'nTopCount' => 1,\r\n        ], $select\r\n        )->Fetch();\r\n\r\n        return $this->prepareElement($item);\r\n    }\r\n\r\n    /**\r\n     * Получает id элемента инфоблока\r\n     *\r\n     * @param $iblockId\r\n     * @param $code\r\n     *\r\n     * @return int|mixed\r\n     */\r\n    public function getElementId($iblockId, $code)\r\n    {\r\n        $item = $this->getElement($iblockId, $code);\r\n        return ($item && isset($item['ID'])) ? $item['ID'] : 0;\r\n    }\r\n\r\n    /**\r\n     * Получает элементы инфоблока\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $filter\r\n     * @param array $select\r\n     *\r\n     * @return array\r\n     */\r\n    public function getElements($iblockId, $filter = [], $select = [])\r\n    {\r\n        $filter['IBLOCK_ID'] = $iblockId;\r\n        $filter['CHECK_PERMISSIONS'] = 'N';\r\n\r\n        $select = array_merge(\r\n            [\r\n                'ID',\r\n                'XML_ID',\r\n                'IBLOCK_ID',\r\n                'NAME',\r\n                'CODE',\r\n                'ACTIVE',\r\n            ], $select\r\n        );\r\n\r\n        $dbres = CIBlockElement::GetList(\r\n            [\r\n                'ID' => 'ASC',\r\n            ], $filter, false, false, $select\r\n        );\r\n\r\n        $list = [];\r\n        while ($item = $dbres->Fetch()) {\r\n            $list[] = $this->prepareElement($item);;\r\n        }\r\n        return $list;\r\n    }\r\n\r\n    /**\r\n     * @param int   $iblockId\r\n     * @param array $params\r\n     *\r\n     * @return array\r\n     */\r\n    public function getElementsEx($iblockId, $params = [])\r\n    {\r\n        $params = array_merge(\r\n            [\r\n                'offset' => 0,\r\n                'limit'  => 0,\r\n                'filter' => [],\r\n                'order'  => ['ID' => 'ASC'],\r\n            ], $params\r\n        );\r\n\r\n        if ($params['limit'] > 0) {\r\n            $pageNum = (int)floor($params['offset'] / $params['limit']) + 1;\r\n        } else {\r\n            $pageNum = 1;\r\n        }\r\n\r\n        $params['filter']['IBLOCK_ID'] = $iblockId;\r\n        $params['filter']['CHECK_PERMISSIONS'] = 'N';\r\n\r\n        $dbres = CIBlockElement::GetList(\r\n            $params['order'],\r\n            $params['filter'],\r\n            false,\r\n            [\r\n                'nPageSize'       => $params['limit'],\r\n                'iNumPage'        => $pageNum,\r\n                'checkOutOfRange' => true,\r\n            ]\r\n        );\r\n\r\n        $result = [];\r\n        while ($item = $dbres->GetNextElement(false, false)) {\r\n            $fields = $item->GetFields();\r\n            $props = $item->GetProperties();\r\n\r\n            $fields['IBLOCK_SECTION'] = $this->getElementSectionIds($fields['ID']);\r\n\r\n            $result[] = [\r\n                'FIELDS' => $fields,\r\n                'PROPS'  => $props,\r\n            ];\r\n        }\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * @param       $iblockId\r\n     * @param array $filter\r\n     *\r\n     * @return int\r\n     */\r\n    public function getElementsCount($iblockId, $filter = [])\r\n    {\r\n        $filter['IBLOCK_ID'] = $iblockId;\r\n        $filter['CHECK_PERMISSIONS'] = 'N';\r\n\r\n        $select = [\r\n            'ID',\r\n            'XML_ID',\r\n            'IBLOCK_ID',\r\n            'NAME',\r\n            'CODE',\r\n            'ACTIVE',\r\n        ];\r\n\r\n        return (int)CIBlockElement::GetList(\r\n            [],\r\n            $filter,\r\n            [],\r\n            false,\r\n            $select\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param       $elementId\r\n     * @param array $sectionSelect\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function getElementSections($elementId, $sectionSelect = [])\r\n    {\r\n        $dbres = CIBlockElement::GetElementGroups($elementId, true, $sectionSelect);\r\n        return $this->fetchAll($dbres);\r\n    }\r\n\r\n    /**\r\n     * @param $elementId\r\n     *\r\n     * @return array\r\n     */\r\n    public function getElementSectionIds($elementId)\r\n    {\r\n        $sections = $this->getElementSections($elementId);\r\n        return array_column($sections, 'ID');\r\n    }\r\n\r\n    /**\r\n     * Сохраняет элемент инфоблока\r\n     * Создаст если не было, обновит если существует (поиск по коду)\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $fields\r\n     * @param array $props\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function saveElement($iblockId, $fields = [], $props = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['CODE']);\r\n\r\n        $item = $this->getElement($iblockId, $fields['CODE']);\r\n        if (!empty($item['ID'])) {\r\n            return $this->updateElement($item['ID'], $fields, $props);\r\n        }\r\n\r\n        return $this->addElement($iblockId, $fields, $props);\r\n    }\r\n\r\n    /**\r\n     * @param       $iblockId\r\n     * @param array $fields\r\n     * @param array $props\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function saveElementByXmlId($iblockId, $fields = [], $props = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['XML_ID']);\r\n\r\n        $item = $this->getElement($iblockId, ['=XML_ID' => $fields['XML_ID']]);\r\n        if (!empty($item['ID'])) {\r\n            return $this->updateElement($item['ID'], $fields, $props);\r\n        }\r\n\r\n        return $this->addElement($iblockId, $fields, $props);\r\n    }\r\n\r\n    /**\r\n     * Добавляет элемент инфоблока если он не существует\r\n     *\r\n     * @param int   $iblockId\r\n     * @param array $fields\r\n     * @param array $props\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|mixed\r\n     */\r\n    public function addElementIfNotExists($iblockId, $fields, $props = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['CODE']);\r\n\r\n        $item = $this->getElement($iblockId, $fields['CODE']);\r\n        if ($item) {\r\n            return $item['ID'];\r\n        }\r\n\r\n        return $this->addElement($iblockId, $fields, $props);\r\n    }\r\n\r\n    /**\r\n     * Добавляет элемент инфоблока\r\n     *\r\n     * @param       $iblockId\r\n     * @param array $fields - поля\r\n     * @param array $props  - свойства\r\n     *\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function addElement($iblockId, $fields = [], $props = [])\r\n    {\r\n        $default = [\r\n            'NAME'              => 'element',\r\n            'IBLOCK_SECTION_ID' => false,\r\n            'ACTIVE'            => 'Y',\r\n            'PREVIEW_TEXT'      => '',\r\n            'DETAIL_TEXT'       => '',\r\n        ];\r\n\r\n        $fields = array_replace_recursive($default, $fields);\r\n        $fields['IBLOCK_ID'] = $iblockId;\r\n\r\n        if (!empty($props)) {\r\n            $fields['PROPERTY_VALUES'] = $props;\r\n        }\r\n\r\n        $ib = new CIBlockElement;\r\n        $id = $ib->Add($fields);\r\n\r\n        if ($id) {\r\n            return $id;\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $ib->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * Обновляет элемент инфоблока если он существует\r\n     *\r\n     * @param int   $iblockId\r\n     * @param array $fields\r\n     * @param array $props\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|int|void\r\n     */\r\n    public function updateElementIfExists($iblockId, $fields = [], $props = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['CODE']);\r\n\r\n        $item = $this->getElement($iblockId, $fields['CODE']);\r\n        if (!$item) {\r\n            return false;\r\n        }\r\n\r\n        $fields['IBLOCK_ID'] = $iblockId;\r\n        unset($fields['CODE']);\r\n\r\n        return $this->updateElement($item['ID'], $fields, $props);\r\n    }\r\n\r\n    /**\r\n     * Обновляет элемент инфоблока\r\n     *\r\n     * @param       $elementId\r\n     * @param array $fields\r\n     * @param array $props\r\n     *\r\n     * @throws HelperException\r\n     * @return int\r\n     */\r\n    public function updateElement($elementId, $fields = [], $props = [])\r\n    {\r\n        $iblockId = !empty($fields['IBLOCK_ID']) ? $fields['IBLOCK_ID'] : false;\r\n        unset($fields['IBLOCK_ID']);\r\n\r\n        if (!empty($fields)) {\r\n            $ib = new CIBlockElement;\r\n            if (!$ib->Update($elementId, $fields)) {\r\n                $this->throwException(__METHOD__, $ib->LAST_ERROR);\r\n            }\r\n        }\r\n\r\n        if (!empty($props)) {\r\n            CIBlockElement::SetPropertyValuesEx($elementId, $iblockId, $props);\r\n        }\r\n\r\n        return $elementId;\r\n    }\r\n\r\n    /**\r\n     * Удаляет элемент инфоблока если он существует\r\n     *\r\n     * @param $iblockId\r\n     * @param $code\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|void\r\n     */\r\n    public function deleteElementIfExists($iblockId, $code)\r\n    {\r\n        $item = $this->getElement($iblockId, $code);\r\n\r\n        if (!$item) {\r\n            return false;\r\n        }\r\n\r\n        return $this->deleteElement($item['ID']);\r\n    }\r\n\r\n    /**\r\n     * Удаляет элемент инфоблока\r\n     *\r\n     * @param $elementId\r\n     *\r\n     * @throws HelperException\r\n     * @return bool|void\r\n     */\r\n    public function deleteElement($elementId)\r\n    {\r\n        $ib = new CIBlockElement;\r\n        if ($ib->Delete($elementId)) {\r\n            return true;\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $ib->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @param $item\r\n     *\r\n     * @return mixed\r\n     */\r\n    protected function prepareElement($item)\r\n    {\r\n        if (empty($item['ID'])) {\r\n            return $item;\r\n        }\r\n\r\n        $item['IBLOCK_SECTION'] = $this->getElementSectionIds($item['ID']);\r\n\r\n        return $item;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/traits/iblock/iblockelementtrait.php b/local/modules/sprint.migration/lib/helpers/traits/iblock/iblockelementtrait.php
--- a/local/modules/sprint.migration/lib/helpers/traits/iblock/iblockelementtrait.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/traits/iblock/iblockelementtrait.php	(date 1670844554000)
@@ -4,6 +4,7 @@
 
 use CIBlockElement;
 use Sprint\Migration\Exceptions\HelperException;
+use Sprint\Migration\Locale;
 
 trait IblockElementTrait
 {
@@ -362,6 +363,34 @@
         return $elementId;
     }
 
+    /**
+     * @throws HelperException
+     */
+    public function deleteElementByCode($iblockId, $code)
+    {
+        if (!empty($code)) {
+            $item = $this->getElement($iblockId, ['=CODE' => $code]);
+            if ($item) {
+                return $this->deleteElement($item['ID']);
+            }
+        }
+        return false;
+    }
+
+    /**
+     * @throws HelperException
+     */
+    public function deleteElementByXmlId($iblockId, $xmlId)
+    {
+        if (!empty($xmlId)) {
+            $item = $this->getElement($iblockId, ['=XML_ID' => $xmlId]);
+            if ($item) {
+                return $this->deleteElement($item['ID']);
+            }
+        }
+        return false;
+    }
+
     /**
      * Удаляет элемент инфоблока если он существует
      *
@@ -373,13 +402,7 @@
      */
     public function deleteElementIfExists($iblockId, $code)
     {
-        $item = $this->getElement($iblockId, $code);
-
-        if (!$item) {
-            return false;
-        }
-
-        return $this->deleteElement($item['ID']);
+        return $this->deleteElementByCode($iblockId, $code);
     }
 
     /**
@@ -400,6 +423,86 @@
         $this->throwException(__METHOD__, $ib->LAST_ERROR);
     }
 
+    /**
+     * @param $iblockId
+     * @param $elementId
+     *
+     * @throws HelperException
+     * @return array
+     */
+    public function getElementUniqFilterById($iblockId, $elementId)
+    {
+        if (empty($elementId)) {
+            $this->throwException(
+                __METHOD__,
+                Locale::getMessage(
+                    'ERR_IB_ELEMENT_ID_EMPTY',
+                    [
+                        '#IBLOCK_ID#' => $iblockId,
+                    ]
+                )
+            );
+        }
+
+        $element = $this->getElement($iblockId, ['ID' => $elementId]);
+
+        if (empty($element['ID'])) {
+            $this->throwException(
+                __METHOD__,
+                Locale::getMessage(
+                    'ERR_IB_ELEMENT_ID_NOT_FOUND',
+                    [
+                        '#IBLOCK_ID#'  => $iblockId,
+                        '#ELEMENT_ID#' => $elementId,
+                    ]
+                )
+            );
+        }
+
+        return [
+            'NAME'   => $element['NAME'],
+            'XML_ID' => $element['XML_ID'],
+            'CODE'   => $element['CODE'],
+        ];
+    }
+
+    /**
+     * @throws HelperException
+     */
+    public function getElementIdByUniqFilter($iblockId, $uniqFilter)
+    {
+        if (empty($uniqFilter)) {
+            $this->throwException(
+                __METHOD__,
+                Locale::getMessage(
+                    'ERR_IB_ELEMENT_ID_EMPTY',
+                    [
+                        '#IBLOCK_ID#' => $iblockId,
+                    ]
+                )
+            );
+        }
+
+        $uniqFilter['IBLOCK_ID'] = $iblockId;
+
+        $element = $this->getElement($iblockId, $uniqFilter);
+
+        if (empty($element['ID'])) {
+            $this->throwException(
+                __METHOD__,
+                Locale::getMessage(
+                    'ERR_IB_ELEMENT_BY_FILTER_NOT_FOUND',
+                    [
+                        '#IBLOCK_ID#' => $iblockId,
+                        '#NAME#'      => $uniqFilter['NAME'],
+                    ]
+                )
+            );
+        }
+
+        return $element['ID'];
+    }
+
     /**
      * @param $item
      *
Index: local/modules/sprint.migration/lib/helpers/traits/iblock/iblocktypetrait.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers\\Traits\\Iblock;\r\n\r\nuse CIBlockType;\r\nuse CLanguage;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Locale;\r\n\r\ntrait IblockTypeTrait\r\n{\r\n\r\n    /**\r\n     * Получает тип инфоблока, бросает исключение если его не существует\r\n     * @param $typeId\r\n     * @throws HelperException\r\n     * @return array|void\r\n     */\r\n    public function getIblockTypeIfExists($typeId)\r\n    {\r\n        $item = $this->getIblockType($typeId);\r\n        if ($item && isset($item['ID'])) {\r\n            return $item;\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_IB_TYPE_NOT_FOUND'\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Получает id типа инфоблока, бросает исключение если его не существует\r\n     * @param $typeId\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function getIblockTypeIdIfExists($typeId)\r\n    {\r\n        $item = $this->getIblockType($typeId);\r\n        if ($item && isset($item['ID'])) {\r\n            return $item['ID'];\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_IB_TYPE_NOT_FOUND'\r\n            )\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * Получает тип инфоблока\r\n     * @param $typeId\r\n     * @return array\r\n     */\r\n    public function getIblockType($typeId)\r\n    {\r\n        /** @compatibility filter or $typeId */\r\n        $filter = is_array($typeId) ? $typeId : [\r\n            '=ID' => $typeId,\r\n        ];\r\n\r\n        $filter['CHECK_PERMISSIONS'] = 'N';\r\n        $item = CIBlockType::GetList(['SORT' => 'ASC'], $filter)->Fetch();\r\n\r\n        if ($item) {\r\n            $item['LANG'] = $this->getIblockTypeLangs($item['ID']);\r\n        }\r\n\r\n        return $item;\r\n    }\r\n\r\n    /**\r\n     * Получает id типа инфоблока\r\n     * @param $typeId\r\n     * @return int|mixed\r\n     */\r\n    public function getIblockTypeId($typeId)\r\n    {\r\n        $iblockType = $this->getIblockType($typeId);\r\n        return ($iblockType && isset($iblockType['ID'])) ? $iblockType['ID'] : 0;\r\n    }\r\n\r\n    /**\r\n     * Получает типы инфоблоков\r\n     * @param array $filter\r\n     * @return array\r\n     */\r\n    public function getIblockTypes($filter = [])\r\n    {\r\n        $filter['CHECK_PERMISSIONS'] = 'N';\r\n        $dbres = CIBlockType::GetList(['SORT' => 'ASC'], $filter);\r\n\r\n        $list = [];\r\n        while ($item = $dbres->Fetch()) {\r\n            $item['LANG'] = $this->getIblockTypeLangs($item['ID']);\r\n            $list[] = $item;\r\n        }\r\n        return $list;\r\n    }\r\n\r\n    /**\r\n     * Добавляет тип инфоблока, если его не существует\r\n     * @param array $fields\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function addIblockTypeIfNotExists($fields = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['ID']);\r\n\r\n        $iblockType = $this->getIblockType($fields['ID']);\r\n        if ($iblockType) {\r\n            return $iblockType['ID'];\r\n        }\r\n\r\n        return $this->addIblockType($fields);\r\n    }\r\n\r\n    /**\r\n     * Добавляет тип инфоблока\r\n     * @param array $fields\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function addIblockType($fields = [])\r\n    {\r\n        $default = [\r\n            'ID' => '',\r\n            'SECTIONS' => 'Y',\r\n            'IN_RSS' => 'N',\r\n            'SORT' => 100,\r\n            'LANG' => [\r\n                'ru' => [\r\n                    'NAME' => 'Catalog',\r\n                    'SECTION_NAME' => 'Sections',\r\n                    'ELEMENT_NAME' => 'Elements',\r\n                ],\r\n                'en' => [\r\n                    'NAME' => 'Catalog',\r\n                    'SECTION_NAME' => 'Sections',\r\n                    'ELEMENT_NAME' => 'Elements',\r\n                ],\r\n            ],\r\n        ];\r\n\r\n        $fields = array_replace_recursive($default, $fields);\r\n\r\n        $ib = new CIBlockType;\r\n        if ($ib->Add($fields)) {\r\n            return $fields['ID'];\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $ib->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * Обновляет тип инфоблока\r\n     * @param $iblockTypeId\r\n     * @param array $fields\r\n     * @throws HelperException\r\n     * @return int|void\r\n     */\r\n    public function updateIblockType($iblockTypeId, $fields = [])\r\n    {\r\n        $ib = new CIBlockType;\r\n        if ($ib->Update($iblockTypeId, $fields)) {\r\n            return $iblockTypeId;\r\n        }\r\n\r\n        $this->throwException(__METHOD__, $ib->LAST_ERROR);\r\n    }\r\n\r\n    /**\r\n     * Удаляет тип инфоблока, если существует\r\n     * @param $typeId\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    public function deleteIblockTypeIfExists($typeId)\r\n    {\r\n        $iblockType = $this->getIblockType($typeId);\r\n        if (!$iblockType) {\r\n            return false;\r\n        }\r\n\r\n        return $this->deleteIblockType($iblockType['ID']);\r\n\r\n    }\r\n\r\n    /**\r\n     * Удаляет тип инфоблока\r\n     * @param $typeId\r\n     * @throws HelperException\r\n     * @return bool|void\r\n     */\r\n    public function deleteIblockType($typeId)\r\n    {\r\n        if (CIBlockType::Delete($typeId)) {\r\n            return true;\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_CANT_DELETE_IBLOCK_TYPE', [\r\n                    '#NAME#' => $typeId,\r\n                ]\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Получает языковые названия для типа инфоблока\r\n     * @param $typeId\r\n     * @return array\r\n     */\r\n    public function getIblockTypeLangs($typeId)\r\n    {\r\n        $lby = 'sort';\r\n        $lorder = 'asc';\r\n\r\n        $result = [];\r\n        $dbres = CLanguage::GetList($lby, $lorder);\r\n        while ($item = $dbres->GetNext()) {\r\n            $values = CIBlockType::GetByIDLang($typeId, $item['LID'], false);\r\n            if (!empty($values)) {\r\n                $result[$item['LID']] = [\r\n                    'NAME' => $values['NAME'],\r\n                    'SECTION_NAME' => $values['SECTION_NAME'],\r\n                    'ELEMENT_NAME' => $values['ELEMENT_NAME'],\r\n                ];\r\n            }\r\n        }\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * Сохраняет тип инфоблока\r\n     * Создаст если не было, обновит если существует и отличается\r\n     * @param array $fields\r\n     * @throws HelperException\r\n     * @return bool|mixed\r\n     */\r\n    public function saveIblockType($fields = [])\r\n    {\r\n        $this->checkRequiredKeys(__METHOD__, $fields, ['ID']);\r\n\r\n        $item = $this->getIblockType($fields['ID']);\r\n        $exists = $this->prepareExportIblockType($item);\r\n        $fields = $this->prepareExportIblockType($fields);\r\n\r\n        if (empty($item)) {\r\n            $ok = $this->getMode('test') ? true : $this->addIblockType($fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'IB_TYPE_CREATED',\r\n                    [\r\n                        '#NAME#' => $fields['ID'],\r\n                    ]\r\n                )\r\n            );\r\n            return $ok;\r\n        }\r\n\r\n\r\n        if ($this->hasDiff($exists, $fields)) {\r\n            $ok = $this->getMode('test') ? true : $this->updateIblockType($item['ID'], $fields);\r\n            $this->outNoticeIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'IB_TYPE_UPDATED',\r\n                    [\r\n                        '#NAME#' => $fields['ID'],\r\n                    ]\r\n                )\r\n            );\r\n            $this->outDiffIf($ok, $exists, $fields);\r\n\r\n            return $ok;\r\n        }\r\n\r\n        $ok = $this->getMode('test') ? true : $fields['ID'];\r\n        if ($this->getMode('out_equal')) {\r\n            $this->outIf(\r\n                $ok,\r\n                Locale::getMessage(\r\n                    'IB_TYPE_EQUAL',\r\n                    [\r\n                        '#NAME#' => $fields['ID'],\r\n                    ]\r\n                )\r\n            );\r\n        }\r\n        return $ok;\r\n    }\r\n\r\n    /**\r\n     * Получает тип инфоблока\r\n     * Данные подготовлены для экспорта в миграцию или схему\r\n     * @param $typeId\r\n     * @return mixed\r\n     */\r\n    public function exportIblockType($typeId)\r\n    {\r\n        return $this->prepareExportIblockType(\r\n            $this->getIblockType($typeId)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param $typeId\r\n     * @throws HelperException\r\n     * @return array\r\n     * @deprecated\r\n     */\r\n    public function findIblockType($typeId)\r\n    {\r\n        return $this->getIblockTypeIfExists($typeId);\r\n    }\r\n\r\n    /**\r\n     * @param $typeId\r\n     * @throws HelperException\r\n     * @return mixed\r\n     * @deprecated\r\n     */\r\n    public function findIblockTypeId($typeId)\r\n    {\r\n        return $this->getIblockTypeIdIfExists($typeId);\r\n    }\r\n\r\n    protected function prepareExportIblockType($item)\r\n    {\r\n        if (empty($item)) {\r\n            return $item;\r\n        }\r\n\r\n        return $item;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/traits/iblock/iblocktypetrait.php b/local/modules/sprint.migration/lib/helpers/traits/iblock/iblocktypetrait.php
--- a/local/modules/sprint.migration/lib/helpers/traits/iblock/iblocktypetrait.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/traits/iblock/iblocktypetrait.php	(date 1670844554000)
@@ -286,19 +286,7 @@
             return $ok;
         }
 
-        $ok = $this->getMode('test') ? true : $fields['ID'];
-        if ($this->getMode('out_equal')) {
-            $this->outIf(
-                $ok,
-                Locale::getMessage(
-                    'IB_TYPE_EQUAL',
-                    [
-                        '#NAME#' => $fields['ID'],
-                    ]
-                )
-            );
-        }
-        return $ok;
+        return $this->getMode('test') ? true : $fields['ID'];
     }
 
     /**
Index: local/modules/sprint.migration/lib/helpers/traits/useroptions/iblocktrait.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Helpers\\Traits\\UserOptions;\r\n\r\nuse CIBlock;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\HelperManager;\r\nuse Sprint\\Migration\\Locale;\r\nuse Sprint\\Migration\\Traits\\HelperManagerTrait;\r\n\r\ntrait IblockTrait\r\n{\r\n    use HelperManagerTrait;\r\n\r\n    private $titles = [];\r\n    private $props = [];\r\n    private $iblock = [];\r\n    private $lastIblockId = 0;\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function exportElementForm($iblockId)\r\n    {\r\n        /**\r\n         * @compability\r\n         * @deprecated\r\n         */\r\n        if (func_num_args() > 1) {\r\n            $this->throwException(__METHOD__, '$params is no longer supported, see examples');\r\n        }\r\n\r\n        $this->initializeIblockVars($iblockId);\r\n\r\n        return $this->exportForm([\r\n            'name' => 'form_element_' . $iblockId,\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param array $formData\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function buildElementForm($iblockId, $formData = [])\r\n    {\r\n        /**\r\n         * @compability\r\n         * @deprecated\r\n         */\r\n        if (func_num_args() > 2) {\r\n            $this->throwException(__METHOD__, '$params is no longer supported, see examples');\r\n        }\r\n\r\n        $this->initializeIblockVars($iblockId);\r\n\r\n        return $this->buildForm($formData, [\r\n            'name' => 'form_element_' . $iblockId,\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param array $formData\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function saveElementForm($iblockId, $formData = [])\r\n    {\r\n        /**\r\n         * @compability\r\n         * @deprecated\r\n         */\r\n        if (func_num_args() > 2) {\r\n            $this->throwException(__METHOD__, '$params is no longer supported, see examples');\r\n        }\r\n\r\n        $this->initializeIblockVars($iblockId);\r\n\r\n        return $this->saveForm($formData, [\r\n            'name' => 'form_element_' . $iblockId,\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param array $params\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function saveElementGrid($iblockId, $params = [])\r\n    {\r\n        return $this->saveGrid($this->getElementGridId($iblockId), $params);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param array $params\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function saveSectionGrid($iblockId, $params = [])\r\n    {\r\n        return $this->saveGrid($this->getSectionGridId($iblockId), $params);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @throws HelperException\r\n     * @return string\r\n     */\r\n    public function getElementGridId($iblockId)\r\n    {\r\n        $this->initializeIblockVars($iblockId);\r\n\r\n        if (CIBlock::GetAdminListMode($iblockId) == 'S') {\r\n            $prefix = defined('CATALOG_PRODUCT') ? 'tbl_product_admin_' : 'tbl_iblock_element_';\r\n        } else {\r\n            $prefix = defined('CATALOG_PRODUCT') ? 'tbl_product_list_' : 'tbl_iblock_list_';\r\n        }\r\n\r\n        return $prefix . md5($this->iblock['IBLOCK_TYPE_ID'] . '.' . $iblockId);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @throws HelperException\r\n     * @return string\r\n     */\r\n    public function getSectionGridId($iblockId)\r\n    {\r\n        $this->initializeIblockVars($iblockId);\r\n        return 'tbl_iblock_section_' . md5($this->iblock['IBLOCK_TYPE_ID'] . \".\" . $iblockId);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function exportElementList($iblockId)\r\n    {\r\n        return $this->exportList([\r\n            'name' => $this->getElementGridId($iblockId),\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function exportElementGrid($iblockId)\r\n    {\r\n        return $this->exportGrid($this->getElementGridId($iblockId));\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param array $listData\r\n     * @throws HelperException\r\n     */\r\n    public function buildElementList($iblockId, $listData = [])\r\n    {\r\n        $this->buildList($listData, [\r\n            'name' => $this->getElementGridId($iblockId),\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param array $listData\r\n     * @throws HelperException\r\n     */\r\n    public function saveElementList($iblockId, $listData = [])\r\n    {\r\n        $this->saveList($listData, [\r\n            'name' => $this->getElementGridId($iblockId),\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function exportSectionForm($iblockId)\r\n    {\r\n        $this->initializeIblockVars($iblockId);\r\n\r\n        return $this->exportForm([\r\n            'name' => 'form_section_' . $iblockId,\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param array $formData\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function buildSectionForm($iblockId, $formData = [])\r\n    {\r\n        $this->initializeIblockVars($iblockId);\r\n\r\n        return $this->buildForm($formData, [\r\n            'name' => 'form_section_' . $iblockId,\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param array $formData\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function saveSectionForm($iblockId, $formData = [])\r\n    {\r\n        $this->initializeIblockVars($iblockId);\r\n\r\n        return $this->saveForm($formData, [\r\n            'name' => 'form_section_' . $iblockId,\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function exportSectionList($iblockId)\r\n    {\r\n        $this->initializeIblockVars($iblockId);\r\n\r\n        return $this->exportList([\r\n            'name' => $this->getSectionGridId($iblockId),\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param array $listData\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function buildSectionList($iblockId, $listData = [])\r\n    {\r\n        $this->initializeIblockVars($iblockId);\r\n\r\n        return $this->buildList($listData, [\r\n            'name' => $this->getSectionGridId($iblockId),\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param array $listData\r\n     * @throws HelperException\r\n     * @return mixed\r\n     */\r\n    public function saveSectionList($iblockId, $listData = [])\r\n    {\r\n        $this->initializeIblockVars($iblockId);\r\n\r\n        return $this->saveList($listData, [\r\n            'name' => $this->getSectionGridId($iblockId),\r\n        ]);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @throws HelperException\r\n     * @return array|void\r\n     * @deprecated\r\n     */\r\n    public function extractElementForm($iblockId)\r\n    {\r\n        $result = $this->exportElementForm($iblockId);\r\n\r\n        if (!empty($result)) {\r\n            return $result;\r\n        }\r\n\r\n        $this->throwException(\r\n            __METHOD__,\r\n            Locale::getMessage(\r\n                'ERR_IB_FORM_OPTIONS_NOT_FOUND'\r\n            )\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @throws HelperException\r\n     * @return bool\r\n     */\r\n    protected function initializeIblockVars($iblockId)\r\n    {\r\n        $helper = $this->getHelperManager();\r\n\r\n        /** @compability */\r\n        if (empty($iblockId)) {\r\n            $this->throwException(__METHOD__, 'empty param $iblockId is no longer supported, see examples');\r\n        }\r\n\r\n        if ($this->lastIblockId == $iblockId) {\r\n            return true;\r\n        }\r\n\r\n        $iblock = $helper->Iblock()->getIblockIfExists($iblockId);\r\n\r\n        $this->lastIblockId = $iblockId;\r\n        $this->iblock = $iblock;\r\n        $this->props = [];\r\n        $this->titles = [];\r\n\r\n        $props = $helper->Iblock()->getProperties($iblockId);\r\n        foreach ($props as $prop) {\r\n            if (!empty($prop['CODE'])) {\r\n                $this->titles['PROPERTY_' . $prop['ID']] = $prop['NAME'];\r\n                $this->props[] = $prop;\r\n            }\r\n        }\r\n\r\n        $iblockMess = IncludeModuleLangFile('/bitrix/modules/iblock/iblock.php', 'ru', true);\r\n\r\n        $this->titles['ACTIVE_FROM'] = $iblockMess['IBLOCK_FIELD_ACTIVE_PERIOD_FROM'];\r\n        $this->titles['ACTIVE_TO'] = $iblockMess['IBLOCK_FIELD_ACTIVE_PERIOD_TO'];\r\n\r\n        foreach ($iblockMess as $code => $value) {\r\n            if (false !== strpos($code, 'IBLOCK_FIELD_')) {\r\n                $fcode = str_replace('IBLOCK_FIELD_', '', $code);\r\n                $this->titles[$fcode] = $value;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected function prepareTitle($fieldCode, $fieldTitle = '')\r\n    {\r\n        if (!empty($fieldTitle)) {\r\n            return $fieldTitle;\r\n        }\r\n\r\n        if (isset($this->titles[$fieldCode])) {\r\n            return $this->titles[$fieldCode];\r\n        }\r\n\r\n        return $fieldCode;\r\n    }\r\n\r\n    protected function transformCode($fieldCode)\r\n    {\r\n        if (0 === strpos($fieldCode, 'PROPERTY_')) {\r\n            $fieldCode = substr($fieldCode, 9);\r\n            foreach ($this->props as $prop) {\r\n                if ($prop['CODE'] == $fieldCode) {\r\n                    $fieldCode = $prop['ID'];\r\n                    break;\r\n                }\r\n            }\r\n            $fieldCode = 'PROPERTY_' . $fieldCode;\r\n        }\r\n        return $fieldCode;\r\n    }\r\n\r\n    protected function revertCode($fieldCode)\r\n    {\r\n        if (0 === strpos($fieldCode, 'PROPERTY_')) {\r\n            $fieldCode = substr($fieldCode, 9);\r\n            foreach ($this->props as $prop) {\r\n                if ($prop['ID'] == $fieldCode) {\r\n                    $fieldCode = $prop['CODE'];\r\n                    break;\r\n                }\r\n            }\r\n            $fieldCode = 'PROPERTY_' . $fieldCode;\r\n        }\r\n        return $fieldCode;\r\n    }\r\n\r\n    protected function revertCodesFromColumns($columns)\r\n    {\r\n        if (!is_array($columns)) {\r\n            $columns = explode(',', $columns);\r\n            foreach ($columns as $index => $columnCode) {\r\n                $columns[$index] = $this->revertCode($columnCode);\r\n            }\r\n            return $columns;\r\n        }\r\n        return $columns;\r\n    }\r\n\r\n    protected function transformCodesToColumns($columns)\r\n    {\r\n        if (is_array($columns)) {\r\n            foreach ($columns as $index => $columnCode) {\r\n                $columns[$index] = $this->transformCode($columnCode);\r\n            }\r\n            return implode(',', $columns);\r\n        }\r\n        return $columns;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/helpers/traits/useroptions/iblocktrait.php b/local/modules/sprint.migration/lib/helpers/traits/useroptions/iblocktrait.php
--- a/local/modules/sprint.migration/lib/helpers/traits/useroptions/iblocktrait.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/helpers/traits/useroptions/iblocktrait.php	(date 1670844554000)
@@ -4,7 +4,6 @@
 
 use CIBlock;
 use Sprint\Migration\Exceptions\HelperException;
-use Sprint\Migration\HelperManager;
 use Sprint\Migration\Locale;
 use Sprint\Migration\Traits\HelperManagerTrait;
 
@@ -12,13 +11,14 @@
 {
     use HelperManagerTrait;
 
-    private $titles = [];
-    private $props = [];
-    private $iblock = [];
+    private $titles       = [];
+    private $props        = [];
+    private $iblock       = [];
     private $lastIblockId = 0;
 
     /**
      * @param $iblockId
+     *
      * @throws HelperException
      * @return mixed
      */
@@ -40,8 +40,9 @@
     }
 
     /**
-     * @param $iblockId
+     * @param       $iblockId
      * @param array $formData
+     *
      * @throws HelperException
      * @return mixed
      */
@@ -63,8 +64,9 @@
     }
 
     /**
-     * @param $iblockId
+     * @param       $iblockId
      * @param array $formData
+     *
      * @throws HelperException
      * @return mixed
      */
@@ -86,8 +88,9 @@
     }
 
     /**
-     * @param $iblockId
+     * @param       $iblockId
      * @param array $params
+     *
      * @throws HelperException
      * @return mixed
      */
@@ -97,8 +100,9 @@
     }
 
     /**
-     * @param $iblockId
+     * @param       $iblockId
      * @param array $params
+     *
      * @throws HelperException
      * @return mixed
      */
@@ -109,6 +113,7 @@
 
     /**
      * @param $iblockId
+     *
      * @throws HelperException
      * @return string
      */
@@ -127,6 +132,7 @@
 
     /**
      * @param $iblockId
+     *
      * @throws HelperException
      * @return string
      */
@@ -138,6 +144,7 @@
 
     /**
      * @param $iblockId
+     *
      * @throws HelperException
      * @return mixed
      */
@@ -150,6 +157,7 @@
 
     /**
      * @param $iblockId
+     *
      * @throws HelperException
      * @return mixed
      */
@@ -159,8 +167,9 @@
     }
 
     /**
-     * @param $iblockId
+     * @param       $iblockId
      * @param array $listData
+     *
      * @throws HelperException
      */
     public function buildElementList($iblockId, $listData = [])
@@ -171,8 +180,9 @@
     }
 
     /**
-     * @param $iblockId
+     * @param       $iblockId
      * @param array $listData
+     *
      * @throws HelperException
      */
     public function saveElementList($iblockId, $listData = [])
@@ -184,6 +194,7 @@
 
     /**
      * @param $iblockId
+     *
      * @throws HelperException
      * @return mixed
      */
@@ -197,8 +208,9 @@
     }
 
     /**
-     * @param $iblockId
+     * @param       $iblockId
      * @param array $formData
+     *
      * @throws HelperException
      * @return mixed
      */
@@ -212,8 +224,9 @@
     }
 
     /**
-     * @param $iblockId
+     * @param       $iblockId
      * @param array $formData
+     *
      * @throws HelperException
      * @return mixed
      */
@@ -228,6 +241,7 @@
 
     /**
      * @param $iblockId
+     *
      * @throws HelperException
      * @return mixed
      */
@@ -241,8 +255,9 @@
     }
 
     /**
-     * @param $iblockId
+     * @param       $iblockId
      * @param array $listData
+     *
      * @throws HelperException
      * @return mixed
      */
@@ -256,8 +271,9 @@
     }
 
     /**
-     * @param $iblockId
+     * @param       $iblockId
      * @param array $listData
+     *
      * @throws HelperException
      * @return mixed
      */
@@ -270,9 +286,9 @@
         ]);
     }
 
-
     /**
      * @param $iblockId
+     *
      * @throws HelperException
      * @return array|void
      * @deprecated
@@ -293,9 +309,9 @@
         );
     }
 
-
     /**
      * @param $iblockId
+     *
      * @throws HelperException
      * @return bool
      */
@@ -407,4 +423,26 @@
         }
         return $columns;
     }
+
+    protected function transformCustomNames($customNames)
+    {
+        $result = [];
+        if (is_array($customNames)) {
+            foreach ($customNames as $code => $title) {
+                $result[$this->transformCode($code)] = $title;
+            }
+        }
+        return $result;
+    }
+
+    protected function revertCustomNames($customNames)
+    {
+        $result = [];
+        if (is_array($customNames)) {
+            foreach ($customNames as $code => $title) {
+                $result[$this->revertCode($code)] = $title;
+            }
+        }
+        return $result;
+    }
 }
Index: local/modules/sprint.migration/lib/builders/formbuilder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Builders;\r\n\r\nuse Bitrix\\Main\\Db\\SqlQueryException;\r\nuse Sprint\\Migration\\Exceptions\\ExchangeException;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Exceptions\\RebuildException;\r\nuse Sprint\\Migration\\Locale;\r\nuse Sprint\\Migration\\Module;\r\nuse Sprint\\Migration\\VersionBuilder;\r\n\r\nclass FormBuilder extends VersionBuilder\r\n{\r\n    protected function isBuilderEnabled()\r\n    {\r\n        return $this->getHelperManager()->Form()->isEnabled();\r\n    }\r\n\r\n    protected function initialize()\r\n    {\r\n        $this->setTitle(Locale::getMessage('BUILDER_FormExport1'));\r\n        $this->setGroup('Form');\r\n\r\n        $this->addVersionFields();\r\n    }\r\n\r\n    /**\r\n     * @throws ExchangeException\r\n     * @throws RebuildException\r\n     * @throws SqlQueryException\r\n     * @throws HelperException\r\n     */\r\n    protected function execute()\r\n    {\r\n        $helper = $this->getHelperManager();\r\n\r\n        $forms = $helper->Form()->getList();\r\n\r\n        $structure = [];\r\n        foreach ($forms as $item) {\r\n            $structure[] = [\r\n                'title' => '[' . $item['ID'] . '] ' . $item['NAME'],\r\n                'value' => $item['ID'],\r\n            ];\r\n        }\r\n\r\n        $formId = $this->addFieldAndReturn('form_id', [\r\n            'title' => Locale::getMessage('BUILDER_FormExport_FormId'),\r\n            'width' => 250,\r\n            'select' => $structure,\r\n        ]);\r\n\r\n        $form = $helper->Form()->getFormById($formId);\r\n        $this->exitIfEmpty($form, 'Form not found');\r\n\r\n        unset($form['ID']);\r\n        unset($form['TIMESTAMP_X']);\r\n        unset($form['VARNAME']);\r\n\r\n        $what = $this->addFieldAndReturn('what_else', [\r\n            'title' => Locale::getMessage('BUILDER_FormExport_What'),\r\n            'width' => 250,\r\n            'multiple' => 1,\r\n            'value' => [],\r\n            'select' => [\r\n                [\r\n                    'title' => Locale::getMessage('BUILDER_FormExport_Form'),\r\n                    'value' => 'form',\r\n                ],\r\n                [\r\n                    'title' => Locale::getMessage('BUILDER_FormExport_Fields'),\r\n                    'value' => 'fields',\r\n                ],\r\n                [\r\n                    'title' => Locale::getMessage('BUILDER_FormExport_Statuses'),\r\n                    'value' => 'statuses',\r\n                ],\r\n            ],\r\n        ]);\r\n\r\n        $formExport = false;\r\n        if (in_array('form', $what)) {\r\n            $formExport = true;\r\n        }\r\n\r\n        $statuses = [];\r\n        if (in_array('statuses', $what)) {\r\n            $statuses = $helper->Form()->getFormStatuses($formId);\r\n            foreach ($statuses as $index => $status) {\r\n                unset($status['ID']);\r\n                unset($status['TIMESTAMP_X']);\r\n                unset($status['FORM_ID']);\r\n                unset($status['RESULTS']);\r\n                $statuses[$index] = $status;\r\n            }\r\n        }\r\n\r\n        $fields = [];\r\n        if (in_array('fields', $what)) {\r\n            $fields = $helper->Form()->getFormFields($formId);\r\n            foreach ($fields as $index => $field) {\r\n                unset($field['ID']);\r\n                unset($field['TIMESTAMP_X']);\r\n                unset($field['FORM_ID']);\r\n                unset($field['VARNAME']);\r\n\r\n                if (is_array($field['ANSWERS'])) {\r\n                    foreach ($field['ANSWERS'] as $answerIndex => $answer) {\r\n                        unset($answer['ID']);\r\n                        unset($answer['FIELD_ID']);\r\n                        unset($answer['QUESTION_ID']);\r\n                        unset($answer['TIMESTAMP_X']);\r\n\r\n                        $field['ANSWERS'][$answerIndex] = $answer;\r\n                    }\r\n                }\r\n\r\n\r\n                if (is_array($field['VALIDATORS'])) {\r\n                    foreach ($field['VALIDATORS'] as $validatorIndex => $validator) {\r\n                        unset($validator['ID']);\r\n                        unset($validator['FORM_ID']);\r\n                        unset($validator['FIELD_ID']);\r\n                        unset($validator['TIMESTAMP_X']);\r\n                        unset($validator['PARAMS_FULL']);\r\n\r\n                        $field['VALIDATORS'][$validatorIndex] = $validator;\r\n                    }\r\n                }\r\n\r\n                $fields[$index] = $field;\r\n            }\r\n        }\r\n\r\n        $this->createVersionFile(\r\n            Module::getModuleDir() . '/templates/FormExport.php',\r\n            [\r\n                'formExport' => $formExport,\r\n                'form' => $form,\r\n                'statuses' => $statuses,\r\n                'fields' => $fields,\r\n            ]\r\n        );\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/builders/formbuilder.php b/local/modules/sprint.migration/lib/builders/formbuilder.php
--- a/local/modules/sprint.migration/lib/builders/formbuilder.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/builders/formbuilder.php	(date 1670844554000)
@@ -3,7 +3,7 @@
 namespace Sprint\Migration\Builders;
 
 use Bitrix\Main\Db\SqlQueryException;
-use Sprint\Migration\Exceptions\ExchangeException;
+use Sprint\Migration\Exceptions\MigrationException;
 use Sprint\Migration\Exceptions\HelperException;
 use Sprint\Migration\Exceptions\RebuildException;
 use Sprint\Migration\Locale;
@@ -26,7 +26,7 @@
     }
 
     /**
-     * @throws ExchangeException
+     * @throws MigrationException
      * @throws RebuildException
      * @throws SqlQueryException
      * @throws HelperException
Index: local/modules/sprint.migration/lib/builders/hlblockelementsbuilder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Builders;\r\n\r\nuse Sprint\\Migration\\Exceptions\\ExchangeException;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Exceptions\\MigrationException;\r\nuse Sprint\\Migration\\Exceptions\\RebuildException;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\nuse Sprint\\Migration\\Locale;\r\nuse Sprint\\Migration\\Module;\r\nuse Sprint\\Migration\\VersionBuilder;\r\n\r\nclass HlblockElementsBuilder extends VersionBuilder\r\n{\r\n    /**\r\n     * @return bool\r\n     */\r\n    protected function isBuilderEnabled()\r\n    {\r\n        return (!Locale::isWin1251() && $this->getHelperManager()->Hlblock()->isEnabled());\r\n    }\r\n\r\n    protected function initialize()\r\n    {\r\n        $this->setTitle(Locale::getMessage('BUILDER_HlblockElementsExport1'));\r\n        $this->setDescription(Locale::getMessage('BUILDER_HlblockElementsExport2'));\r\n        $this->setGroup('Hlblock');\r\n\r\n        $this->addVersionFields();\r\n    }\r\n\r\n    /**\r\n     * @throws ExchangeException\r\n     * @throws HelperException\r\n     * @throws RebuildException\r\n     * @throws RestartException\r\n     * @throws MigrationException\r\n     */\r\n    protected function execute()\r\n    {\r\n        $hlblockId = $this->addFieldAndReturn(\r\n            'hlblock_id',\r\n            [\r\n                'title'       => Locale::getMessage('BUILDER_HlblockElementsExport_HlblockId'),\r\n                'placeholder' => '',\r\n                'width'       => 250,\r\n                'select'      => $this->getHelperManager()->HlblockExchange()->getHlblocksStructure(),\r\n            ]\r\n        );\r\n\r\n        $this->getExchangeManager()\r\n             ->HlblockElementsExport()\r\n             ->setLimit(20)\r\n             ->setExportFields(\r\n                 $this->getHelperManager()->HlblockExchange()->getHlblockFieldsCodes($hlblockId)\r\n             )\r\n             ->setHlblockId($hlblockId)\r\n             ->setExchangeFile(\r\n                 $this->getVersionResourceFile(\r\n                     $this->getVersionName(),\r\n                     'hlblock_elements.xml'\r\n                 )\r\n             )->execute();\r\n\r\n        $this->createVersionFile(\r\n            Module::getModuleDir() . '/templates/HlblockElementsExport.php'\r\n        );\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/builders/hlblockelementsbuilder.php b/local/modules/sprint.migration/lib/builders/hlblockelementsbuilder.php
--- a/local/modules/sprint.migration/lib/builders/hlblockelementsbuilder.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/builders/hlblockelementsbuilder.php	(date 1670844554000)
@@ -2,11 +2,11 @@
 
 namespace Sprint\Migration\Builders;
 
-use Sprint\Migration\Exceptions\ExchangeException;
 use Sprint\Migration\Exceptions\HelperException;
 use Sprint\Migration\Exceptions\MigrationException;
 use Sprint\Migration\Exceptions\RebuildException;
 use Sprint\Migration\Exceptions\RestartException;
+use Sprint\Migration\Exchange\HlblockElementsExport;
 use Sprint\Migration\Locale;
 use Sprint\Migration\Module;
 use Sprint\Migration\VersionBuilder;
@@ -31,7 +31,7 @@
     }
 
     /**
-     * @throws ExchangeException
+     * @throws MigrationException
      * @throws HelperException
      * @throws RebuildException
      * @throws RestartException
@@ -49,12 +49,18 @@
             ]
         );
 
+        $fields = $this->getHelperManager()->HlblockExchange()->getHlblockFieldsCodes($hlblockId);
+        $updateMode = $this->getFieldValueUpdateMode();
+
+        if ($updateMode == HlblockElementsExport::UPDATE_MODE_XML_ID) {
+            $this->exitIf(!in_array('UF_XML_ID', $fields), 'Field UF_XML_ID not found');
+        }
+
         $this->getExchangeManager()
              ->HlblockElementsExport()
              ->setLimit(20)
-             ->setExportFields(
-                 $this->getHelperManager()->HlblockExchange()->getHlblockFieldsCodes($hlblockId)
-             )
+             ->setUpdateMode($updateMode)
+             ->setExportFields($fields)
              ->setHlblockId($hlblockId)
              ->setExchangeFile(
                  $this->getVersionResourceFile(
@@ -64,7 +70,35 @@
              )->execute();
 
         $this->createVersionFile(
-            Module::getModuleDir() . '/templates/HlblockElementsExport.php'
+            Module::getModuleDir() . '/templates/HlblockElementsExport.php',
+            [
+                'updateMode' => $updateMode,
+            ]
+        );
+    }
+
+    /**
+     * @throws RebuildException
+     * @return string
+     */
+    protected function getFieldValueUpdateMode()
+    {
+        return $this->addFieldAndReturn(
+            'update_mode', [
+                'title'       => Locale::getMessage('BUILDER_IblockElementsExport_UpdateMode'),
+                'placeholder' => '',
+                'width'       => 250,
+                'select'      => [
+                    [
+                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_NotUpdate'),
+                        'value' => HlblockElementsExport::UPDATE_MODE_NOT,
+                    ],
+                    [
+                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_UpdateByXmlId'),
+                        'value' => HlblockElementsExport::UPDATE_MODE_XML_ID,
+                    ],
+                ],
+            ]
         );
     }
 }
Index: local/modules/sprint.migration/admin/steps/migration_list.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse Sprint\\Migration\\Enum\\VersionEnum;\r\nuse Sprint\\Migration\\Locale;\r\nuse Sprint\\Migration\\Module;\r\nuse Sprint\\Migration\\Out;\r\nuse Sprint\\Migration\\VersionConfig;\r\nuse Sprint\\Migration\\VersionManager;\r\n\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) {\r\n    die();\r\n}\r\n\r\n$listView = (\r\n    ($_POST[\"step_code\"] == \"migration_view_all\") ||\r\n    ($_POST[\"step_code\"] == \"migration_view_new\") ||\r\n    ($_POST[\"step_code\"] == \"migration_view_tag\") ||\r\n    ($_POST[\"step_code\"] == \"migration_view_modified\") ||\r\n    ($_POST[\"step_code\"] == \"migration_view_older\") ||\r\n    ($_POST[\"step_code\"] == \"migration_view_installed\")\r\n);\r\n\r\nif ($listView && check_bitrix_sessid('send_sessid')) {\r\n\r\n    /** @var $versionConfig VersionConfig */\r\n    $versionManager = new VersionManager($versionConfig);\r\n\r\n    $search = !empty($_POST['search']) ? trim($_POST['search']) : '';\r\n    $search = Sprint\\Migration\\Locale::convertToUtf8IfNeed($search);\r\n\r\n    if ($_POST[\"step_code\"] == \"migration_view_new\") {\r\n        $versions = $versionManager->getVersions([\r\n            'status' => VersionEnum::STATUS_NEW,\r\n            'search' => $search,\r\n        ]);\r\n    } elseif ($_POST[\"step_code\"] == \"migration_view_installed\") {\r\n        $versions = $versionManager->getVersions([\r\n            'status' => VersionEnum::STATUS_INSTALLED,\r\n            'search' => $search,\r\n        ]);\r\n    } elseif ($_POST[\"step_code\"] == \"migration_view_tag\") {\r\n        $versions = $versionManager->getVersions([\r\n            'tag' => $search,\r\n        ]);\r\n    } elseif ($_POST[\"step_code\"] == \"migration_view_modified\") {\r\n        $versions = $versionManager->getVersions([\r\n            'search' => $search,\r\n            'modified' => 1,\r\n        ]);\r\n    } elseif ($_POST[\"step_code\"] == \"migration_view_older\") {\r\n        $versions = $versionManager->getVersions([\r\n            'search' => $search,\r\n            'older' => 1,\r\n        ]);\r\n    } else {\r\n        $versions = $versionManager->getVersions([\r\n            'search' => $search,\r\n        ]);\r\n    }\r\n\r\n    $webdir = $versionManager->getWebDir();\r\n\r\n    $getOnclickMenu = function ($item) use ($webdir, $versionConfig) {\r\n        $menu = [];\r\n\r\n        if ($item['status'] == VersionEnum::STATUS_NEW) {\r\n            $menu[] = [\r\n                'TEXT' => Locale::getMessage('UP'),\r\n                'ONCLICK' => 'migrationMigrationUp(\\'' . $item['version'] . '\\')',\r\n            ];\r\n            $menu[] = [\r\n                'TEXT' => Locale::getMessage('MARK_NEW_AS_INSTALLED'),\r\n                'ONCLICK' => 'migrationMigrationMark(\\'' . $item['version'] . '\\',\\'' . VersionEnum::STATUS_INSTALLED . '\\')',\r\n            ];\r\n        }\r\n        if ($item['status'] == VersionEnum::STATUS_INSTALLED) {\r\n            $menu[] = [\r\n                'TEXT' => Locale::getMessage('DOWN'),\r\n                'ONCLICK' => 'migrationMigrationDown(\\'' . $item['version'] . '\\')',\r\n            ];\r\n            $menu[] = [\r\n                'TEXT' => Locale::getMessage('SETTAG'),\r\n                'ONCLICK' => 'migrationMigrationSetTag(\\'' . $item['version'] . '\\',\\'' . $item['tag'] . '\\')',\r\n            ];\r\n            $menu[] = [\r\n                'TEXT' => Locale::getMessage('MARK_INSTALLED_AS_NEW'),\r\n                'ONCLICK' => 'migrationMigrationMark(\\'' . $item['version'] . '\\',\\'' . VersionEnum::STATUS_NEW . '\\')',\r\n            ];\r\n        }\r\n\r\n        if ($item['status'] == VersionEnum::STATUS_UNKNOWN) {\r\n            $menu[] = [\r\n                'TEXT' => Locale::getMessage('SETTAG'),\r\n                'ONCLICK' => 'migrationMigrationSetTag(\\'' . $item['version'] . '\\')',\r\n            ];\r\n        }\r\n\r\n        if ($item['status'] != VersionEnum::STATUS_UNKNOWN && $webdir) {\r\n            $viewUrl = '/bitrix/admin/fileman_file_view.php?' . http_build_query([\r\n                    'lang' => LANGUAGE_ID,\r\n                    'site' => SITE_ID,\r\n                    'path' => $webdir . '/' . $item['version'] . '.php',\r\n                ]);\r\n\r\n            $menu[] = [\r\n                'TEXT' => Locale::getMessage('VIEW_FILE'),\r\n                'LINK' => $viewUrl,\r\n            ];\r\n        }\r\n\r\n        $transferMenu = [];\r\n\r\n        $configList = $versionConfig->getList();\r\n        foreach ($configList as $configItem) {\r\n            if ($configItem['name'] != $versionConfig->getName()) {\r\n                $transferMenu[] = [\r\n                    'TEXT' => $configItem['title'],\r\n                    'ONCLICK' => 'migrationMigrationTransfer(\\'' . $item['version'] . '\\',\\'' . $configItem['name'] . '\\')',\r\n                ];\r\n            }\r\n        }\r\n\r\n        if (!empty($transferMenu)) {\r\n            $menu[] = [\r\n                'TEXT' => Locale::getMessage('TRANSFER_TO'),\r\n                'MENU' => $transferMenu,\r\n            ];\r\n        }\r\n\r\n\r\n        $menu[] = [\r\n            'TEXT' => Locale::getMessage('DELETE'),\r\n            'ONCLICK' => 'migrationMigrationDelete(\\'' . $item['version'] . '\\')',\r\n        ];\r\n\r\n        return CUtil::PhpToJSObject($menu);\r\n    }\r\n\r\n    ?>\r\n    <?php if (!empty($versions)): ?>\r\n        <table class=\"sp-list\">\r\n            <?php foreach ($versions as $item): ?>\r\n                <tr>\r\n                    <td class=\"sp-list-td__buttons\">\r\n                        <a onclick=\"this.blur();BX.adminShowMenu(this, <?= $getOnclickMenu($item) ?>, {active_class: 'adm-btn-active',public_frame: '0'}); return false;\"\r\n                           href=\"javascript:void(0)\"\r\n                           class=\"adm-btn\"\r\n                           hidefocus=\"true\">&equiv;</a>\r\n                    </td>\r\n                    <td class=\"sp-list-td__content\">\r\n                        <span class=\"sp-item-<?= $item['status'] ?>\"><?= $item['version'] ?></span>\r\n                        <?php if ($item['modified']): ?>\r\n                            <span class=\"sp-modified\" title=\"<?= Locale::getMessage('MODIFIED_VERSION') ?>\">\r\n                                <?= Locale::getMessage('MODIFIED_LABEL') ?>\r\n                            </span>\r\n                        <?php endif; ?>\r\n                        <?php if ($item['older']): ?>\r\n                            <span class=\"sp-older\" title=\"<?= Locale::getMessage('OLDER_VERSION', [\r\n                                '#V1#' => $item['older'],\r\n                                '#V2#' => Module::getVersion(),\r\n                            ]) ?>\">\r\n                                <?= Locale::getMessage('OLDER_LABEL') ?>\r\n                            </span>\r\n                        <?php endif; ?>\r\n                        <?php if ($item['tag']): ?>\r\n                            <span class=\"sp-tag\" title=\"<?= Locale::getMessage('TAG') ?>\">\r\n                                <?= $item['tag'] ?>\r\n                            </span>\r\n                        <?php endif; ?>\r\n                        <?php if ($item['status'] == VersionEnum::STATUS_NEW) { ?>\r\n                            <?php Out::out(Locale::getMessage('VERSION_NEW')) ?>\r\n                        <?php } ?>\r\n                        <?php if ($item['status'] == VersionEnum::STATUS_INSTALLED) { ?>\r\n                            <?php Out::out(Locale::getMessage('VERSION_INSTALLED')) ?>\r\n                        <?php } ?>\r\n                        <?php if (!empty($item['description'])): ?>\r\n                            <?= Out::prepareToHtml(\r\n                                $item['description'],\r\n                                [\r\n                                    'tracker_task_url' => $versionConfig->getVal('tracker_task_url'),\r\n                                ]\r\n                            ) ?>\r\n                        <?php endif ?>\r\n                    </td>\r\n                </tr>\r\n            <?php endforeach ?>\r\n        </table>\r\n    <?php else: ?>\r\n        <?= Locale::getMessage('LIST_EMPTY') ?>\r\n    <?php endif ?>\r\n    <?php\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/admin/steps/migration_list.php b/local/modules/sprint.migration/admin/steps/migration_list.php
--- a/local/modules/sprint.migration/admin/steps/migration_list.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/admin/steps/migration_list.php	(date 1670844554000)
@@ -12,16 +12,15 @@
 }
 
 $listView = (
-    ($_POST["step_code"] == "migration_view_all") ||
-    ($_POST["step_code"] == "migration_view_new") ||
-    ($_POST["step_code"] == "migration_view_tag") ||
-    ($_POST["step_code"] == "migration_view_modified") ||
-    ($_POST["step_code"] == "migration_view_older") ||
-    ($_POST["step_code"] == "migration_view_installed")
+    ($_POST["step_code"] == "migration_view_all")
+    || ($_POST["step_code"] == "migration_view_new")
+    || ($_POST["step_code"] == "migration_view_tag")
+    || ($_POST["step_code"] == "migration_view_modified")
+    || ($_POST["step_code"] == "migration_view_older")
+    || ($_POST["step_code"] == "migration_view_installed")
 );
 
 if ($listView && check_bitrix_sessid('send_sessid')) {
-
     /** @var $versionConfig VersionConfig */
     $versionManager = new VersionManager($versionConfig);
 
@@ -44,13 +43,13 @@
         ]);
     } elseif ($_POST["step_code"] == "migration_view_modified") {
         $versions = $versionManager->getVersions([
-            'search' => $search,
+            'search'   => $search,
             'modified' => 1,
         ]);
     } elseif ($_POST["step_code"] == "migration_view_older") {
         $versions = $versionManager->getVersions([
             'search' => $search,
-            'older' => 1,
+            'older'  => 1,
         ]);
     } else {
         $versions = $versionManager->getVersions([
@@ -65,32 +64,32 @@
 
         if ($item['status'] == VersionEnum::STATUS_NEW) {
             $menu[] = [
-                'TEXT' => Locale::getMessage('UP'),
+                'TEXT'    => Locale::getMessage('UP'),
                 'ONCLICK' => 'migrationMigrationUp(\'' . $item['version'] . '\')',
             ];
             $menu[] = [
-                'TEXT' => Locale::getMessage('MARK_NEW_AS_INSTALLED'),
+                'TEXT'    => Locale::getMessage('MARK_NEW_AS_INSTALLED'),
                 'ONCLICK' => 'migrationMigrationMark(\'' . $item['version'] . '\',\'' . VersionEnum::STATUS_INSTALLED . '\')',
             ];
         }
         if ($item['status'] == VersionEnum::STATUS_INSTALLED) {
             $menu[] = [
-                'TEXT' => Locale::getMessage('DOWN'),
+                'TEXT'    => Locale::getMessage('DOWN'),
                 'ONCLICK' => 'migrationMigrationDown(\'' . $item['version'] . '\')',
             ];
             $menu[] = [
-                'TEXT' => Locale::getMessage('SETTAG'),
+                'TEXT'    => Locale::getMessage('SETTAG'),
                 'ONCLICK' => 'migrationMigrationSetTag(\'' . $item['version'] . '\',\'' . $item['tag'] . '\')',
             ];
             $menu[] = [
-                'TEXT' => Locale::getMessage('MARK_INSTALLED_AS_NEW'),
+                'TEXT'    => Locale::getMessage('MARK_INSTALLED_AS_NEW'),
                 'ONCLICK' => 'migrationMigrationMark(\'' . $item['version'] . '\',\'' . VersionEnum::STATUS_NEW . '\')',
             ];
         }
 
         if ($item['status'] == VersionEnum::STATUS_UNKNOWN) {
             $menu[] = [
-                'TEXT' => Locale::getMessage('SETTAG'),
+                'TEXT'    => Locale::getMessage('SETTAG'),
                 'ONCLICK' => 'migrationMigrationSetTag(\'' . $item['version'] . '\')',
             ];
         }
@@ -114,7 +113,7 @@
         foreach ($configList as $configItem) {
             if ($configItem['name'] != $versionConfig->getName()) {
                 $transferMenu[] = [
-                    'TEXT' => $configItem['title'],
+                    'TEXT'    => $configItem['title'],
                     'ONCLICK' => 'migrationMigrationTransfer(\'' . $item['version'] . '\',\'' . $configItem['name'] . '\')',
                 ];
             }
@@ -127,9 +126,8 @@
             ];
         }
 
-
         $menu[] = [
-            'TEXT' => Locale::getMessage('DELETE'),
+            'TEXT'    => Locale::getMessage('DELETE'),
             'ONCLICK' => 'migrationMigrationDelete(\'' . $item['version'] . '\')',
         ];
 
@@ -178,6 +176,7 @@
                                 $item['description'],
                                 [
                                     'tracker_task_url' => $versionConfig->getVal('tracker_task_url'),
+                                    'make_links'       => true,
                                 ]
                             ) ?>
                         <?php endif ?>
Index: local/modules/sprint.migration/lib/builders/markerbuilder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Builders;\r\n\r\nuse Sprint\\Migration\\AbstractBuilder;\r\nuse Sprint\\Migration\\Enum\\VersionEnum;\r\nuse Sprint\\Migration\\Locale;\r\nuse Sprint\\Migration\\VersionManager;\r\n\r\nclass MarkerBuilder extends AbstractBuilder\r\n{\r\n\r\n    protected function isBuilderEnabled()\r\n    {\r\n        return true;\r\n    }\r\n\r\n\r\n    protected function initialize()\r\n    {\r\n        $this->setTitle(Locale::getMessage('MARK'));\r\n        $this->setGroup('Tools');\r\n\r\n        $this->addField('mark_version', [\r\n            'title' => Locale::getMessage('MARK_FIELD1'),\r\n            'placeholder' => Locale::getMessage('MARK_VERSION'),\r\n            'width' => 250,\r\n        ]);\r\n\r\n        $this->addField('mark_status', [\r\n            'title' => Locale::getMessage('MARK_FIELD2'),\r\n            'placeholder' => '',\r\n            'width' => 250,\r\n            'select' => [\r\n                [\r\n                    'title' => Locale::getMessage('MARK_AS_INSTALLED'),\r\n                    'value' => VersionEnum::STATUS_INSTALLED,\r\n                ],\r\n                [\r\n                    'title' => Locale::getMessage('MARK_AS_NEW'),\r\n                    'value' => VersionEnum::STATUS_NEW,\r\n                ],\r\n            ],\r\n        ]);\r\n\r\n    }\r\n\r\n    protected function execute()\r\n    {\r\n        $version = $this->getFieldValue('mark_version');\r\n        $status = $this->getFieldValue('mark_status');\r\n\r\n        $versionManager = new VersionManager(\r\n            $this->getVersionConfig()->getName()\r\n        );\r\n\r\n        $markresult = $versionManager->markMigration(\r\n            $version,\r\n            $status\r\n        );\r\n\r\n        $this->outMessages($markresult);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/builders/markerbuilder.php b/local/modules/sprint.migration/lib/builders/markerbuilder.php
--- a/local/modules/sprint.migration/lib/builders/markerbuilder.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/builders/markerbuilder.php	(date 1670844554000)
@@ -51,7 +51,7 @@
         $status = $this->getFieldValue('mark_status');
 
         $versionManager = new VersionManager(
-            $this->getVersionConfig()->getName()
+            $this->getVersionConfig()
         );
 
         $markresult = $versionManager->markMigration(
Index: local/modules/sprint.migration/admin/steps/migration_create.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse Sprint\\Migration\\VersionConfig;\r\nuse Sprint\\Migration\\VersionManager;\r\n\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) {\r\n    die();\r\n}\r\n\r\n$stepCode = !empty($_POST[\"step_code\"]) ? htmlspecialchars($_POST[\"step_code\"]) : '';\r\n$hasSteps = (\r\n    ($stepCode == 'migration_create')\r\n    || ($stepCode == 'migration_reset')\r\n\r\n);\r\n\r\nif ($hasSteps && check_bitrix_sessid('send_sessid')) {\r\n    /** @var $versionConfig VersionConfig */\r\n    $versionManager = new VersionManager($versionConfig);\r\n\r\n    $builderName = !empty($_POST['builder_name']) ? trim($_POST['builder_name']) : '';\r\n\r\n    $builder = $versionManager->createBuilder($builderName, $_POST);\r\n\r\n    if ($builder && $stepCode == 'migration_create') {\r\n        $builder->buildExecute();\r\n        $builder->buildAfter();\r\n\r\n        $builder->renderHtml();\r\n\r\n        if ($builder->isRestart()) {\r\n            $json = json_encode($builder->getRestartParams());\r\n            ?>\r\n            <script>migrationBuilder(<?=$json?>);</script><?php\r\n        } elseif ($builder->isRebuild()) {\r\n            ?>\r\n            <script>migrationEnableButtons(1);</script><?php\r\n        } else {\r\n            ?>\r\n            <script>\r\n                migrationMigrationRefresh(function () {\r\n                    migrationScrollList();\r\n                    migrationEnableButtons(1);\r\n                });\r\n            </script><?php\r\n        }\r\n    } elseif ($builder && $stepCode == 'migration_reset') {\r\n        $builder->renderHtml();\r\n        ?>\r\n        <script>\r\n            migrationEnableButtons(1);\r\n        </script><?php\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/admin/steps/migration_create.php b/local/modules/sprint.migration/admin/steps/migration_create.php
--- a/local/modules/sprint.migration/admin/steps/migration_create.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/admin/steps/migration_create.php	(date 1670844554000)
@@ -38,8 +38,8 @@
         } else {
             ?>
             <script>
-                migrationMigrationRefresh(function () {
-                    migrationScrollList();
+                migrationListRefresh(function () {
+                    migrationListScroll();
                     migrationEnableButtons(1);
                 });
             </script><?php
Index: local/modules/sprint.migration/lib/builders/transferbuilder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Builders;\r\n\r\nuse Exception;\r\nuse Sprint\\Migration\\AbstractBuilder;\r\nuse Sprint\\Migration\\Enum\\VersionEnum;\r\nuse Sprint\\Migration\\Exceptions\\ExchangeException;\r\nuse Sprint\\Migration\\Locale;\r\nuse Sprint\\Migration\\VersionManager;\r\n\r\nclass TransferBuilder extends AbstractBuilder\r\n{\r\n\r\n    protected function isBuilderEnabled()\r\n    {\r\n        return true;\r\n    }\r\n\r\n    protected function initialize()\r\n    {\r\n        $this->setTitle(Locale::getMessage('BUILDER_Transfer1'));\r\n        $this->setGroup('Tools');\r\n\r\n        $configFrom = $this->getVersionConfig()->getName();\r\n        $items = $this->getVersionConfig()->getList();\r\n        $structure = [];\r\n        foreach ($items as $item) {\r\n            if ($item['name'] != $configFrom) {\r\n                $structure[] = [\r\n                    'title' => $item['title'],\r\n                    'value' => $item['name'],\r\n                ];\r\n            }\r\n        }\r\n\r\n        $this->addField('transfer_filter', [\r\n            'title' => Locale::getMessage('BUILDER_TransferSelect'),\r\n            'placeholder' => '',\r\n            'width' => 250,\r\n            'select' => [\r\n                [\r\n                    'title' => Locale::getMessage('BUILDER_TransferInstalled'),\r\n                    'value' => VersionEnum::STATUS_INSTALLED,\r\n                ],\r\n                [\r\n                    'title' => Locale::getMessage('BUILDER_TransferNew'),\r\n                    'value' => VersionEnum::STATUS_NEW,\r\n                ],\r\n                [\r\n                    'title' => Locale::getMessage('BUILDER_TransferUnknown'),\r\n                    'value' => VersionEnum::STATUS_UNKNOWN,\r\n                ],\r\n                [\r\n                    'title' => Locale::getMessage('BUILDER_TransferAll'),\r\n                    'value' => 'all',\r\n                ],\r\n            ],\r\n        ]);\r\n\r\n        $this->addField('transfer_to', [\r\n            'title' => Locale::getMessage('BUILDER_TransferTo'),\r\n            'placeholder' => '',\r\n            'width' => 250,\r\n            'select' => $structure,\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @throws ExchangeException\r\n     * @throws Exception\r\n     */\r\n    protected function execute()\r\n    {\r\n        $vmFrom = new VersionManager(\r\n            $this->getVersionConfig()->getName()\r\n        );\r\n\r\n        $vmTo = new VersionManager(\r\n            $this->getFieldValue('transfer_to')\r\n        );\r\n\r\n        $transferresult = $vmFrom->transferMigration(\r\n            $this->getFieldValue('transfer_filter'),\r\n            $vmTo\r\n        );\r\n\r\n\r\n        $cnt = 0;\r\n        foreach ($transferresult as $item) {\r\n            if ($item['success']) {\r\n                $cnt++;\r\n            }\r\n        }\r\n\r\n        $this->outSuccess(\r\n            Locale::getMessage(\r\n                'TRANSFER_OK_CNT',\r\n                [\r\n                    '#CNT#' => $cnt,\r\n                ]\r\n            )\r\n        );\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/builders/transferbuilder.php b/local/modules/sprint.migration/lib/builders/transferbuilder.php
--- a/local/modules/sprint.migration/lib/builders/transferbuilder.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/builders/transferbuilder.php	(date 1670844554000)
@@ -5,8 +5,9 @@
 use Exception;
 use Sprint\Migration\AbstractBuilder;
 use Sprint\Migration\Enum\VersionEnum;
-use Sprint\Migration\Exceptions\ExchangeException;
+use Sprint\Migration\Exceptions\MigrationException;
 use Sprint\Migration\Locale;
+use Sprint\Migration\VersionConfig;
 use Sprint\Migration\VersionManager;
 
 class TransferBuilder extends AbstractBuilder
@@ -67,17 +68,17 @@
     }
 
     /**
-     * @throws ExchangeException
+     * @throws MigrationException
      * @throws Exception
      */
     protected function execute()
     {
         $vmFrom = new VersionManager(
-            $this->getVersionConfig()->getName()
+            $this->getVersionConfig()
         );
 
         $vmTo = new VersionManager(
-            $this->getFieldValue('transfer_to')
+            new VersionConfig($this->getFieldValue('transfer_to'))
         );
 
         $transferresult = $vmFrom->transferMigration(
Index: local/modules/sprint.migration/install/gadgets/sprint.migration/dashboard/.parameters.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?\r\n\r\nuse Bitrix\\Main\\Loader;\r\nuse Sprint\\Migration\\Locale;\r\nuse Sprint\\Migration\\SchemaManager;\r\nuse Sprint\\Migration\\VersionConfig;\r\n\r\nif (!defined('B_PROLOG_INCLUDED') || B_PROLOG_INCLUDED !== true) {\r\n    die();\r\n}\r\n\r\nif (!Loader::includeModule('sprint.migration')) {\r\n    return false;\r\n}\r\n\r\n$configs = (new VersionConfig())->getList();\r\n\r\n$schemaValues = [];\r\n$configValues = [];\r\n\r\nforeach ($configs as $config) {\r\n    $configValues[$config['name']] = $config['title'];\r\n\r\n    $schemas = (new SchemaManager($config['name']))->getEnabledSchemas();\r\n    foreach ($schemas as $schema) {\r\n        $schemaValues[$schema->getName()] = $schema->getTitle();\r\n    }\r\n}\r\n\r\n$arParameters = [\r\n    'USER_PARAMETERS' => [\r\n        'SELECT_CONFIGS' => [\r\n            'NAME' => Locale::getMessage('GD_SELECT_CONFIGS'),\r\n            'TYPE' => 'LIST',\r\n            'SIZE' => 10,\r\n            'VALUES' => $configValues,\r\n            'MULTIPLE' => 'Y',\r\n            'DEFAULT' => [],\r\n        ],\r\n        'CHECK_SCHEMAS' => [\r\n            'NAME' => Locale::getMessage('GD_CHECK_SCHEMAS'),\r\n            'TYPE' => 'LIST',\r\n            'SIZE' => 10,\r\n            'VALUES' => $schemaValues,\r\n            'MULTIPLE' => 'Y',\r\n            'DEFAULT' => [],\r\n        ],\r\n    ],\r\n];\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/install/gadgets/sprint.migration/dashboard/.parameters.php b/local/modules/sprint.migration/install/gadgets/sprint.migration/dashboard/.parameters.php
--- a/local/modules/sprint.migration/install/gadgets/sprint.migration/dashboard/.parameters.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/install/gadgets/sprint.migration/dashboard/.parameters.php	(date 1670844554000)
@@ -21,7 +21,9 @@
 foreach ($configs as $config) {
     $configValues[$config['name']] = $config['title'];
 
-    $schemas = (new SchemaManager($config['name']))->getEnabledSchemas();
+    $schemas = (new SchemaManager(
+        new VersionConfig($config['name'])
+    ))->getEnabledSchemas();
     foreach ($schemas as $schema) {
         $schemaValues[$schema->getName()] = $schema->getTitle();
     }
Index: local/modules/sprint.migration/lib/builders/medialibelementsbuilder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Builders;\r\n\r\nuse Sprint\\Migration\\Exceptions\\ExchangeException;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Exceptions\\MigrationException;\r\nuse Sprint\\Migration\\Exceptions\\RebuildException;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\nuse Sprint\\Migration\\Locale;\r\nuse Sprint\\Migration\\Module;\r\nuse Sprint\\Migration\\VersionBuilder;\r\n\r\nclass MedialibElementsBuilder extends VersionBuilder\r\n{\r\n    /**\r\n     * @return bool\r\n     */\r\n    protected function isBuilderEnabled()\r\n    {\r\n        return (!Locale::isWin1251() && $this->getHelperManager()->MedialibExchange()->isEnabled());\r\n    }\r\n\r\n    protected function initialize()\r\n    {\r\n        $this->setTitle(Locale::getMessage('BUILDER_MedialibElements1'));\r\n        $this->setDescription(Locale::getMessage('BUILDER_MedialibElements2'));\r\n        $this->setGroup('Medialib');\r\n\r\n        $this->addVersionFields();\r\n    }\r\n\r\n    /**\r\n     * @throws RebuildException\r\n     * @throws ExchangeException\r\n     * @throws RestartException\r\n     * @throws HelperException\r\n     * @throws MigrationException\r\n     */\r\n    protected function execute()\r\n    {\r\n        $medialibExchange = $this->getHelperManager()->MedialibExchange();\r\n        $collectionIds = $this->addFieldAndReturn(\r\n            'collection_id',\r\n            [\r\n                'title'       => Locale::getMessage('BUILDER_MedialibElements_CollectionId'),\r\n                'placeholder' => '',\r\n                'width'       => 250,\r\n                'select'      => $medialibExchange->getCollectionStructure(\r\n                    $medialibExchange::TYPE_IMAGE\r\n                ),\r\n                'multiple'    => true,\r\n            ]\r\n        );\r\n\r\n        $this->getExchangeManager()\r\n             ->MedialibElementsExport()\r\n             ->setLimit(20)\r\n             ->setCollectionIds($collectionIds)\r\n             ->setExchangeFile(\r\n                 $this->getVersionResourceFile(\r\n                     $this->getVersionName(),\r\n                     'medialib_elements.xml'\r\n                 )\r\n             )->execute();\r\n\r\n        $this->createVersionFile(\r\n            Module::getModuleDir() . '/templates/MedialibElementsExport.php'\r\n        );\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/builders/medialibelementsbuilder.php b/local/modules/sprint.migration/lib/builders/medialibelementsbuilder.php
--- a/local/modules/sprint.migration/lib/builders/medialibelementsbuilder.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/builders/medialibelementsbuilder.php	(date 1670844554000)
@@ -2,9 +2,8 @@
 
 namespace Sprint\Migration\Builders;
 
-use Sprint\Migration\Exceptions\ExchangeException;
-use Sprint\Migration\Exceptions\HelperException;
 use Sprint\Migration\Exceptions\MigrationException;
+use Sprint\Migration\Exceptions\HelperException;
 use Sprint\Migration\Exceptions\RebuildException;
 use Sprint\Migration\Exceptions\RestartException;
 use Sprint\Migration\Locale;
@@ -32,7 +31,7 @@
 
     /**
      * @throws RebuildException
-     * @throws ExchangeException
+     * @throws MigrationException
      * @throws RestartException
      * @throws HelperException
      * @throws MigrationException
Index: local/modules/sprint.migration/admin/steps/migration_execute.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse Sprint\\Migration\\Enum\\VersionEnum;\r\nuse Sprint\\Migration\\VersionConfig;\r\nuse Sprint\\Migration\\VersionManager;\r\n\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) {\r\n    die();\r\n}\r\n\r\n\r\nif ($_POST[\"step_code\"] == \"migration_execute\" && check_bitrix_sessid('send_sessid')) {\r\n\r\n    /** @var $versionConfig VersionConfig */\r\n    $versionManager = new VersionManager($versionConfig);\r\n\r\n    $params = !empty($_POST['params']) ? $_POST['params'] : [];\r\n    $restart = !empty($_POST['restart']) ? 1 : 0;\r\n    $version = isset($_POST['version']) ? $_POST['version'] : 0;\r\n    $action = !empty($_POST['action']) ? $_POST['action'] : 0;\r\n    $nextAction = !empty($_POST['next_action']) ? $_POST['next_action'] : 0;\r\n    $skipVersions = !empty($_POST['skip_versions']) ? $_POST['skip_versions'] : [];\r\n    $settag = !empty($_POST['settag']) ? trim($_POST['settag']) : '';\r\n\r\n\r\n    $search = !empty($_POST['search']) ? trim($_POST['search']) : '';\r\n    $search = Sprint\\Migration\\Locale::convertToUtf8IfNeed($search);\r\n\r\n    $filter = !empty($_POST['filter']) ? trim($_POST['filter']) : '';\r\n\r\n    $filterVersion = [\r\n        'search' => $search,\r\n        'tag' => '',\r\n        'modified' => '',\r\n        'older' => '',\r\n    ];\r\n\r\n    if ($filter == 'migration_view_tag') {\r\n        $filterVersion['tag'] = $search;\r\n        $filterVersion['search'] = '';\r\n    } elseif ($filter == 'migration_view_modified') {\r\n        $filterVersion['modified'] = 1;\r\n    } elseif ($filter == 'migration_view_older') {\r\n        $filterVersion['older'] = 1;\r\n    }\r\n\r\n\r\n    if (!$version) {\r\n        if ($nextAction == VersionEnum::ACTION_UP || $nextAction == VersionEnum::ACTION_DOWN) {\r\n\r\n            $version = 0;\r\n            $action = $nextAction;\r\n\r\n            $filterVersion = array_merge([\r\n                'status' => ($action == VersionEnum::ACTION_UP) ? VersionEnum::STATUS_NEW : VersionEnum::STATUS_INSTALLED,\r\n            ], $filterVersion);\r\n\r\n            $items = $versionManager->getVersions($filterVersion);\r\n\r\n            foreach ($items as $item) {\r\n                if (!in_array($item['version'], $skipVersions)) {\r\n                    $version = $item['version'];\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    if ($version && $action) {\r\n\r\n        if (!$restart) {\r\n            Sprint\\Migration\\Out::out('[%s]%s (%s) start[/]', $action, $version, $action);\r\n        }\r\n\r\n        $success = $versionManager->startMigration($version, $action, $params, false, $settag);\r\n        $restart = $versionManager->needRestart($version);\r\n\r\n        if ($success && !$restart) {\r\n            Sprint\\Migration\\Out::out('%s (%s) success', $version, $action);\r\n        }\r\n\r\n        if (!$success && !$restart) {\r\n            Sprint\\Migration\\Out::outException($versionManager->getLastException());\r\n\r\n            if ($versionConfig->getVal('stop_on_errors')) {\r\n                $nextAction = false;\r\n            } else {\r\n                $skipVersions[] = $version;\r\n            }\r\n        }\r\n\r\n        if ($restart) {\r\n            $json = json_encode([\r\n                'params' => $versionManager->getRestartParams($version),\r\n                'action' => $action,\r\n                'version' => $version,\r\n                'next_action' => $nextAction,\r\n                'restart' => 1,\r\n                'search' => $search,\r\n                'filter' => $filter,\r\n                'settag' => $settag,\r\n            ]);\r\n\r\n            ?>\r\n            <script>migrationExecuteStep('migration_execute', <?=$json?>);</script><?php\r\n        } elseif ($nextAction) {\r\n            $json = json_encode([\r\n                'next_action' => $nextAction,\r\n                'skip_versions' => $skipVersions,\r\n                'settag' => $settag,\r\n                'search' => $search,\r\n                'filter' => $filter,\r\n            ]);\r\n\r\n            ?>\r\n            <script>\r\n                migrationMigrationRefresh(function () {\r\n                    migrationExecuteStep('migration_execute', <?=$json?>);\r\n                });\r\n            </script><?php\r\n        } else {\r\n            ?>\r\n            <script>\r\n                migrationMigrationRefresh();\r\n            </script><?php\r\n        }\r\n    } else {\r\n        ?>\r\n        <script>\r\n            migrationMigrationRefresh();\r\n        </script><?php\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/admin/steps/migration_execute.php b/local/modules/sprint.migration/admin/steps/migration_execute.php
--- a/local/modules/sprint.migration/admin/steps/migration_execute.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/admin/steps/migration_execute.php	(date 1670844554000)
@@ -3,14 +3,13 @@
 use Sprint\Migration\Enum\VersionEnum;
 use Sprint\Migration\VersionConfig;
 use Sprint\Migration\VersionManager;
+use Sprint\Migration\Locale;
 
 if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true) {
     die();
 }
 
-
 if ($_POST["step_code"] == "migration_execute" && check_bitrix_sessid('send_sessid')) {
-
     /** @var $versionConfig VersionConfig */
     $versionManager = new VersionManager($versionConfig);
 
@@ -19,20 +18,18 @@
     $version = isset($_POST['version']) ? $_POST['version'] : 0;
     $action = !empty($_POST['action']) ? $_POST['action'] : 0;
     $nextAction = !empty($_POST['next_action']) ? $_POST['next_action'] : 0;
-    $skipVersions = !empty($_POST['skip_versions']) ? $_POST['skip_versions'] : [];
     $settag = !empty($_POST['settag']) ? trim($_POST['settag']) : '';
 
-
     $search = !empty($_POST['search']) ? trim($_POST['search']) : '';
     $search = Sprint\Migration\Locale::convertToUtf8IfNeed($search);
 
     $filter = !empty($_POST['filter']) ? trim($_POST['filter']) : '';
 
     $filterVersion = [
-        'search' => $search,
-        'tag' => '',
+        'search'   => $search,
+        'tag'      => '',
         'modified' => '',
-        'older' => '',
+        'older'    => '',
     ];
 
     if ($filter == 'migration_view_tag') {
@@ -44,10 +41,8 @@
         $filterVersion['older'] = 1;
     }
 
-
     if (!$version) {
         if ($nextAction == VersionEnum::ACTION_UP || $nextAction == VersionEnum::ACTION_DOWN) {
-
             $version = 0;
             $action = $nextAction;
 
@@ -58,78 +53,97 @@
             $items = $versionManager->getVersions($filterVersion);
 
             foreach ($items as $item) {
-                if (!in_array($item['version'], $skipVersions)) {
-                    $version = $item['version'];
-                    break;
-                }
+                $version = $item['version'];
+                break;
             }
-
         }
     }
 
     if ($version && $action) {
-
         if (!$restart) {
             Sprint\Migration\Out::out('[%s]%s (%s) start[/]', $action, $version, $action);
         }
 
-        $success = $versionManager->startMigration($version, $action, $params, false, $settag);
-        $restart = $versionManager->needRestart($version);
+        $success = $versionManager->startMigration(
+            $version,
+            $action,
+            $params,
+            $settag
+        );
+
+        $restart = ($success) ? $versionManager->needRestart() : $restart;
 
         if ($success && !$restart) {
             Sprint\Migration\Out::out('%s (%s) success', $version, $action);
-        }
 
-        if (!$success && !$restart) {
-            Sprint\Migration\Out::outException($versionManager->getLastException());
+            if ($nextAction) {
+                $json = json_encode([
+                    'next_action' => $nextAction,
+                    'settag'      => $settag,
+                    'search'      => $search,
+                    'filter'      => $filter,
+                ]);
 
-            if ($versionConfig->getVal('stop_on_errors')) {
-                $nextAction = false;
+                ?>
+                <script>
+                    migrationListRefresh(function () {
+                        migrationExecuteStep('migration_execute', <?=$json?>);
+                    });
+                </script><?php
             } else {
-                $skipVersions[] = $version;
+                ?>
+                <script>
+                    migrationListRefresh();
+                </script><?php
             }
         }
 
-        if ($restart) {
+        if ($success && $restart) {
             $json = json_encode([
-                'params' => $versionManager->getRestartParams($version),
-                'action' => $action,
-                'version' => $version,
+                'params'      => $versionManager->getRestartParams(),
+                'action'      => $action,
+                'version'     => $version,
                 'next_action' => $nextAction,
-                'restart' => 1,
-                'search' => $search,
-                'filter' => $filter,
-                'settag' => $settag,
+                'restart'     => 1,
+                'search'      => $search,
+                'filter'      => $filter,
+                'settag'      => $settag,
             ]);
 
             ?>
             <script>migrationExecuteStep('migration_execute', <?=$json?>);</script><?php
-        } elseif ($nextAction) {
+        }
+
+        if (!$success) {
+            Sprint\Migration\Out::outException($versionManager->getLastException());
+
             $json = json_encode([
+                'params'      => $params,
+                'action'      => $action,
+                'version'     => $version,
                 'next_action' => $nextAction,
-                'skip_versions' => $skipVersions,
-                'settag' => $settag,
-                'search' => $search,
-                'filter' => $filter,
+                'restart'     => 1,
+                'search'      => $search,
+                'filter'      => $filter,
+                'settag'      => $settag,
             ]);
-
             ?>
             <script>
-                migrationMigrationRefresh(function () {
-                    migrationExecuteStep('migration_execute', <?=$json?>);
-                });
+                (function () {
+                    let $btn = $('<input type="button" value="<?= Locale::getMessage('RESTART_AGAIN') ?>">');
+                    $btn.bind('click', function(){
+                        migrationExecuteStep('migration_execute', <?=$json?>);
+                    })
+                    $('#migration_actions').empty().append($btn);
+                })();
+
+                migrationEnableButtons(1);
             </script><?php
-        } else {
-            ?>
-            <script>
-                migrationMigrationRefresh();
-            </script><?php
         }
     } else {
         ?>
         <script>
-            migrationMigrationRefresh();
+            migrationListRefresh();
         </script><?php
     }
-
 }
Index: local/modules/sprint.migration/admin/steps/migration_delete.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse Sprint\\Migration\\VersionConfig;\r\nuse Sprint\\Migration\\VersionManager;\r\n\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) {\r\n    die();\r\n}\r\n\r\n$existsEvents = (\r\n($_POST[\"step_code\"] == \"migration_delete\")\r\n);\r\n\r\nif ($existsEvents && check_bitrix_sessid('send_sessid')) {\r\n\r\n    /** @var $versionConfig VersionConfig */\r\n    $versionManager = new VersionManager($versionConfig);\r\n\r\n    $version = !empty($_POST['version']) ? $_POST['version'] : '';\r\n\r\n    $deleteresult = $versionManager->deleteMigration($version);\r\n    Sprint\\Migration\\Out::outMessages($deleteresult);\r\n\r\n    ?>\r\n    <script>\r\n        migrationMigrationRefresh(function () {\r\n            migrationScrollList();\r\n            migrationEnableButtons(1);\r\n        });\r\n    </script><?php\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/admin/steps/migration_delete.php b/local/modules/sprint.migration/admin/steps/migration_delete.php
--- a/local/modules/sprint.migration/admin/steps/migration_delete.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/admin/steps/migration_delete.php	(date 1670844554000)
@@ -23,8 +23,8 @@
 
     ?>
     <script>
-        migrationMigrationRefresh(function () {
-            migrationScrollList();
+        migrationListRefresh(function () {
+            migrationListScroll();
             migrationEnableButtons(1);
         });
     </script><?php
Index: local/modules/sprint.migration/lib/builders/iblockelementsbuilder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Builders;\r\n\r\nuse Sprint\\Migration\\Exceptions\\ExchangeException;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Exceptions\\MigrationException;\r\nuse Sprint\\Migration\\Exceptions\\RebuildException;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\nuse Sprint\\Migration\\Locale;\r\nuse Sprint\\Migration\\Module;\r\nuse Sprint\\Migration\\VersionBuilder;\r\n\r\nclass IblockElementsBuilder extends VersionBuilder\r\n{\r\n    /**\r\n     * @return bool\r\n     */\r\n    protected function isBuilderEnabled()\r\n    {\r\n        return (!Locale::isWin1251() && $this->getHelperManager()->Iblock()->isEnabled());\r\n    }\r\n\r\n    protected function initialize()\r\n    {\r\n        $this->setTitle(Locale::getMessage('BUILDER_IblockElementsExport1'));\r\n        $this->setDescription(Locale::getMessage('BUILDER_IblockElementsExport2'));\r\n        $this->setGroup('Iblock');\r\n\r\n        $this->addVersionFields();\r\n    }\r\n\r\n    /**\r\n     * @throws RebuildException\r\n     * @throws ExchangeException\r\n     * @throws RestartException\r\n     * @throws HelperException\r\n     * @throws MigrationException\r\n     */\r\n    protected function execute()\r\n    {\r\n        $iblockId = $this->getFieldValueIblockId();\r\n        $exportFilter = $this->getFieldValueExportFilter();\r\n\r\n        $updateMode = $this->getFieldValueUpdateMode();\r\n        $exportFields = $this->getFieldValueExportFields($iblockId, $updateMode);\r\n        $exportProps = $this->getFieldValueExportProps($iblockId);\r\n\r\n        $this->getExchangeManager()\r\n             ->IblockElementsExport()\r\n             ->setExportFilter($exportFilter)\r\n             ->setExportFields($exportFields)\r\n             ->setExportProperties($exportProps)\r\n             ->setIblockId($iblockId)\r\n             ->setLimit(20)\r\n             ->setExchangeFile(\r\n                 $this->getVersionResourceFile(\r\n                     $this->getVersionName(),\r\n                     'iblock_elements.xml'\r\n                 )\r\n             )->execute();\r\n\r\n        $this->createVersionFile(\r\n            Module::getModuleDir() . '/templates/IblockElementsExport.php',\r\n            [\r\n                'updateMode' => $updateMode,\r\n            ]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     *\r\n     * @throws RebuildException\r\n     * @return array\r\n     */\r\n    protected function getFieldValueExportProps($iblockId)\r\n    {\r\n        $propsMode = $this->addFieldAndReturn(\r\n            'props_mode',\r\n            [\r\n                'title'  => Locale::getMessage('BUILDER_IblockElementsExport_Properties'),\r\n                'width'  => 250,\r\n                'select' => [\r\n                    [\r\n                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_SelectAll'),\r\n                        'value' => 'all',\r\n                    ],\r\n                    [\r\n                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_SelectNone'),\r\n                        'value' => 'none',\r\n                    ],\r\n                    [\r\n                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_SelectSome'),\r\n                        'value' => 'some',\r\n                    ],\r\n                ],\r\n            ]\r\n        );\r\n\r\n        if ($propsMode == 'some') {\r\n            $exportProps = $this->addFieldAndReturn(\r\n                'export_props',\r\n                [\r\n                    'title'    => Locale::getMessage('BUILDER_IblockElementsExport_Properties'),\r\n                    'width'    => 250,\r\n                    'multiple' => 1,\r\n                    'value'    => [],\r\n                    'select'   => $this->getHelperManager()->IblockExchange()->getIblockPropertiesStructure($iblockId),\r\n                ]\r\n            );\r\n        } elseif ($propsMode == 'all') {\r\n            $exportProps = $this->getHelperManager()->IblockExchange()->getIblockPropertiesStructure($iblockId);\r\n            $exportProps = array_column($exportProps, 'value');\r\n        } else {\r\n            $exportProps = [];\r\n        }\r\n\r\n        return $exportProps;\r\n    }\r\n\r\n    /**\r\n     * @throws RebuildException\r\n     * @return array\r\n     */\r\n    protected function getFieldValueExportFilter()\r\n    {\r\n        $elementsMode = $this->addFieldAndReturn(\r\n            'filter_mode',\r\n            [\r\n                'title'  => Locale::getMessage('BUILDER_IblockElementsExport_Filter'),\r\n                'width'  => 250,\r\n                'select' => [\r\n                    [\r\n                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_SelectAll'),\r\n                        'value' => 'all',\r\n                    ],\r\n                    [\r\n                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_SelectSomeId'),\r\n                        'value' => 'list_id',\r\n                    ],\r\n                    [\r\n                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_SelectSomeXmlId'),\r\n                        'value' => 'list_xml_id',\r\n                    ],\r\n                ],\r\n            ]\r\n        );\r\n\r\n        if ($elementsMode == 'list_id') {\r\n            $filterIds = $this->addFieldAndReturn(\r\n                'export_filter_list_id', [\r\n                    'title'  => Locale::getMessage('BUILDER_IblockElementsExport_FilterListId'),\r\n                    'width'  => 350,\r\n                    'height' => 40,\r\n                ]\r\n            );\r\n\r\n            $exportFilter = [\r\n                'ID' => $this->explodeString($filterIds),\r\n            ];\r\n        } elseif ($elementsMode == 'list_xml_id') {\r\n            $filterXmlIds = $this->addFieldAndReturn(\r\n                'export_filter_list_xml_id',\r\n                [\r\n                    'title'  => Locale::getMessage('BUILDER_IblockElementsExport_FilterListXmlId'),\r\n                    'width'  => 350,\r\n                    'height' => 40,\r\n                ]\r\n            );\r\n\r\n            $exportFilter = [\r\n                'XML_ID' => $this->explodeString($filterXmlIds),\r\n            ];\r\n        } else {\r\n            $exportFilter = [];\r\n        }\r\n\r\n        return $exportFilter;\r\n    }\r\n\r\n    /**\r\n     * @param      $iblockId\r\n     *\r\n     * @param bool $updateMode\r\n     *\r\n     * @throws RebuildException\r\n     * @return array\r\n     */\r\n    protected function getFieldValueExportFields($iblockId, $updateMode = false)\r\n    {\r\n        $fieldsMode = $this->addFieldAndReturn(\r\n            'fields_mode',\r\n            [\r\n                'title'  => Locale::getMessage('BUILDER_IblockElementsExport_Fields'),\r\n                'width'  => 250,\r\n                'select' => [\r\n                    [\r\n                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_SelectAll'),\r\n                        'value' => 'all',\r\n                    ],\r\n                    [\r\n                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_SelectNone'),\r\n                        'value' => 'none',\r\n                    ],\r\n                    [\r\n                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_SelectSome'),\r\n                        'value' => 'some',\r\n                    ],\r\n                ],\r\n            ]\r\n        );\r\n\r\n        if ($fieldsMode == 'some') {\r\n            $exportFields = $this->addFieldAndReturn(\r\n                'export_filter', [\r\n                    'title'    => Locale::getMessage('BUILDER_IblockElementsExport_Fields'),\r\n                    'width'    => 250,\r\n                    'multiple' => 1,\r\n                    'value'    => [],\r\n                    'select'   => $this->getHelperManager()->IblockExchange()->getIblockElementFieldsStructure($iblockId),\r\n                ]\r\n            );\r\n        } elseif ($fieldsMode == 'all') {\r\n            $exportFields = $this->getHelperManager()->IblockExchange()->getIblockElementFieldsStructure($iblockId);\r\n            $exportFields = array_column($exportFields, 'value');\r\n        } else {\r\n            $exportFields = [];\r\n        }\r\n\r\n        if ($updateMode == 'code') {\r\n            if (!in_array('CODE', $exportFields)) {\r\n                $exportFields[] = 'CODE';\r\n            }\r\n        } elseif ($updateMode == 'xml_id') {\r\n            if (!in_array('XML_ID', $exportFields)) {\r\n                $exportFields[] = 'XML_ID';\r\n            }\r\n        }\r\n\r\n        return $exportFields;\r\n    }\r\n\r\n    /**\r\n     * @throws HelperException\r\n     * @throws RebuildException\r\n     * @return integer\r\n     */\r\n    protected function getFieldValueIblockId()\r\n    {\r\n        $helper = $this->getHelperManager();\r\n\r\n        $iblockId = $this->addFieldAndReturn(\r\n            'iblock_id', [\r\n                'title'       => Locale::getMessage('BUILDER_IblockElementsExport_IblockId'),\r\n                'placeholder' => '',\r\n                'width'       => 250,\r\n                'items'       => $this->getHelperManager()->IblockExchange()->getIblocksStructure(),\r\n            ]\r\n        );\r\n\r\n        $iblock = $helper->Iblock()->exportIblock($iblockId);\r\n        if (empty($iblock)) {\r\n            $this->rebuildField('iblock_id');\r\n        }\r\n\r\n        return (int)$iblockId;\r\n    }\r\n\r\n    /**\r\n     * @throws RebuildException\r\n     * @return string\r\n     */\r\n    protected function getFieldValueUpdateMode()\r\n    {\r\n        $updateMode = $this->addFieldAndReturn(\r\n            'update_mode', [\r\n                'title'       => Locale::getMessage('BUILDER_IblockElementsExport_UpdateMode'),\r\n                'placeholder' => '',\r\n                'width'       => 250,\r\n                'select'      => [\r\n                    [\r\n                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_NotUpdate'),\r\n                        'value' => 'not',\r\n                    ],\r\n                    [\r\n                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_UpdateByCode'),\r\n                        'value' => 'code',\r\n                    ],\r\n                    [\r\n                        'title' => Locale::getMessage('BUILDER_IblockElementsExport_UpdateByXmlId'),\r\n                        'value' => 'xml_id',\r\n                    ],\r\n                ],\r\n            ]\r\n        );\r\n\r\n        return $updateMode;\r\n    }\r\n\r\n    protected function explodeString($string, $delimiter = ',')\r\n    {\r\n        $values = explode($delimiter, trim($string));\r\n\r\n        $cleaned = [];\r\n        foreach ($values as $value) {\r\n            $value = trim(strval($value));\r\n            if (!empty($value)) {\r\n                $cleaned[] = $value;\r\n            }\r\n        }\r\n        return $cleaned;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/builders/iblockelementsbuilder.php b/local/modules/sprint.migration/lib/builders/iblockelementsbuilder.php
--- a/local/modules/sprint.migration/lib/builders/iblockelementsbuilder.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/builders/iblockelementsbuilder.php	(date 1670844554000)
@@ -2,11 +2,11 @@
 
 namespace Sprint\Migration\Builders;
 
-use Sprint\Migration\Exceptions\ExchangeException;
 use Sprint\Migration\Exceptions\HelperException;
 use Sprint\Migration\Exceptions\MigrationException;
 use Sprint\Migration\Exceptions\RebuildException;
 use Sprint\Migration\Exceptions\RestartException;
+use Sprint\Migration\Exchange\IblockElementsExport;
 use Sprint\Migration\Locale;
 use Sprint\Migration\Module;
 use Sprint\Migration\VersionBuilder;
@@ -32,7 +32,7 @@
 
     /**
      * @throws RebuildException
-     * @throws ExchangeException
+     * @throws MigrationException
      * @throws RestartException
      * @throws HelperException
      * @throws MigrationException
@@ -48,6 +48,7 @@
 
         $this->getExchangeManager()
              ->IblockElementsExport()
+             ->setUpdateMode($updateMode)
              ->setExportFilter($exportFilter)
              ->setExportFields($exportFields)
              ->setExportProperties($exportProps)
@@ -228,11 +229,11 @@
             $exportFields = [];
         }
 
-        if ($updateMode == 'code') {
+        if ($updateMode == IblockElementsExport::UPDATE_MODE_CODE) {
             if (!in_array('CODE', $exportFields)) {
                 $exportFields[] = 'CODE';
             }
-        } elseif ($updateMode == 'xml_id') {
+        } elseif ($updateMode == IblockElementsExport::UPDATE_MODE_XML_ID) {
             if (!in_array('XML_ID', $exportFields)) {
                 $exportFields[] = 'XML_ID';
             }
@@ -273,7 +274,7 @@
      */
     protected function getFieldValueUpdateMode()
     {
-        $updateMode = $this->addFieldAndReturn(
+        return $this->addFieldAndReturn(
             'update_mode', [
                 'title'       => Locale::getMessage('BUILDER_IblockElementsExport_UpdateMode'),
                 'placeholder' => '',
@@ -281,34 +282,24 @@
                 'select'      => [
                     [
                         'title' => Locale::getMessage('BUILDER_IblockElementsExport_NotUpdate'),
-                        'value' => 'not',
+                        'value' => IblockElementsExport::UPDATE_MODE_NOT,
                     ],
                     [
                         'title' => Locale::getMessage('BUILDER_IblockElementsExport_UpdateByCode'),
-                        'value' => 'code',
+                        'value' => IblockElementsExport::UPDATE_MODE_CODE,
                     ],
                     [
                         'title' => Locale::getMessage('BUILDER_IblockElementsExport_UpdateByXmlId'),
-                        'value' => 'xml_id',
+                        'value' => IblockElementsExport::UPDATE_MODE_XML_ID,
                     ],
                 ],
             ]
         );
-
-        return $updateMode;
     }
 
-    protected function explodeString($string, $delimiter = ',')
+    protected function explodeString($string, $delimiter = ' ')
     {
         $values = explode($delimiter, trim($string));
-
-        $cleaned = [];
-        foreach ($values as $value) {
-            $value = trim(strval($value));
-            if (!empty($value)) {
-                $cleaned[] = $value;
-            }
-        }
-        return $cleaned;
+        return array_filter($values);
     }
 }
Index: local/modules/sprint.migration/install/version.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\n$arModuleVersion = [\r\n    \"VERSION\" => \"4.1.3\",\r\n    \"VERSION_DATE\" => \"2022-11-28 10:20:30\",\r\n];\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/install/version.php b/local/modules/sprint.migration/install/version.php
--- a/local/modules/sprint.migration/install/version.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/install/version.php	(date 1670844554000)
@@ -1,6 +1,6 @@
 <?php
 
 $arModuleVersion = [
-    "VERSION" => "4.1.3",
-    "VERSION_DATE" => "2022-11-28 10:20:30",
+    "VERSION" => "4.2.1",
+    "VERSION_DATE" => "2022-12-10 10:20:30",
 ];
Index: local/modules/sprint.migration/admin/steps/migration_mark.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse Sprint\\Migration\\VersionConfig;\r\nuse Sprint\\Migration\\VersionManager;\r\n\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) {\r\n    die();\r\n}\r\n\r\n$existsEvents = (\r\n($_POST[\"step_code\"] == \"migration_mark\")\r\n);\r\n\r\nif ($existsEvents && check_bitrix_sessid('send_sessid')) {\r\n\r\n    /** @var $versionConfig VersionConfig */\r\n    $versionManager = new VersionManager($versionConfig);\r\n\r\n    $version = !empty($_POST['version']) ? $_POST['version'] : '';\r\n    $status = !empty($_POST['status']) ? $_POST['status'] : '';\r\n\r\n    $markresult = $versionManager->markMigration($version, $status);\r\n    Sprint\\Migration\\Out::outMessages($markresult);\r\n\r\n    ?>\r\n    <script>\r\n        migrationMigrationRefresh(function () {\r\n            migrationScrollList();\r\n            migrationEnableButtons(1);\r\n        });\r\n    </script><?php\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/admin/steps/migration_mark.php b/local/modules/sprint.migration/admin/steps/migration_mark.php
--- a/local/modules/sprint.migration/admin/steps/migration_mark.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/admin/steps/migration_mark.php	(date 1670844554000)
@@ -24,8 +24,8 @@
 
     ?>
     <script>
-        migrationMigrationRefresh(function () {
-            migrationScrollList();
+        migrationListRefresh(function () {
+            migrationListScroll();
             migrationEnableButtons(1);
         });
     </script><?php
Index: local/modules/sprint.migration/admin/includes/version.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse Sprint\\Migration\\Locale;\r\n\r\n$search = '';\r\n$listview = '';\r\n\r\n$getOnclickMenu = function ()  {\r\n    $menu = [];\r\n    $menu[] = [\r\n        'TEXT' => Locale::getMessage('UP_START_WITH_TAG'),\r\n        'ONCLICK' => 'migrationMigrationsUpWithTag()',\r\n    ];\r\n    $menu[] = [\r\n        'TEXT' => Locale::getMessage('DOWN_START'),\r\n        'ONCLICK' => 'migrationMigrationsDownConfirm()',\r\n    ];\r\n    $menu[] = [\r\n        'TEXT' => Locale::getMessage('DELETE_UNKNOWN'),\r\n        'ONCLICK' => 'migrationMigrationsDeleteUnknownConfirm()',\r\n    ];\r\n    return CUtil::PhpToJSObject($menu);\r\n}\r\n?>\r\n<div id=\"migration-container\" data-sessid=\"<?= bitrix_sessid() ?>\">\r\n    <div class=\"sp-group\">\r\n        <div class=\"sp-group-row2\">\r\n            <div class=\"sp-block sp-block-scroll sp-white\">\r\n                <div id=\"migration_migrations\" class=\"sp-scroll\"></div>\r\n            </div>\r\n            <div class=\"sp-block sp-block-scroll\">\r\n                <div id=\"migration_progress\" class=\"sp-scroll\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"sp-group\">\r\n        <div class=\"sp-group-row2\">\r\n            <div class=\"sp-block\">\r\n                <input type=\"button\"\r\n                       value=\"<?= Locale::getMessage('UP_START') ?>\"\r\n                       onclick=\"migrationMigrationsUpConfirm();\"\r\n                       class=\"adm-btn-green\"/>\r\n                <a onclick=\"this.blur();BX.adminShowMenu(this, <?= $getOnclickMenu() ?>, {active_class: 'adm-btn-active',public_frame: '0'}); return false;\"\r\n                   href=\"javascript:void(0)\"\r\n                   class=\"adm-btn\"\r\n                   hidefocus=\"true\">&equiv;</a>\r\n            </div>\r\n            <div class=\"sp-block\">\r\n                <input placeholder=\"<?= Locale::getMessage('SEARCH') ?>\"\r\n                       style=\"\"\r\n                       type=\"text\"\r\n                       value=\"<?= $search ?>\"\r\n                       class=\"adm-input\"\r\n                       name=\"migration_search\"/>\r\n                <select name=\"migration_filter\">\r\n                    <option <?php if ($listview == 'migration_view_all'): ?>selected=\"selected\"<?php endif ?>\r\n                            value=\"migration_view_all\"><?= Locale::getMessage('TOGGLE_LIST') ?></option>\r\n                    <option <?php if ($listview == 'migration_view_new'): ?>selected=\"selected\"<?php endif ?>\r\n                            value=\"migration_view_new\"><?= Locale::getMessage('TOGGLE_NEW') ?></option>\r\n                    <option <?php if ($listview == 'migration_view_installed'): ?>selected=\"selected\"<?php endif ?>\r\n                            value=\"migration_view_installed\"><?= Locale::getMessage('TOGGLE_INSTALLED') ?></option>\r\n                    <option <?php if ($listview == 'migration_view_tag'): ?>selected=\"selected\"<?php endif ?>\r\n                            value=\"migration_view_tag\"><?= Locale::getMessage('TOGGLE_TAG') ?></option>\r\n                    <option <?php if ($listview == 'migration_view_modified'): ?>selected=\"selected\"<?php endif ?>\r\n                            value=\"migration_view_modified\"><?= Locale::getMessage('TOGGLE_MODIFIED') ?></option>\r\n                    <option <?php if ($listview == 'migration_view_older'): ?>selected=\"selected\"<?php endif ?>\r\n                            value=\"migration_view_older\"><?= Locale::getMessage('TOGGLE_OLDER') ?></option>\r\n                    <option <?php if ($listview == 'migration_view_status'): ?>selected=\"selected\"<?php endif ?>\r\n                            value=\"migration_view_status\"><?= Locale::getMessage('TOGGLE_STATUS') ?></option>\r\n                </select>\r\n                <input type=\"button\" value=\"<?= Locale::getMessage('SEARCH') ?>\" class=\"sp-search\"/>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"sp-separator\"></div>\r\n    <?php include __DIR__ . '/builder_group.php' ?>\r\n    <div class=\"sp-separator\"></div>\r\n</div>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/admin/includes/version.php b/local/modules/sprint.migration/admin/includes/version.php
--- a/local/modules/sprint.migration/admin/includes/version.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/admin/includes/version.php	(date 1670844554000)
@@ -30,6 +30,7 @@
             </div>
             <div class="sp-block sp-block-scroll">
                 <div id="migration_progress" class="sp-scroll"></div>
+                <div id="migration_actions"></div>
             </div>
         </div>
     </div>
Index: local/modules/sprint.migration/admin/steps/migration_transfer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse Sprint\\Migration\\VersionConfig;\r\nuse Sprint\\Migration\\VersionManager;\r\n\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) {\r\n    die();\r\n}\r\n\r\n$existsEvents = (\r\n($_POST[\"step_code\"] == \"migration_transfer\")\r\n);\r\n\r\nif ($existsEvents && check_bitrix_sessid('send_sessid')) {\r\n\r\n    $version = !empty($_POST['version']) ? $_POST['version'] : '';\r\n    $transferTo = !empty($_POST['transfer_to']) ? $_POST['transfer_to'] : '';\r\n\r\n    /** @var $versionConfig VersionConfig */\r\n    $vmFrom = new VersionManager($versionConfig);\r\n    $vmTo = new VersionManager($transferTo);\r\n\r\n    $transferresult = $vmFrom->transferMigration(\r\n        $version,\r\n        $vmTo\r\n    );\r\n\r\n    Sprint\\Migration\\Out::outMessages($transferresult);\r\n    ?>\r\n    <script>\r\n        migrationMigrationRefresh(function () {\r\n            migrationScrollList();\r\n            migrationEnableButtons(1);\r\n        });\r\n    </script><?php\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/admin/steps/migration_transfer.php b/local/modules/sprint.migration/admin/steps/migration_transfer.php
--- a/local/modules/sprint.migration/admin/steps/migration_transfer.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/admin/steps/migration_transfer.php	(date 1670844554000)
@@ -28,8 +28,8 @@
     Sprint\Migration\Out::outMessages($transferresult);
     ?>
     <script>
-        migrationMigrationRefresh(function () {
-            migrationScrollList();
+        migrationListRefresh(function () {
+            migrationListScroll();
             migrationEnableButtons(1);
         });
     </script><?php
Index: local/modules/sprint.migration/install/gadgets/sprint.migration/dashboard/index.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n/**\r\n * @var $arGadgetParams array\r\n */\r\n\r\nuse Bitrix\\Main\\Loader;\r\nuse Sprint\\Migration\\Locale;\r\nuse Sprint\\Migration\\Module;\r\nuse Sprint\\Migration\\SchemaManager;\r\nuse Sprint\\Migration\\VersionConfig;\r\nuse Sprint\\Migration\\VersionManager;\r\n\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) {\r\n    die();\r\n}\r\nglobal $APPLICATION;\r\ntry {\r\n\r\n    if (!Loader::includeModule('sprint.migration')) {\r\n        Throw new Exception('need to install module sprint.migration');\r\n    }\r\n\r\n    if ($APPLICATION->GetGroupRight('sprint.migration') == 'D') {\r\n        Throw new Exception(Locale::getMessage(\"ACCESS_DENIED\"));\r\n    }\r\n\r\n    Module::checkHealth();\r\n\r\n    $arGadgetParams['SELECT_CONFIGS'] = is_array($arGadgetParams['SELECT_CONFIGS']) ? $arGadgetParams['SELECT_CONFIGS'] : [];\r\n    $arGadgetParams['CHECK_SCHEMAS'] = is_array($arGadgetParams['CHECK_SCHEMAS']) ? $arGadgetParams['CHECK_SCHEMAS'] : [];\r\n\r\n    $results = [];\r\n\r\n    $configs = (new VersionConfig())->getList();\r\n    foreach ($configs as $config) {\r\n\r\n        if (!empty($arGadgetParams['SELECT_CONFIGS'])) {\r\n            if (!in_array($config['name'], $arGadgetParams['SELECT_CONFIGS'])) {\r\n                continue;\r\n            }\r\n        }\r\n\r\n        $versionManager = new VersionManager(\r\n            $config['name']\r\n        );\r\n        $hasNewVersions = count($versionManager->getVersions([\r\n            'status' => 'new',\r\n        ]));\r\n\r\n        $results[] = [\r\n            'title' => $config['title'],\r\n            'text' => ($hasNewVersions) ? Locale::getMessage('GD_MIGRATIONS_RED') : Locale::getMessage('GD_MIGRATIONS_GREEN'),\r\n            'state' => ($hasNewVersions) ? 'red' : 'green',\r\n            'buttons' => [\r\n                [\r\n                    'text' => Locale::getMessage('GD_SHOW'),\r\n                    'title' => Locale::getMessage('GD_SHOW_MIGRATIONS'),\r\n                    'url' => '/bitrix/admin/sprint_migrations.php?' . http_build_query([\r\n                            'config' => $config['name'],\r\n                            'lang' => LANGUAGE_ID,\r\n                        ]),\r\n                ],\r\n            ],\r\n        ];\r\n\r\n        if (!empty($arGadgetParams['CHECK_SCHEMAS'])) {\r\n\r\n            $schemaManager = new SchemaManager(\r\n                $config['name']\r\n            );\r\n\r\n            $modifiedCnt = 0;\r\n            $enabledSchemas = $schemaManager->getEnabledSchemas();\r\n            foreach ($enabledSchemas as $schema) {\r\n                if (!in_array($schema->getName(), $arGadgetParams['CHECK_SCHEMAS'])) {\r\n                    continue;\r\n                }\r\n\r\n                if ($schema->isModified()) {\r\n                    $modifiedCnt++;\r\n                }\r\n            }\r\n\r\n            $results[] = [\r\n                'title' => $config['schema_title'],\r\n                'text' => ($modifiedCnt) ? Locale::getMessage('GD_SCHEMA_RED') : Locale::getMessage('GD_SCHEMA_GREEN'),\r\n                'state' => ($modifiedCnt) ? 'red' : 'green',\r\n                'buttons' => [\r\n                    [\r\n                        'text' => Locale::getMessage('GD_SHOW'),\r\n                        'title' => Locale::getMessage('GD_SHOW_SCHEMAS'),\r\n                        'url' => '/bitrix/admin/sprint_migrations.php?' . http_build_query([\r\n                                'schema' => $config['name'],\r\n                                'lang' => LANGUAGE_ID,\r\n                            ]),\r\n                    ],\r\n                ],\r\n            ];\r\n        }\r\n    }\r\n\r\n    include __DIR__ . '/includes/style.php';\r\n    include __DIR__ . '/includes/interface.php';\r\n\r\n} catch (Throwable $e) {\r\n    include __DIR__ . '/includes/style.php';\r\n    include __DIR__ . '/includes/errors.php';\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/install/gadgets/sprint.migration/dashboard/index.php b/local/modules/sprint.migration/install/gadgets/sprint.migration/dashboard/index.php
--- a/local/modules/sprint.migration/install/gadgets/sprint.migration/dashboard/index.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/install/gadgets/sprint.migration/dashboard/index.php	(date 1670844554000)
@@ -41,7 +41,7 @@
         }
 
         $versionManager = new VersionManager(
-            $config['name']
+            new VersionConfig($config['name'])
         );
         $hasNewVersions = count($versionManager->getVersions([
             'status' => 'new',
@@ -66,7 +66,7 @@
         if (!empty($arGadgetParams['CHECK_SCHEMAS'])) {
 
             $schemaManager = new SchemaManager(
-                $config['name']
+                new VersionConfig($config['name'])
             );
 
             $modifiedCnt = 0;
Index: local/modules/sprint.migration/admin/assets/script.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>function migrationMigrationsUpConfirm() {\r\n    if (confirm('Confirm install migrations')) {\r\n        migrationExecuteStep('migration_execute', {\r\n            'next_action': 'up'\r\n        });\r\n    }\r\n}\r\n\r\nfunction migrationMigrationsDownConfirm() {\r\n    if (confirm('Confirm rollback migrations')) {\r\n        migrationExecuteStep('migration_execute', {\r\n            'next_action': 'down'\r\n        });\r\n    }\r\n}\r\n\r\nfunction migrationMigrationsDeleteUnknownConfirm() {\r\n    if (confirm('Confirm delete unknown migrations')) {\r\n        migrationExecuteStep('migration_mark', {\r\n            'version': 'unknown',\r\n            'status': 'new',\r\n        });\r\n    }\r\n}\r\n\r\nfunction migrationMigrationsUpWithTag() {\r\n    var settag = prompt('Set migrations tag');\r\n    if (settag !== null) {\r\n        migrationExecuteStep('migration_execute', {\r\n            'next_action': 'up',\r\n            'settag': settag\r\n        });\r\n    }\r\n}\r\n\r\nfunction migrationMigrationUp(version) {\r\n    migrationExecuteStep('migration_execute', {\r\n        'version': version,\r\n        'action': 'up'\r\n    });\r\n}\r\n\r\nfunction migrationMigrationDown(version) {\r\n    migrationExecuteStep('migration_execute', {\r\n        'version': version,\r\n        'action': 'down'\r\n    });\r\n}\r\n\r\nfunction migrationMigrationSetTag(version, defaultTag) {\r\n    var settag = prompt('Set migration tag', defaultTag);\r\n    if (settag !== null) {\r\n        migrationExecuteStep('migration_settag', {\r\n            'version': version,\r\n            'settag': settag\r\n        });\r\n    }\r\n}\r\n\r\nfunction migrationMigrationMark(version, status) {\r\n    migrationExecuteStep('migration_mark', {\r\n        'version': version,\r\n        'status': status,\r\n    });\r\n}\r\n\r\nfunction migrationMigrationTransfer(version, transferTo) {\r\n    migrationExecuteStep('migration_transfer', {\r\n        'version': version,\r\n        'transfer_to': transferTo,\r\n    });\r\n}\r\n\r\nfunction migrationMigrationDelete(version) {\r\n    migrationExecuteStep('migration_delete', {\r\n        'version': version,\r\n    });\r\n}\r\n\r\nfunction migrationOutLog(result) {\r\n    var $el = $('#migration_progress');\r\n    var lastOutElem = $el.children('div').last();\r\n    if (lastOutElem.hasClass('sp-progress') && $(result).first().hasClass('sp-progress')) {\r\n        lastOutElem.replaceWith(result);\r\n    } else {\r\n        $el.append(result);\r\n        $el.scrollTop($el.prop(\"scrollHeight\"));\r\n    }\r\n}\r\n\r\nfunction migrationExecuteStep(step_code, postData, succesCallback) {\r\n    postData = postData || {};\r\n    postData['step_code'] = step_code;\r\n    postData['send_sessid'] = $('#migration-container').data('sessid');\r\n    postData['search'] = $('input[name=migration_search]').val();\r\n    postData['filter'] = $('select[name=migration_filter]').val();\r\n\r\n    migrationEnableButtons(0);\r\n\r\n    jQuery.ajax({\r\n        type: \"POST\",\r\n        dataType: \"html\",\r\n        data: postData,\r\n        success: function (result) {\r\n            if (succesCallback) {\r\n                succesCallback(result)\r\n            } else {\r\n                migrationOutLog(result);\r\n            }\r\n        },\r\n        error: function (result) {\r\n\r\n        }\r\n    });\r\n}\r\n\r\nfunction migrationEnableButtons(enable) {\r\n    var buttons = $('#migration-container').find('input,select,.adm-btn');\r\n    if (enable) {\r\n        buttons.removeAttr('disabled').removeClass('sp-disabled');\r\n    } else {\r\n        buttons.attr('disabled', 'disabled').addClass('sp-disabled');\r\n    }\r\n}\r\n\r\nfunction migrationMigrationRefresh(callbackAfterRefresh) {\r\n    migrationExecuteStep(\r\n        $('select[name=migration_filter]').val(),\r\n        {},\r\n        function (data) {\r\n            $('#migration_migrations').empty().html(data);\r\n            if (callbackAfterRefresh) {\r\n                callbackAfterRefresh()\r\n            } else {\r\n                migrationEnableButtons(1);\r\n            }\r\n        });\r\n}\r\n\r\nfunction migrationBuilder(postData) {\r\n    migrationExecuteStep('migration_create', postData, function (result) {\r\n        $('.sp-builder_body').html(result);\r\n    });\r\n}\r\n\r\nfunction migrationReset(postData) {\r\n    migrationExecuteStep('migration_reset', postData, function (result) {\r\n        var $body = $('.sp-builder_body');\r\n\r\n        $body.html(result);\r\n\r\n        //$body.get(0).scrollIntoView({block: \"center\", inline: \"nearest\"});\r\n    });\r\n}\r\n\r\nfunction migrationScrollList() {\r\n    var $el = $('#migration_migrations');\r\n    $el.scrollTop($el.prop(\"scrollHeight\"));\r\n}\r\n\r\njQuery(document).ready(function ($) {\r\n\r\n    $.fn.serializeFormJSON = function () {\r\n\r\n        var o = {};\r\n        var a = this.serializeArray();\r\n        $.each(a, function () {\r\n            if (o[this.name]) {\r\n                if (!o[this.name].push) {\r\n                    o[this.name] = [o[this.name]];\r\n                }\r\n                o[this.name].push(this.value || '');\r\n            } else {\r\n                o[this.name] = this.value || '';\r\n            }\r\n        });\r\n        return o;\r\n    };\r\n\r\n\r\n    (function () {\r\n        $('.sp-builder_title').removeClass('sp-active');\r\n        if (localStorage) {\r\n            var builderName = localStorage.getItem('migrations_open_builder');\r\n            $('[data-builder=\"' + builderName + '\"]').addClass('sp-active');\r\n            migrationReset({builder_name: builderName});\r\n        }\r\n    })();\r\n\r\n    migrationMigrationRefresh(function () {\r\n        migrationEnableButtons(1);\r\n        migrationScrollList();\r\n    });\r\n\r\n    $('#migration-container').on('change', 'select[name=migration_filter]', function () {\r\n        migrationMigrationRefresh(function () {\r\n            migrationEnableButtons(1);\r\n            migrationScrollList();\r\n            $('#tab_cont_tab1').click();\r\n        });\r\n    });\r\n\r\n    $('#migration-container').on('keypress', 'input[name=migration_search]', function (e) {\r\n        if (e.keyCode === 13) {\r\n            migrationMigrationRefresh(function () {\r\n                migrationEnableButtons(1);\r\n                migrationScrollList();\r\n                $('#tab_cont_tab1').click();\r\n            });\r\n        }\r\n    });\r\n\r\n    $('#migration-container').on('click', '.sp-search', function () {\r\n        migrationMigrationRefresh(function () {\r\n            migrationEnableButtons(1);\r\n            migrationScrollList();\r\n            $('#tab_cont_tab1').click();\r\n        });\r\n    });\r\n\r\n    $('#migration-container').on('click', '.sp-optgroup-check', function (e) {\r\n        var checkboxes = $(this).closest('.sp-optgroup').find(':checkbox');\r\n        checkboxes.attr(\"checked\", !checkboxes.attr(\"checked\"));\r\n        e.preventDefault();\r\n    });\r\n\r\n    $('.sp-builder_body').on('submit', 'form', function (e) {\r\n        e.preventDefault();\r\n        var postData = $(this).serializeFormJSON();\r\n        migrationBuilder(postData);\r\n    });\r\n\r\n    $('.sp-builder_body').on('reset', 'form', function (e) {\r\n        e.preventDefault();\r\n        var postData = $(this).serializeFormJSON();\r\n        migrationReset(postData);\r\n    });\r\n\r\n    $('#migration-container').on('click', '.sp-builder_title', function () {\r\n\r\n        var builderName = $(this).data('builder');\r\n\r\n        $('.sp-builder_title').not(this).removeClass('sp-active');\r\n\r\n        $(this).addClass('sp-active');\r\n\r\n        if (localStorage) {\r\n            localStorage.setItem('migrations_open_builder', builderName);\r\n        }\r\n        migrationReset({builder_name: builderName});\r\n    });\r\n\r\n\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/admin/assets/script.js b/local/modules/sprint.migration/admin/assets/script.js
--- a/local/modules/sprint.migration/admin/assets/script.js	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/admin/assets/script.js	(date 1670844554000)
@@ -123,7 +123,8 @@
     }
 }
 
-function migrationMigrationRefresh(callbackAfterRefresh) {
+function migrationListRefresh(callbackAfterRefresh) {
+    $('#migration_actions').empty();
     migrationExecuteStep(
         $('select[name=migration_filter]').val(),
         {},
@@ -153,7 +154,7 @@
     });
 }
 
-function migrationScrollList() {
+function migrationListScroll() {
     var $el = $('#migration_migrations');
     $el.scrollTop($el.prop("scrollHeight"));
 }
@@ -187,33 +188,33 @@
         }
     })();
 
-    migrationMigrationRefresh(function () {
+    migrationListRefresh(function () {
         migrationEnableButtons(1);
-        migrationScrollList();
+        migrationListScroll();
     });
 
     $('#migration-container').on('change', 'select[name=migration_filter]', function () {
-        migrationMigrationRefresh(function () {
+        migrationListRefresh(function () {
             migrationEnableButtons(1);
-            migrationScrollList();
+            migrationListScroll();
             $('#tab_cont_tab1').click();
         });
     });
 
     $('#migration-container').on('keypress', 'input[name=migration_search]', function (e) {
         if (e.keyCode === 13) {
-            migrationMigrationRefresh(function () {
+            migrationListRefresh(function () {
                 migrationEnableButtons(1);
-                migrationScrollList();
+                migrationListScroll();
                 $('#tab_cont_tab1').click();
             });
         }
     });
 
     $('#migration-container').on('click', '.sp-search', function () {
-        migrationMigrationRefresh(function () {
+        migrationListRefresh(function () {
             migrationEnableButtons(1);
-            migrationScrollList();
+            migrationListScroll();
             $('#tab_cont_tab1').click();
         });
     });
Index: local/modules/sprint.migration/lib/exchange/iblockelementsimport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Exchange;\r\n\r\nuse Sprint\\Migration\\AbstractExchange;\r\nuse Sprint\\Migration\\Exceptions\\ExchangeException;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\nuse Sprint\\Migration\\Locale;\r\nuse XMLReader;\r\n\r\nclass IblockElementsImport extends AbstractExchange\r\n{\r\n    protected $converter;\r\n\r\n    /**\r\n     * @param callable $converter\r\n     *\r\n     * @throws ExchangeException\r\n     * @throws RestartException\r\n     */\r\n    public function execute(callable $converter)\r\n    {\r\n        $iblockExchange = $this->getHelperManager()->IblockExchange();\r\n\r\n        $this->converter = $converter;\r\n\r\n        $params = $this->exchangeEntity->getRestartParams();\r\n\r\n        if (!isset($params['total'])) {\r\n            $this->exchangeEntity->exitIf(\r\n                !is_file($this->file),\r\n                Locale::getMessage('ERR_EXCHANGE_FILE_NOT_FOUND')\r\n            );\r\n\r\n            $reader = new XMLReader();\r\n            $reader->open($this->getExchangeFile());\r\n            $params['total'] = 0;\r\n            $params['offset'] = 0;\r\n            $params['iblock_id'] = 0;\r\n            $exchangeVersion = 0;\r\n\r\n            while ($reader->read()) {\r\n                if ($this->isOpenTag($reader, 'items')) {\r\n                    $exchangeVersion = (int)$reader->getAttribute('exchangeVersion');\r\n                    $params['iblock_id'] = $iblockExchange->getIblockIdByUid(\r\n                        $reader->getAttribute('iblockUid')\r\n                    );\r\n                }\r\n                if ($this->isOpenTag($reader, 'item')) {\r\n                    $params['total']++;\r\n                }\r\n            }\r\n            $reader->close();\r\n\r\n            if (!$exchangeVersion || $exchangeVersion < self::EXCHANGE_VERSION) {\r\n                $this->exchangeEntity->exitWithMessage(\r\n                    Locale::getMessage('ERR_EXCHANGE_VERSION', ['#NAME#' => $this->getExchangeFile()])\r\n                );\r\n            }\r\n\r\n            $this->exchangeEntity->exitIfEmpty(\r\n                $params['iblock_id'],\r\n                Locale::getMessage('ERR_IB_NOT_FOUND', ['#IBLOCK#' => $params['iblock_id']])\r\n            );\r\n        }\r\n\r\n        $reader = new XMLReader();\r\n        $reader->open($this->getExchangeFile());\r\n        $index = 0;\r\n\r\n        while ($reader->read()) {\r\n            if ($this->isOpenTag($reader, 'item')) {\r\n                $collect = ($index >= $params['offset'] && $index < $params['offset'] + $this->getLimit());\r\n                $restart = ($index >= $params['offset'] + $this->getLimit());\r\n                $finish = ($index >= $params['total'] - 1);\r\n\r\n                if ($collect) {\r\n                    $this->collectItem($reader, $params['iblock_id']);\r\n                }\r\n\r\n                if ($finish || $restart) {\r\n                    $this->outProgress('', ($index + 1), $params['total']);\r\n                }\r\n\r\n                if ($restart) {\r\n                    $params['offset'] = $index;\r\n                    $this->exchangeEntity->setRestartParams($params);\r\n                    $this->restart();\r\n                }\r\n                $index++;\r\n            }\r\n        }\r\n\r\n        $reader->close();\r\n        unset($params['offset']);\r\n        unset($params['total']);\r\n        unset($params['iblock_id']);\r\n        $this->exchangeEntity->setRestartParams($params);\r\n    }\r\n\r\n    /**\r\n     * @param XMLReader $reader\r\n     * @param           $iblockId\r\n     */\r\n    protected function collectItem(XMLReader $reader, $iblockId)\r\n    {\r\n        $fields = [];\r\n        $props = [];\r\n\r\n        if ($this->isOpenTag($reader, 'item')) {\r\n            do {\r\n                $reader->read();\r\n\r\n                $field = $this->collectField($reader, 'field');\r\n                if ($field) {\r\n                    $fields[] = $field;\r\n                }\r\n\r\n                $prop = $this->collectField($reader, 'property');\r\n                if ($prop) {\r\n                    $props[] = $prop;\r\n                }\r\n            } while (!$this->isCloseTag($reader, 'item'));\r\n\r\n            $convertedItem = $this->convertItem(\r\n                [\r\n                    'iblock_id'  => $iblockId,\r\n                    'fields'     => $fields,\r\n                    'properties' => $props,\r\n                ]\r\n            );\r\n\r\n            if ($convertedItem) {\r\n                call_user_func($this->converter, $convertedItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $item\r\n     *\r\n     * @return array|bool\r\n     */\r\n    protected function convertItem($item)\r\n    {\r\n        if (empty($item['iblock_id'])) {\r\n            return false;\r\n        }\r\n\r\n        $convertedFields = [];\r\n        foreach ($item['fields'] as $field) {\r\n            $method = $this->getConvertFieldMethod($item['iblock_id'], $field['name']);\r\n            if (method_exists($this, $method)) {\r\n                $convertedFields[$field['name']] = $this->$method($item['iblock_id'], $field);\r\n            }\r\n        }\r\n\r\n        $convertedProperties = [];\r\n        foreach ($item['properties'] as $prop) {\r\n            $method = $this->getConvertPropertyMethod($item['iblock_id'], $prop['name']);\r\n            if (method_exists($this, $method)) {\r\n                $convertedProperties[$prop['name']] = $this->$method($item['iblock_id'], $prop);\r\n            }\r\n        }\r\n\r\n        return [\r\n            'iblock_id'  => $item['iblock_id'],\r\n            'fields'     => $convertedFields,\r\n            'properties' => $convertedProperties,\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param $code\r\n     *\r\n     * @return string\r\n     */\r\n    protected function getConvertFieldMethod($iblockId, $code)\r\n    {\r\n        if (in_array($code, ['PREVIEW_PICTURE', 'DETAIL_PICTURE'])) {\r\n            return 'convertFieldF';\r\n        } elseif ($code == 'IBLOCK_SECTION') {\r\n            return 'convertFieldIblockSection';\r\n        } else {\r\n            return 'convertFieldS';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param $field\r\n     *\r\n     * @return mixed\r\n     */\r\n    protected function convertFieldS($iblockId, $field)\r\n    {\r\n        return $this->makeFieldValue($field['value'][0]);\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param $field\r\n     *\r\n     * @throws HelperException\r\n     * @return array\r\n     */\r\n    protected function convertFieldIblockSection($iblockId, $field)\r\n    {\r\n        $iblockExchange = $this->getHelperManager()->IblockExchange();\r\n\r\n        $value = [];\r\n        foreach ($field['value'] as $val) {\r\n            $val['value'] = $iblockExchange->getSectionIdByUniqName(\r\n                $iblockId,\r\n                $val['value']\r\n            );\r\n            $value[] = $this->makeFieldValue($val);\r\n        }\r\n\r\n        return $value;\r\n    }\r\n\r\n    /**\r\n     * @param $iblockId\r\n     * @param $field\r\n     *\r\n     * @return array|bool|null\r\n     */\r\n    protected function convertFieldF($iblockId, $field)\r\n    {\r\n        return $this->makeFileValue($field['value'][0]);\r\n    }\r\n\r\n    protected function getConvertPropertyMethod($iblockId, $code)\r\n    {\r\n        $iblockExchange = $this->getHelperManager()->IblockExchange();\r\n        $type = $iblockExchange->getPropertyType($iblockId, $code);\r\n\r\n        if (in_array($type, ['L', 'F', 'G'])) {\r\n            return 'convertProperty' . ucfirst($type);\r\n        } else {\r\n            return 'convertPropertyS';\r\n        }\r\n    }\r\n\r\n    protected function convertPropertyS($iblockId, $prop)\r\n    {\r\n        $iblockExchange = $this->getHelperManager()->IblockExchange();\r\n        $isMultiple = $iblockExchange->isPropertyMultiple($iblockId, $prop['name']);\r\n        $res = [];\r\n        foreach ($prop['value'] as $val) {\r\n            $res[] = $this->makePropertyValue($val);\r\n        }\r\n\r\n        return ($isMultiple) ? $res : $res[0];\r\n    }\r\n\r\n    protected function convertPropertyG($iblockId, $prop)\r\n    {\r\n        $iblockExchange = $this->getHelperManager()->IblockExchange();\r\n        $isMultiple = $iblockExchange->isPropertyMultiple($iblockId, $prop['name']);\r\n        $linkIblockId = $iblockExchange->getPropertyLinkIblockId($iblockId, $prop['name']);\r\n\r\n        $res = [];\r\n        if ($linkIblockId) {\r\n            foreach ($prop['value'] as $val) {\r\n                $val['value'] = $iblockExchange->getSectionIdByUniqName(\r\n                    $linkIblockId,\r\n                    $val['value']\r\n                );\r\n                $res[] = $this->makePropertyValue($val);\r\n            }\r\n        }\r\n\r\n        return ($isMultiple) ? $res : $res[0];\r\n    }\r\n\r\n    protected function convertPropertyF($iblockId, $prop)\r\n    {\r\n        $iblockExchange = $this->getHelperManager()->IblockExchange();\r\n        $isMultiple = $iblockExchange->isPropertyMultiple($iblockId, $prop['name']);\r\n        $res = [];\r\n        foreach ($prop['value'] as $val) {\r\n            $res[] = $this->makeFileValue($val);\r\n        }\r\n        return ($isMultiple) ? $res : $res[0];\r\n    }\r\n\r\n    protected function convertPropertyL($iblockId, $prop)\r\n    {\r\n        $iblockExchange = $this->getHelperManager()->IblockExchange();\r\n        $isMultiple = $iblockExchange->isPropertyMultiple($iblockId, $prop['name']);\r\n        $res = [];\r\n        foreach ($prop['value'] as $val) {\r\n            $val['value'] = $iblockExchange->getPropertyEnumIdByXmlId(\r\n                $iblockId,\r\n                $prop['name'],\r\n                $val['value']\r\n            );\r\n\r\n            $res[] = $this->makePropertyValue($val);\r\n        }\r\n        return ($isMultiple) ? $res : $res[0];\r\n    }\r\n\r\n    protected function makeFieldValue($val)\r\n    {\r\n        return $val['value'];\r\n    }\r\n\r\n    protected function makePropertyValue($val)\r\n    {\r\n        $result = [\r\n            'VALUE' => $val['value'],\r\n        ];\r\n\r\n        if (!empty($val['description'])) {\r\n            $result['DESCRIPTION'] = $val['description'];\r\n        }\r\n\r\n        return $result;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/exchange/iblockelementsimport.php b/local/modules/sprint.migration/lib/exchange/iblockelementsimport.php
--- a/local/modules/sprint.migration/lib/exchange/iblockelementsimport.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/exchange/iblockelementsimport.php	(date 1670844554000)
@@ -3,8 +3,8 @@
 namespace Sprint\Migration\Exchange;
 
 use Sprint\Migration\AbstractExchange;
-use Sprint\Migration\Exceptions\ExchangeException;
 use Sprint\Migration\Exceptions\HelperException;
+use Sprint\Migration\Exceptions\MigrationException;
 use Sprint\Migration\Exceptions\RestartException;
 use Sprint\Migration\Locale;
 use XMLReader;
@@ -16,7 +16,7 @@
     /**
      * @param callable $converter
      *
-     * @throws ExchangeException
+     * @throws MigrationException
      * @throws RestartException
      */
     public function execute(callable $converter)
@@ -28,9 +28,9 @@
         $params = $this->exchangeEntity->getRestartParams();
 
         if (!isset($params['total'])) {
-            $this->exchangeEntity->exitIf(
+            $this->exitIf(
                 !is_file($this->file),
-                Locale::getMessage('ERR_EXCHANGE_FILE_NOT_FOUND')
+                Locale::getMessage('ERR_EXCHANGE_FILE_NOT_FOUND', ['#FILE#' => $this->file])
             );
 
             $reader = new XMLReader();
@@ -54,12 +54,12 @@
             $reader->close();
 
             if (!$exchangeVersion || $exchangeVersion < self::EXCHANGE_VERSION) {
-                $this->exchangeEntity->exitWithMessage(
+                $this->exitWithMessage(
                     Locale::getMessage('ERR_EXCHANGE_VERSION', ['#NAME#' => $this->getExchangeFile()])
                 );
             }
 
-            $this->exchangeEntity->exitIfEmpty(
+            $this->exitIfEmpty(
                 $params['iblock_id'],
                 Locale::getMessage('ERR_IB_NOT_FOUND', ['#IBLOCK#' => $params['iblock_id']])
             );
@@ -212,10 +212,7 @@
 
         $value = [];
         foreach ($field['value'] as $val) {
-            $val['value'] = $iblockExchange->getSectionIdByUniqName(
-                $iblockId,
-                $val['value']
-            );
+            $val['value'] = $iblockExchange->getSectionIdByUniqName($iblockId, $val['value']);
             $value[] = $this->makeFieldValue($val);
         }
 
@@ -238,7 +235,7 @@
         $iblockExchange = $this->getHelperManager()->IblockExchange();
         $type = $iblockExchange->getPropertyType($iblockId, $code);
 
-        if (in_array($type, ['L', 'F', 'G'])) {
+        if (in_array($type, ['L', 'F', 'G', 'E'])) {
             return 'convertProperty' . ucfirst($type);
         } else {
             return 'convertPropertyS';
@@ -266,17 +263,30 @@
         $res = [];
         if ($linkIblockId) {
             foreach ($prop['value'] as $val) {
-                $val['value'] = $iblockExchange->getSectionIdByUniqName(
-                    $linkIblockId,
-                    $val['value']
-                );
+                $val['value'] = $iblockExchange->getSectionIdByUniqName($linkIblockId, $val['value']);
+                $res[] = $this->makePropertyValue($val);
+            }
+        }
+
+        return ($isMultiple) ? $res : $res[0];
+    }
+
+    protected function convertPropertyE($iblockId, $prop)
+    {
+        $iblockExchange = $this->getHelperManager()->IblockExchange();
+        $isMultiple = $iblockExchange->isPropertyMultiple($iblockId, $prop['name']);
+        $linkIblockId = $iblockExchange->getPropertyLinkIblockId($iblockId, $prop['name']);
+
+        $res = [];
+        if ($linkIblockId) {
+            foreach ($prop['value'] as $val) {
+                $val['value'] = $iblockExchange->getElementIdByUniqName($linkIblockId, $val['value']);
                 $res[] = $this->makePropertyValue($val);
             }
         }
 
         return ($isMultiple) ? $res : $res[0];
     }
-
     protected function convertPropertyF($iblockId, $prop)
     {
         $iblockExchange = $this->getHelperManager()->IblockExchange();
Index: local/modules/sprint.migration/lib/exchange/iblockelementsexport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Exchange;\r\n\r\nuse Exception;\r\nuse Sprint\\Migration\\AbstractExchange;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\nuse XMLWriter;\r\n\r\nclass IblockElementsExport extends AbstractExchange\r\n{\r\n    protected $iblockId;\r\n    protected $exportFilter     = [];\r\n    protected $exportFields     = [];\r\n    protected $exportProperties = [];\r\n\r\n    /**\r\n     * @return array\r\n     */\r\n    public function getExportFilter()\r\n    {\r\n        return $this->exportFilter;\r\n    }\r\n\r\n    /**\r\n     * @param array $exportFilter\r\n     *\r\n     * @return IblockElementsExport\r\n     */\r\n    public function setExportFilter(array $exportFilter)\r\n    {\r\n        $this->exportFilter = $exportFilter;\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @return array\r\n     */\r\n    public function getExportFields()\r\n    {\r\n        return $this->exportFields;\r\n    }\r\n\r\n    /**\r\n     * @param array $exportFields\r\n     *\r\n     * @return IblockElementsExport\r\n     */\r\n    public function setExportFields(array $exportFields)\r\n    {\r\n        $this->exportFields = $exportFields;\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @return array\r\n     */\r\n    public function getExportProperties()\r\n    {\r\n        return $this->exportProperties;\r\n    }\r\n\r\n    /**\r\n     * @param array $exportProperties\r\n     *\r\n     * @return IblockElementsExport\r\n     */\r\n    public function setExportProperties(array $exportProperties)\r\n    {\r\n        $this->exportProperties = $exportProperties;\r\n        return $this;\r\n    }\r\n\r\n    public function getIblockId()\r\n    {\r\n        return $this->iblockId;\r\n    }\r\n\r\n    public function setIblockId($iblockId)\r\n    {\r\n        $this->iblockId = $iblockId;\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @throws RestartException\r\n     * @throws Exception\r\n     */\r\n    public function execute()\r\n    {\r\n        $iblockExchange = $this->getHelperManager()->IblockExchange();\r\n\r\n        $params = $this->exchangeEntity->getRestartParams();\r\n        if (!isset($params['total'])) {\r\n            $params['total'] = $iblockExchange->getElementsCount(\r\n                $this->getIblockId(),\r\n                $this->getExportFilter()\r\n            );\r\n            $params['offset'] = 0;\r\n\r\n            $this->createExchangeDir();\r\n\r\n            $iblockUid = $iblockExchange->getIblockUid(\r\n                $this->getIblockId()\r\n            );\r\n\r\n            $this->appendToExchangeFile('<?xml version=\"1.0\" encoding=\"UTF-8\"?>');\r\n            $this->appendToExchangeFile('<items iblockUid=\"' . $iblockUid . '\" exchangeVersion=\"' . self::EXCHANGE_VERSION . '\">');\r\n        }\r\n\r\n        if ($params['offset'] <= $params['total'] - 1) {\r\n            $items = $iblockExchange->getElementsEx(\r\n                $this->getIblockId(),\r\n                [\r\n                    'order'  => ['ID' => 'ASC'],\r\n                    'offset' => $params['offset'],\r\n                    'limit'  => $this->getLimit(),\r\n                    'filter' => $this->getExportFilter(),\r\n                ]\r\n            );\r\n\r\n            foreach ($items as $item) {\r\n                $writer = new XMLWriter();\r\n                $writer->openMemory();\r\n                $writer->startElement('item');\r\n\r\n                foreach ($item['FIELDS'] as $code => $val) {\r\n                    if (in_array($code, $this->getExportFields())) {\r\n                        $method = $this->getWriteFieldMethod($code);\r\n                        if (method_exists($this, $method)) {\r\n                            $writer->startElement('field');\r\n                            $writer->writeAttribute('name', $code);\r\n                            $this->$method($writer, $val);\r\n                            $writer->endElement();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                foreach ($item['PROPS'] as $prop) {\r\n                    if (in_array($prop['CODE'], $this->getExportProperties())) {\r\n                        $method = $this->getWritePropertyMethod($prop);\r\n                        if (method_exists($this, $method)) {\r\n                            $writer->startElement('property');\r\n                            $writer->writeAttribute('name', $prop['CODE']);\r\n                            $this->$method($writer, $prop);\r\n                            $writer->endElement();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                $writer->endElement();\r\n                $this->appendToExchangeFile($writer->flush());\r\n                $params['offset']++;\r\n            }\r\n\r\n            $this->outProgress('', $params['offset'], $params['total']);\r\n\r\n            $this->exchangeEntity->setRestartParams($params);\r\n            $this->restart();\r\n        }\r\n\r\n        $this->appendToExchangeFile('</items>');\r\n        unset($params['total']);\r\n        unset($params['offset']);\r\n        $this->exchangeEntity->setRestartParams($params);\r\n    }\r\n\r\n    protected function getWriteFieldMethod($code)\r\n    {\r\n        if (in_array($code, ['PREVIEW_PICTURE', 'DETAIL_PICTURE'])) {\r\n            return 'writeFieldF';\r\n        } elseif ($code == 'IBLOCK_SECTION') {\r\n            return 'writeFieldSection';\r\n        } else {\r\n            return 'writeFieldS';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param XMLWriter $writer\r\n     * @param           $val\r\n     *\r\n     * @throws Exception\r\n     */\r\n    protected function writeFieldF(XMLWriter $writer, $val)\r\n    {\r\n        $this->writeFile($writer, $val);\r\n    }\r\n\r\n    protected function writeFieldSection(XMLWriter $writer, $val)\r\n    {\r\n        $iblockExchange = $this->getHelperManager()->IblockExchange();\r\n\r\n        $val = $iblockExchange->getSectionUniqNamesByIds(\r\n            $this->getIblockId(),\r\n            $val\r\n        );\r\n        $this->writeValue($writer, $val);\r\n    }\r\n\r\n    protected function writeFieldS(XMLWriter $writer, $val)\r\n    {\r\n        $this->writeValue($writer, $val);\r\n    }\r\n\r\n    protected function getWritePropertyMethod($prop)\r\n    {\r\n        $type = $prop['PROPERTY_TYPE'];\r\n\r\n        if (in_array($type, ['L', 'F', 'G'])) {\r\n            return 'writeProperty' . ucfirst($type);\r\n        } else {\r\n            return 'writePropertyS';\r\n        }\r\n    }\r\n\r\n    protected function writePropertyS(XMLWriter $writer, $prop)\r\n    {\r\n        if ($prop['MULTIPLE'] == 'Y') {\r\n            foreach ($prop['VALUE'] as $index => $val1) {\r\n                $attributes = [];\r\n                if (!empty($prop['DESCRIPTION'][$index])) {\r\n                    $attributes = ['description' => $prop['DESCRIPTION'][$index]];\r\n                }\r\n                $this->writeSingleValue($writer, $val1, $attributes);\r\n            }\r\n        } else {\r\n            $attributes = [];\r\n            if (!empty($prop['DESCRIPTION'])) {\r\n                $attributes = ['description' => $prop['DESCRIPTION']];\r\n            }\r\n            $this->writeSingleValue($writer, $prop['VALUE'], $attributes);\r\n        }\r\n    }\r\n\r\n    protected function writePropertyG(XMLWriter $writer, $prop)\r\n    {\r\n        $iblockExchange = $this->getHelperManager()->IblockExchange();\r\n\r\n        $prop['VALUE'] = is_array($prop['VALUE']) ? $prop['VALUE'] : [$prop['VALUE']];\r\n        $prop['VALUE'] = $iblockExchange->getSectionUniqNamesByIds(\r\n            $prop['LINK_IBLOCK_ID'],\r\n            $prop['VALUE']\r\n        );\r\n        $this->writeValue($writer, $prop['VALUE']);\r\n    }\r\n\r\n    protected function writePropertyL(XMLWriter $writer, $prop)\r\n    {\r\n        $this->writeValue($writer, $prop['VALUE_XML_ID']);\r\n    }\r\n\r\n    /**\r\n     * @param XMLWriter $writer\r\n     * @param           $prop\r\n     *\r\n     * @throws Exception\r\n     */\r\n    protected function writePropertyF(XMLWriter $writer, $prop)\r\n    {\r\n        $this->writeFile($writer, $prop['VALUE']);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/exchange/iblockelementsexport.php b/local/modules/sprint.migration/lib/exchange/iblockelementsexport.php
--- a/local/modules/sprint.migration/lib/exchange/iblockelementsexport.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/exchange/iblockelementsexport.php	(date 1670844554000)
@@ -10,9 +10,19 @@
 class IblockElementsExport extends AbstractExchange
 {
     protected $iblockId;
+    protected $updateMode;
     protected $exportFilter     = [];
     protected $exportFields     = [];
     protected $exportProperties = [];
+    const UPDATE_MODE_NOT    = 'not';
+    const UPDATE_MODE_CODE   = 'code';
+    const UPDATE_MODE_XML_ID = 'xml_id';
+
+    public function setUpdateMode(string $updateMode)
+    {
+        $this->updateMode = $updateMode;
+        return $this;
+    }
 
     /**
      * @return array
@@ -187,17 +197,6 @@
         $this->writeFile($writer, $val);
     }
 
-    protected function writeFieldSection(XMLWriter $writer, $val)
-    {
-        $iblockExchange = $this->getHelperManager()->IblockExchange();
-
-        $val = $iblockExchange->getSectionUniqNamesByIds(
-            $this->getIblockId(),
-            $val
-        );
-        $this->writeValue($writer, $val);
-    }
-
     protected function writeFieldS(XMLWriter $writer, $val)
     {
         $this->writeValue($writer, $val);
@@ -207,7 +206,7 @@
     {
         $type = $prop['PROPERTY_TYPE'];
 
-        if (in_array($type, ['L', 'F', 'G'])) {
+        if (in_array($type, ['L', 'F', 'G', 'E'])) {
             return 'writeProperty' . ucfirst($type);
         } else {
             return 'writePropertyS';
@@ -233,16 +232,54 @@
         }
     }
 
+    protected function writeFieldSection(XMLWriter $writer, $val)
+    {
+        $iblockExchange = $this->getHelperManager()->IblockExchange();
+
+        $val = array_filter(is_array($val) ? $val : [$val]);
+
+        foreach ($val as $sectionId) {
+            $uniqName = $iblockExchange->getSectionUniqNameById(
+                $this->getIblockId(),
+                $sectionId
+            );
+            if (!empty($uniqName)) {
+                $this->writeValue($writer, $uniqName);
+            }
+        }
+    }
+
     protected function writePropertyG(XMLWriter $writer, $prop)
     {
         $iblockExchange = $this->getHelperManager()->IblockExchange();
+        $prop['VALUE'] = array_filter(is_array($prop['VALUE']) ? $prop['VALUE'] : [$prop['VALUE']]);
 
-        $prop['VALUE'] = is_array($prop['VALUE']) ? $prop['VALUE'] : [$prop['VALUE']];
-        $prop['VALUE'] = $iblockExchange->getSectionUniqNamesByIds(
-            $prop['LINK_IBLOCK_ID'],
-            $prop['VALUE']
-        );
-        $this->writeValue($writer, $prop['VALUE']);
+        foreach ($prop['VALUE'] as $sectionId) {
+            $uniqName = $iblockExchange->getSectionUniqNameById(
+                $prop['LINK_IBLOCK_ID'],
+                $sectionId
+            );
+            if (!empty($uniqName)) {
+                $this->writeValue($writer, $uniqName);
+            }
+        }
+    }
+
+    protected function writePropertyE(XMLWriter $writer, $prop)
+    {
+        $iblockExchange = $this->getHelperManager()->IblockExchange();
+
+        $prop['VALUE'] = array_filter(is_array($prop['VALUE']) ? $prop['VALUE'] : [$prop['VALUE']]);
+
+        foreach ($prop['VALUE'] as $elementId) {
+            $uniqName = $iblockExchange->getElementUniqNameById(
+                $prop['LINK_IBLOCK_ID'],
+                $elementId
+            );
+            if (!empty($uniqName)) {
+                $this->writeValue($writer, $uniqName);
+            }
+        }
     }
 
     protected function writePropertyL(XMLWriter $writer, $prop)
Index: local/modules/sprint.migration/lib/exchange/hlblockelementsimport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Exchange;\r\n\r\nuse Sprint\\Migration\\AbstractExchange;\r\nuse Sprint\\Migration\\Exceptions\\ExchangeException;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\nuse Sprint\\Migration\\Locale;\r\nuse XMLReader;\r\n\r\nclass HlblockElementsImport extends AbstractExchange\r\n{\r\n    protected $converter;\r\n\r\n    /**\r\n     * @param callable $converter\r\n     *\r\n     * @throws ExchangeException\r\n     * @throws RestartException\r\n     * @throws HelperException\r\n     */\r\n    public function execute(callable $converter)\r\n    {\r\n        $hblockExchange = $this->getHelperManager()->HlblockExchange();\r\n\r\n        $this->converter = $converter;\r\n        $params = $this->exchangeEntity->getRestartParams();\r\n\r\n        if (!isset($params['total'])) {\r\n            $this->exchangeEntity->exitIf(\r\n                !is_file($this->file),\r\n                Locale::getMessage('ERR_EXCHANGE_FILE_NOT_FOUND')\r\n            );\r\n\r\n            $reader = new XMLReader();\r\n            $reader->open($this->getExchangeFile());\r\n            $params['total'] = 0;\r\n            $params['offset'] = 0;\r\n            $params['hlblock_id'] = 0;\r\n            $exchangeVersion = 0;\r\n            while ($reader->read()) {\r\n                if ($this->isOpenTag($reader, 'items')) {\r\n                    $exchangeVersion = (int)$reader->getAttribute('exchangeVersion');\r\n                    $params['hlblock_id'] = $hblockExchange->getHlblockIdByUid(\r\n                        $reader->getAttribute('hlblockUid')\r\n                    );\r\n                }\r\n                if ($this->isOpenTag($reader, 'item')) {\r\n                    $params['total']++;\r\n                }\r\n            }\r\n            $reader->close();\r\n\r\n            if (!$exchangeVersion || $exchangeVersion < self::EXCHANGE_VERSION) {\r\n                $this->exchangeEntity->exitWithMessage(\r\n                    Locale::getMessage('ERR_EXCHANGE_VERSION', ['#NAME#' => $this->getExchangeFile()])\r\n                );\r\n            }\r\n\r\n            $this->exchangeEntity->exitIfEmpty(\r\n                $params['hlblock_id'],\r\n                Locale::getMessage('ERR_HLBLOCK_NOT_FOUND', ['#HLBLOCK#' => $params['hlblock_id']])\r\n            );\r\n        }\r\n\r\n        $reader = new XMLReader();\r\n        $reader->open($this->getExchangeFile());\r\n        $index = 0;\r\n\r\n        while ($reader->read()) {\r\n            if ($this->isOpenTag($reader, 'item')) {\r\n                $collect = ($index >= $params['offset'] && $index < $params['offset'] + $this->getLimit());\r\n                $restart = ($index >= $params['offset'] + $this->getLimit());\r\n                $finish = ($index >= $params['total'] - 1);\r\n\r\n                if ($collect) {\r\n                    $this->collectItem($reader, $params['hlblock_id']);\r\n                }\r\n\r\n                if ($finish || $restart) {\r\n                    $this->outProgress('', ($index + 1), $params['total']);\r\n                }\r\n\r\n                if ($restart) {\r\n                    $params['offset'] = $index;\r\n                    $this->exchangeEntity->setRestartParams($params);\r\n                    $this->restart();\r\n                }\r\n                $index++;\r\n            }\r\n        }\r\n\r\n        $reader->close();\r\n        unset($params['offset']);\r\n        unset($params['total']);\r\n        unset($params['hlblock_id']);\r\n        $this->exchangeEntity->setRestartParams($params);\r\n    }\r\n\r\n    /**\r\n     * @param XMLReader $reader\r\n     * @param           $hlblockId\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function collectItem(XMLReader $reader, $hlblockId)\r\n    {\r\n        $fields = [];\r\n        if ($this->isOpenTag($reader, 'item')) {\r\n            do {\r\n                $reader->read();\r\n\r\n                $field = $this->collectField($reader, 'field');\r\n                if ($field) {\r\n                    $fields[] = $field;\r\n                }\r\n            } while (!$this->isCloseTag($reader, 'item'));\r\n\r\n            $convertedItem = $this->convertItem(\r\n                [\r\n                    'hlblock_id' => $hlblockId,\r\n                    'fields'     => $fields,\r\n                ]\r\n            );\r\n\r\n            if ($convertedItem) {\r\n                call_user_func($this->converter, $convertedItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $item\r\n     *\r\n     * @throws HelperException\r\n     * @return array|bool\r\n     */\r\n    protected function convertItem($item)\r\n    {\r\n        if (empty($item['hlblock_id'])) {\r\n            return false;\r\n        }\r\n        if (empty($item['fields'])) {\r\n            return false;\r\n        }\r\n\r\n        $convertedFields = [];\r\n        foreach ($item['fields'] as $field) {\r\n            $method = $this->getConvertFieldMethod($item['hlblock_id'], $field['name']);\r\n            if (method_exists($this, $method)) {\r\n                $convertedFields[$field['name']] = $this->$method($item['hlblock_id'], $field);\r\n            }\r\n        }\r\n\r\n        if (empty($convertedFields)) {\r\n            return false;\r\n        }\r\n\r\n        return [\r\n            'hlblock_id' => $item['hlblock_id'],\r\n            'fields'     => $convertedFields,\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockId\r\n     * @param $fieldName\r\n     *\r\n     * @throws HelperException\r\n     * @return string\r\n     */\r\n    protected function getConvertFieldMethod($hlblockId, $fieldName)\r\n    {\r\n        $hblockExchange = $this->getHelperManager()->HlblockExchange();\r\n        $type = $hblockExchange->getFieldType($hlblockId, $fieldName);\r\n\r\n        if (in_array($type, ['enumeration', 'file'])) {\r\n            return 'convertField' . ucfirst($type);\r\n        } else {\r\n            return 'convertFieldString';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockId\r\n     * @param $field\r\n     *\r\n     * @throws HelperException\r\n     * @return array\r\n     */\r\n    protected function convertFieldString($hlblockId, $field)\r\n    {\r\n        $hblockExchange = $this->getHelperManager()->HlblockExchange();\r\n        if ($hblockExchange->isFieldMultiple($hlblockId, $field['name'])) {\r\n            $res = [];\r\n            foreach ($field['value'] as $val) {\r\n                $res[] = $val['value'];\r\n            }\r\n            return $res;\r\n        } else {\r\n            return $field['value'][0]['value'];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockId\r\n     * @param $field\r\n     *\r\n     * @throws HelperException\r\n     * @return array|bool|null\r\n     */\r\n    protected function convertFieldFile($hlblockId, $field)\r\n    {\r\n        $hblockExchange = $this->getHelperManager()->HlblockExchange();\r\n        if ($hblockExchange->isFieldMultiple($hlblockId, $field['name'])) {\r\n            $res = [];\r\n            foreach ($field['value'] as $val) {\r\n                $res[] = $this->makeFileValue($val);\r\n            }\r\n            return $res;\r\n        } else {\r\n            return $this->makeFileValue($field['value'][0]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $hlblockId\r\n     * @param $field\r\n     *\r\n     * @throws HelperException\r\n     * @return array\r\n     */\r\n    protected function convertFieldEnumeration($hlblockId, $field)\r\n    {\r\n        $hblockExchange = $this->getHelperManager()->HlblockExchange();\r\n        if ($hblockExchange->isFieldMultiple($hlblockId, $field['name'])) {\r\n            $res = [];\r\n            foreach ($field['value'] as $val) {\r\n                $res[] = $hblockExchange->getFieldEnumIdByXmlId(\r\n                    $hlblockId,\r\n                    $field['name'],\r\n                    $val['value']\r\n                );\r\n            }\r\n            return $res;\r\n        } else {\r\n            return $hblockExchange->getFieldEnumIdByXmlId(\r\n                $hlblockId,\r\n                $field['name'],\r\n                $field['value'][0]['value']\r\n            );\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/exchange/hlblockelementsimport.php b/local/modules/sprint.migration/lib/exchange/hlblockelementsimport.php
--- a/local/modules/sprint.migration/lib/exchange/hlblockelementsimport.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/exchange/hlblockelementsimport.php	(date 1670844554000)
@@ -3,7 +3,7 @@
 namespace Sprint\Migration\Exchange;
 
 use Sprint\Migration\AbstractExchange;
-use Sprint\Migration\Exceptions\ExchangeException;
+use Sprint\Migration\Exceptions\MigrationException;
 use Sprint\Migration\Exceptions\HelperException;
 use Sprint\Migration\Exceptions\RestartException;
 use Sprint\Migration\Locale;
@@ -16,7 +16,7 @@
     /**
      * @param callable $converter
      *
-     * @throws ExchangeException
+     * @throws MigrationException
      * @throws RestartException
      * @throws HelperException
      */
@@ -28,9 +28,9 @@
         $params = $this->exchangeEntity->getRestartParams();
 
         if (!isset($params['total'])) {
-            $this->exchangeEntity->exitIf(
+            $this->exitIf(
                 !is_file($this->file),
-                Locale::getMessage('ERR_EXCHANGE_FILE_NOT_FOUND')
+                Locale::getMessage('ERR_EXCHANGE_FILE_NOT_FOUND', ['#FILE#' => $this->file])
             );
 
             $reader = new XMLReader();
@@ -53,12 +53,12 @@
             $reader->close();
 
             if (!$exchangeVersion || $exchangeVersion < self::EXCHANGE_VERSION) {
-                $this->exchangeEntity->exitWithMessage(
+                $this->exitWithMessage(
                     Locale::getMessage('ERR_EXCHANGE_VERSION', ['#NAME#' => $this->getExchangeFile()])
                 );
             }
 
-            $this->exchangeEntity->exitIfEmpty(
+            $this->exitIfEmpty(
                 $params['hlblock_id'],
                 Locale::getMessage('ERR_HLBLOCK_NOT_FOUND', ['#HLBLOCK#' => $params['hlblock_id']])
             );
Index: local/modules/sprint.migration/admin/steps/migration_settag.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse Sprint\\Migration\\VersionConfig;\r\nuse Sprint\\Migration\\VersionManager;\r\n\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) {\r\n    die();\r\n}\r\n\r\n$existsEvents = (\r\n($_POST[\"step_code\"] == \"migration_settag\")\r\n);\r\n\r\nif ($existsEvents && check_bitrix_sessid('send_sessid')) {\r\n\r\n    /** @var $versionConfig VersionConfig */\r\n    $versionManager = new VersionManager($versionConfig);\r\n\r\n    $version = !empty($_POST['version']) ? $_POST['version'] : '';\r\n    $settag = !empty($_POST['settag']) ? $_POST['settag'] : '';\r\n\r\n    $settagresult = $versionManager->setMigrationTag($version, $settag);\r\n    Sprint\\Migration\\Out::outMessages($settagresult);\r\n    ?>\r\n    <script>\r\n        migrationMigrationRefresh(function () {\r\n            migrationScrollList();\r\n            migrationEnableButtons(1);\r\n        });\r\n    </script><?php\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/admin/steps/migration_settag.php b/local/modules/sprint.migration/admin/steps/migration_settag.php
--- a/local/modules/sprint.migration/admin/steps/migration_settag.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/admin/steps/migration_settag.php	(date 1670844554000)
@@ -23,8 +23,8 @@
     Sprint\Migration\Out::outMessages($settagresult);
     ?>
     <script>
-        migrationMigrationRefresh(function () {
-            migrationScrollList();
+        migrationListRefresh(function () {
+            migrationListScroll();
             migrationEnableButtons(1);
         });
     </script><?php
Index: local/modules/sprint.migration/lib/exchange/hlblockelementsexport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Exchange;\r\n\r\nuse Exception;\r\nuse Sprint\\Migration\\AbstractExchange;\r\nuse Sprint\\Migration\\Exceptions\\HelperException;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\nuse XMLWriter;\r\n\r\nclass HlblockElementsExport extends AbstractExchange\r\n{\r\n    protected $hlblockId;\r\n    protected $exportFields = [];\r\n\r\n    public function setHlblockId($hlblockId)\r\n    {\r\n        $this->hlblockId = $hlblockId;\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @throws RestartException\r\n     * @throws HelperException\r\n     * @throws Exception\r\n     */\r\n    public function execute()\r\n    {\r\n        $hblockExchange = $this->getHelperManager()->HlblockExchange();\r\n\r\n        $params = $this->exchangeEntity->getRestartParams();\r\n        if (!isset($params['total'])) {\r\n            $params['total'] = $hblockExchange->getElementsCount($this->hlblockId);\r\n            $params['offset'] = 0;\r\n\r\n            $this->createExchangeDir();\r\n\r\n            $hlblockUid = $hblockExchange->getHlblockUid($this->hlblockId);\r\n\r\n            $this->appendToExchangeFile('<?xml version=\"1.0\" encoding=\"UTF-8\"?>');\r\n            $this->appendToExchangeFile('<items hlblockUid=\"' . $hlblockUid . '\" exchangeVersion=\"' . self::EXCHANGE_VERSION . '\">');\r\n        }\r\n\r\n        if ($params['offset'] <= $params['total'] - 1) {\r\n            $items = $hblockExchange->getElements(\r\n                $this->hlblockId,\r\n                [\r\n                    'order'  => ['ID' => 'ASC'],\r\n                    'offset' => $params['offset'],\r\n                    'limit'  => $this->getLimit(),\r\n                ]\r\n            );\r\n\r\n            foreach ($items as $item) {\r\n                $writer = new XMLWriter();\r\n                $writer->openMemory();\r\n                $writer->startElement('item');\r\n\r\n                foreach ($item as $code => $val) {\r\n                    if (in_array($code, $this->getExportFields())) {\r\n                        $method = $this->getWriteFieldMethod($code);\r\n                        if (method_exists($this, $method)) {\r\n                            $writer->startElement('field');\r\n                            $writer->writeAttribute('name', $code);\r\n                            $this->$method(\r\n                                $writer, [\r\n                                    'FIELD_NAME' => $code,\r\n                                    'VALUE'      => $val,\r\n                                ]\r\n                            );\r\n                            $writer->endElement();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                $writer->endElement();\r\n                $this->appendToExchangeFile($writer->flush());\r\n                $params['offset']++;\r\n            }\r\n\r\n            $this->outProgress('', $params['offset'], $params['total']);\r\n\r\n            $this->exchangeEntity->setRestartParams($params);\r\n            $this->restart();\r\n        }\r\n\r\n        $this->appendToExchangeFile('</items>');\r\n        unset($params['total']);\r\n        unset($params['offset']);\r\n        $this->exchangeEntity->setRestartParams($params);\r\n    }\r\n\r\n    /**\r\n     * @param $code\r\n     *\r\n     * @throws HelperException\r\n     * @return string\r\n     */\r\n    protected function getWriteFieldMethod($code)\r\n    {\r\n        $hblockExchange = $this->getHelperManager()->HlblockExchange();\r\n\r\n        $type = $hblockExchange->getFieldType($this->hlblockId, $code);\r\n\r\n        if (in_array($type, ['enumeration', 'file'])) {\r\n            return 'writeField' . ucfirst($type);\r\n        } else {\r\n            return 'writeFieldString';\r\n        }\r\n    }\r\n\r\n    protected function writeFieldString(XMLWriter $writer, $field)\r\n    {\r\n        $this->writeValue($writer, $field['VALUE']);\r\n    }\r\n\r\n    /**\r\n     * @param XMLWriter $writer\r\n     * @param           $field\r\n     *\r\n     * @throws Exception\r\n     */\r\n    protected function writeFieldFile(XMLWriter $writer, $field)\r\n    {\r\n        $this->writeFile($writer, $field['VALUE']);\r\n    }\r\n\r\n    /**\r\n     * @param XMLWriter $writer\r\n     * @param           $field\r\n     *\r\n     * @throws HelperException\r\n     */\r\n    protected function writeFieldEnumeration(XMLWriter $writer, $field)\r\n    {\r\n        $hblockExchange = $this->getHelperManager()->HlblockExchange();\r\n\r\n        $idValues = is_array($field['VALUE']) ? $field['VALUE'] : [$field['VALUE']];\r\n        $xmlValues = [];\r\n        foreach ($idValues as $id) {\r\n            $xmlId = $hblockExchange->getFieldEnumXmlIdById(\r\n                $this->hlblockId,\r\n                $field['FIELD_NAME'],\r\n                $id\r\n            );\r\n            if ($xmlId) {\r\n                $xmlValues[] = $xmlId;\r\n            }\r\n        }\r\n\r\n        $this->writeValue($writer, $xmlValues);\r\n    }\r\n\r\n    /**\r\n     * @param array $exportFields\r\n     *\r\n     * @return $this\r\n     */\r\n    public function setExportFields(array $exportFields)\r\n    {\r\n        $this->exportFields = $exportFields;\r\n        return $this;\r\n    }\r\n\r\n    protected function getExportFields()\r\n    {\r\n        return $this->exportFields;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/exchange/hlblockelementsexport.php b/local/modules/sprint.migration/lib/exchange/hlblockelementsexport.php
--- a/local/modules/sprint.migration/lib/exchange/hlblockelementsexport.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/exchange/hlblockelementsexport.php	(date 1670844554000)
@@ -11,13 +11,22 @@
 class HlblockElementsExport extends AbstractExchange
 {
     protected $hlblockId;
+    protected $updateMode;
     protected $exportFields = [];
+    const UPDATE_MODE_NOT    = 'not';
+    const UPDATE_MODE_XML_ID = 'xml_id';
 
     public function setHlblockId($hlblockId)
     {
         $this->hlblockId = $hlblockId;
         return $this;
     }
+
+    public function setUpdateMode(string $updateMode)
+    {
+        $this->updateMode = $updateMode;
+        return $this;
+    }
 
     /**
      * @throws RestartException
Index: local/modules/sprint.migration/lib/exchange/medialibelementsimport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Exchange;\r\n\r\nuse Sprint\\Migration\\AbstractExchange;\r\nuse Sprint\\Migration\\Exceptions\\ExchangeException;\r\nuse Sprint\\Migration\\Exceptions\\RestartException;\r\nuse Sprint\\Migration\\Locale;\r\nuse XMLReader;\r\n\r\nclass MedialibElementsImport extends AbstractExchange\r\n{\r\n    protected $converter;\r\n\r\n    /**\r\n     * @param callable $converter\r\n     *\r\n     * @throws ExchangeException\r\n     * @throws RestartException\r\n     */\r\n    public function execute(callable $converter)\r\n    {\r\n        $this->converter = $converter;\r\n        $params = $this->exchangeEntity->getRestartParams();\r\n\r\n        if (!isset($params['total'])) {\r\n            $this->exchangeEntity->exitIf(\r\n                !is_file($this->file),\r\n                Locale::getMessage('ERR_EXCHANGE_FILE_NOT_FOUND')\r\n            );\r\n\r\n            $reader = new XMLReader();\r\n            $reader->open($this->getExchangeFile());\r\n            $params['total'] = 0;\r\n            $params['offset'] = 0;\r\n            $exchangeVersion = 0;\r\n            while ($reader->read()) {\r\n                if ($this->isOpenTag($reader, 'items')) {\r\n                    $exchangeVersion = (int)$reader->getAttribute('exchangeVersion');\r\n                }\r\n                if ($this->isOpenTag($reader, 'item')) {\r\n                    $params['total']++;\r\n                }\r\n            }\r\n            $reader->close();\r\n\r\n            if (!$exchangeVersion || $exchangeVersion < self::EXCHANGE_VERSION) {\r\n                $this->exchangeEntity->exitWithMessage(\r\n                    Locale::getMessage('ERR_EXCHANGE_VERSION', ['#NAME#' => $this->getExchangeFile()])\r\n                );\r\n            }\r\n        }\r\n\r\n        $reader = new XMLReader();\r\n        $reader->open($this->getExchangeFile());\r\n        $index = 0;\r\n\r\n        while ($reader->read()) {\r\n            if ($this->isOpenTag($reader, 'item')) {\r\n                $collect = ($index >= $params['offset'] && $index < $params['offset'] + $this->getLimit());\r\n                $restart = ($index >= $params['offset'] + $this->getLimit());\r\n                $finish = ($index >= $params['total'] - 1);\r\n\r\n                if ($collect) {\r\n                    $this->collectItem($reader);\r\n                }\r\n\r\n                if ($finish || $restart) {\r\n                    $this->outProgress('', ($index + 1), $params['total']);\r\n                }\r\n\r\n                if ($restart) {\r\n                    $params['offset'] = $index;\r\n                    $this->exchangeEntity->setRestartParams($params);\r\n                    $this->restart();\r\n                }\r\n                $index++;\r\n            }\r\n        }\r\n\r\n        $reader->close();\r\n        unset($params['offset']);\r\n        unset($params['total']);\r\n        $this->exchangeEntity->setRestartParams($params);\r\n    }\r\n\r\n    /**\r\n     * @param XMLReader $reader\r\n     *\r\n     */\r\n    protected function collectItem(XMLReader $reader)\r\n    {\r\n        $fields = [];\r\n        if ($this->isOpenTag($reader, 'item')) {\r\n            do {\r\n                $reader->read();\r\n                $field = $this->collectField($reader, 'field');\r\n                if ($field) {\r\n                    $fields[] = $field;\r\n                }\r\n            } while (!$this->isCloseTag($reader, 'item'));\r\n\r\n            $convertedItem = $this->convertItem($fields);\r\n            if ($convertedItem) {\r\n                call_user_func($this->converter, $convertedItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param $fields\r\n     *\r\n     * @return array|bool\r\n     */\r\n    protected function convertItem($fields)\r\n    {\r\n        if (empty($fields)) {\r\n            return false;\r\n        }\r\n\r\n        $convertedFields = [];\r\n        foreach ($fields as $field) {\r\n            if ($field['name'] == 'FILE') {\r\n                $convertedFields['FILE'] = $this->convertFieldFile($field);\r\n            } elseif ($field['name'] == 'COLLECTION_PATH') {\r\n                $convertedFields['COLLECTION_ID'] = $this->convertFieldCollectionPath($field);\r\n            } else {\r\n                $convertedFields[$field['name']] = $this->convertFieldString($field);\r\n            }\r\n        }\r\n\r\n        if (empty($convertedFields)) {\r\n            return false;\r\n        }\r\n\r\n        if (empty($convertedFields['FILE'])) {\r\n            return false;\r\n        }\r\n\r\n        return $convertedFields;\r\n    }\r\n\r\n    protected function convertFieldFile($field)\r\n    {\r\n        return $this->makeFileValue($field['value'][0]);\r\n    }\r\n\r\n    protected function convertFieldString($field)\r\n    {\r\n        return $field['value'][0]['value'];\r\n    }\r\n\r\n    protected function convertFieldCollectionPath($field)\r\n    {\r\n        $medialibExchange = $this->getHelperManager()->MedialibExchange();\r\n        $paths = array_column($field['value'], 'value');\r\n        return $medialibExchange->saveCollectionByPath($medialibExchange::TYPE_IMAGE, $paths);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/exchange/medialibelementsimport.php b/local/modules/sprint.migration/lib/exchange/medialibelementsimport.php
--- a/local/modules/sprint.migration/lib/exchange/medialibelementsimport.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/exchange/medialibelementsimport.php	(date 1670844554000)
@@ -3,7 +3,7 @@
 namespace Sprint\Migration\Exchange;
 
 use Sprint\Migration\AbstractExchange;
-use Sprint\Migration\Exceptions\ExchangeException;
+use Sprint\Migration\Exceptions\MigrationException;
 use Sprint\Migration\Exceptions\RestartException;
 use Sprint\Migration\Locale;
 use XMLReader;
@@ -15,7 +15,7 @@
     /**
      * @param callable $converter
      *
-     * @throws ExchangeException
+     * @throws MigrationException
      * @throws RestartException
      */
     public function execute(callable $converter)
@@ -24,9 +24,9 @@
         $params = $this->exchangeEntity->getRestartParams();
 
         if (!isset($params['total'])) {
-            $this->exchangeEntity->exitIf(
+            $this->exitIf(
                 !is_file($this->file),
-                Locale::getMessage('ERR_EXCHANGE_FILE_NOT_FOUND')
+                Locale::getMessage('ERR_EXCHANGE_FILE_NOT_FOUND', ['#FILE#' => $this->file])
             );
 
             $reader = new XMLReader();
@@ -45,7 +45,7 @@
             $reader->close();
 
             if (!$exchangeVersion || $exchangeVersion < self::EXCHANGE_VERSION) {
-                $this->exchangeEntity->exitWithMessage(
+                $this->exitWithMessage(
                     Locale::getMessage('ERR_EXCHANGE_VERSION', ['#NAME#' => $this->getExchangeFile()])
                 );
             }
Index: local/modules/sprint.migration/lib/exceptions/exchangeexception.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration\\Exceptions;\r\n\r\nuse Exception;\r\n\r\nclass ExchangeException extends Exception\r\n{\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/lib/exceptions/exchangeexception.php b/local/modules/sprint.migration/lib/exceptions/exchangeexception.php
--- a/local/modules/sprint.migration/lib/exceptions/exchangeexception.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/lib/exceptions/exchangeexception.php	(date 1670844554000)
@@ -1,11 +1,3 @@
 <?php
 
-namespace Sprint\Migration\Exceptions;
-
-use Exception;
-
-class ExchangeException extends Exception
-{
-
-
-}
\ No newline at end of file
+//deleted
Index: local/modules/sprint.migration/locale/en.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once __DIR__ . \"/../lib/locale.php\";\r\n\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\",\r\n    [\r\n        \"MODULE_NAME\"              => \"Migrations for developers\",\r\n        \"MODULE_DESCRIPTION\"       => \"Module for managing migration, creating, installing, rolling back migration\",\r\n        \"PARTNER_NAME\"             => \"Andrey Ryabin\",\r\n        \"PARTNER_URI\"              => \"https://packagist.org/packages/andreyryabin/sprint.migration\",\r\n        \"ACCESS_DENIED\"            => \"Access denied\",\r\n        \"MENU_SPRINT\"              => \"Migrations for developers\",\r\n        \"MENU_SCHEMAS\"             => \"Data schemas\",\r\n        \"TITLE\"                    => \"Migrations\",\r\n        \"FORM_DESCR\"               => \"Description\",\r\n        \"FORM_PREFIX\"              => \"Name prefix\",\r\n        \"LIST_EMPTY\"               => \"empty\",\r\n        \"UP\"                       => \"Install\",\r\n        \"DOWN\"                     => \"Rollback\",\r\n        \"UP_START\"                 => \"Install all\",\r\n        \"UP_START_WITH_TAG\"        => \"Install all with tag\",\r\n        \"DOWN_START\"               => \"Rollback all\",\r\n        \"DELETE_UNKNOWN\"           => \"Delete all unknown\",\r\n        \"VIEW_FILE\"                => \"View file\",\r\n        \"TRANSFER_TO\"              => \"Transfer to\",\r\n        \"TOGGLE_LIST\"              => \"All\",\r\n        \"TOGGLE_NEW\"               => \"New\",\r\n        \"TOGGLE_STATUS\"            => \"Summary\",\r\n        \"TOGGLE_INSTALLED\"         => \"Installed\",\r\n        \"TOGGLE_MODIFIED\"          => \"Modified\",\r\n        \"TOGGLE_OLDER\"             => \"Not supported\",\r\n        \"TOGGLE_TAG\"               => \"Tag\",\r\n        \"LINK_MP\"                  => \"Marketplace\",\r\n        \"LINK_DOC\"                 => \"Documentation\",\r\n        \"LINK_ARTICLES\"            => \"Articles\",\r\n        \"LINK_COMPOSER\"            => \"Composer\",\r\n        \"LINK_TASKS\"               => \"Tasks\",\r\n        \"LINK_TELEGRAM\"            => \"Telegram\",\r\n        \"LINK_IMPROVE_TRANSLATION\" => \"Improve translation to english, create pull request with this file\",\r\n        \"NEW\"                      => \"New migrations\",\r\n        \"INSTALLED\"                => \"Installed\",\r\n        \"UNKNOWN\"                  => \"Unknown\",\r\n        \"VERSION_NEW\"              => \"New\",\r\n        \"VERSION_INSTALLED\"        => \"Installed\",\r\n        \"DESC_NEW\"                 => \"(file only)\",\r\n        \"DESC_INSTALLED\"           => \"(file + database record)\",\r\n        \"DESC_UNKNOWN\"             => \"(database record)\",\r\n        \"META_NEW\"                 => \"New\",\r\n        \"META_INSTALLED\"           => \"Installed\",\r\n        \"META_UNKNOWN\"             => \"Unknown\",\r\n        \"CREATED_SUCCESS\"          => \"Migration #VERSION# created\",\r\n        \"SEARCH\"                   => \"Search\",\r\n        \"ADMIN_INTERFACE_HIDDEN\"   => \"Admin interface hidden\",\r\n        \"CONFIG_LIST\"              => \"Configuration list\",\r\n        \"COMMAND_RUN\"              => \"Command execution\",\r\n        \"COMMAND_HELP\"             => \"Help\",\r\n        \"COMMAND_CONFIG\"           => \"View configuration\",\r\n        \"CURRENT_USER\"             => \"Current user\",\r\n        \"BITRIX_VERSION\"           => \"Bitrix version\",\r\n        \"MODULE_VERSION\"           => \"Module version\",\r\n        \"CFG_TITLE\"                => \"Migrations\",\r\n        \"SCH_TITLE\"                => \"Data schemas\",\r\n        \"CONFIG\"                   => \"Configuration\",\r\n        \"BUILDER_ERROR\"            => \"Error\",\r\n        \"BUILDER_NEXT\"             => \"Next\",\r\n        \"BUILDER_RESET\"            => \"Reset\",\r\n        \"SELECT_ALL\"               => \"Select all\",\r\n        \"SELECT_ONE\"               => \"Select one\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\",\r\n    [\r\n        \"CONFIG_archive\"                     => \"Archive\",\r\n        \"CONFIG_migration_dir\"               => \"Directory for migration\",\r\n        \"CONFIG_migration_extend_class\"      => \"Class to inherit by migrations\",\r\n        \"CONFIG_migration_table\"             => \"Table in the database with migrations\",\r\n        \"CONFIG_version_prefix\"              => \"Name prefix for migrations\",\r\n        \"CONFIG_version_builders\"            => \"Builders\",\r\n        \"CONFIG_version_filter\"              => \"Migrations filter\",\r\n        \"CONFIG_stop_on_errors\"              => \"Stop error migrations\",\r\n        \"CONFIG_show_admin_interface\"        => \"Show admin interface\",\r\n        \"CONFIG_console_user\"                => \"User who run migrations from console\",\r\n        \"CONFIG_console_auth_events_disable\" => \"Disable auth events in console\",\r\n        \"CONFIG_config_file\"                 => \"Config file\",\r\n        \"CONFIG_title\"                       => \"Config name\",\r\n        \"CONFIG_version_schemas\"             => \"Data schemas\",\r\n        \"CONFIG_yes\"                         => \"yes\",\r\n        \"CONFIG_no\"                          => \"no\",\r\n        \"CONFIG_version_name_template\"       => \"Version name template\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\",\r\n    [\r\n        \"BUILDER_Transfer1\"                  => \"Transfer migrations\",\r\n        \"BUILDER_TransferTo\"                 => \"Transfer в другую конфигурацию\",\r\n        \"BUILDER_TransferAll\"                => \"All\",\r\n        \"BUILDER_TransferNew\"                => \"New\",\r\n        \"BUILDER_TransferInstalled\"          => \"Installed\",\r\n        \"BUILDER_TransferUnknown\"            => \"Unknown\",\r\n        \"BUILDER_TransferSelect\"             => \"Select migrations\",\r\n        \"BUILDER_EventExport1\"               => \"Create migration for event types\",\r\n        \"BUILDER_EventExport_event_types\"    => \"Select event types\",\r\n        \"BUILDER_AgentExport1\"               => \"Create migration for agents\",\r\n        \"BUILDER_AgentExport_agent_id\"       => \"Select agents\",\r\n        \"BUILDER_Version1\"                   => \"Create empty migration\",\r\n        \"BUILDER_UserGroupExport1\"           => \"Create migration for user groups\",\r\n        \"BUILDER_UserGroupExport_user_group\" => \"Select user groups\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\",\r\n    [\r\n        \"BUILDER_IblockExport1\"                        => \"Create migration for information block\",\r\n        \"BUILDER_IblockExport_IblockId\"                => \"Select information block\",\r\n        \"BUILDER_IblockExport_Properties\"              => \"Select properties\",\r\n        \"BUILDER_IblockExport_What\"                    => \"Select export items\",\r\n        \"BUILDER_IblockExport_WhatIblock\"              => \"Information block\",\r\n        \"BUILDER_IblockExport_WhatIblockType\"          => \"Information block type\",\r\n        \"BUILDER_IblockExport_WhatIblockFields\"        => \"Information block fields\",\r\n        \"BUILDER_IblockExport_WhatIblockProperties\"    => \"Information block properties\",\r\n        \"BUILDER_IblockExport_WhatIblockUserOptions\"   => \"User options for form and list\",\r\n        \"BUILDER_IblockExport_WhatIblockPermissions\"   => \"Information block permissions\",\r\n        \"BUILDER_IblockElementsExport1\"                => \"Export information block elements\",\r\n        \"BUILDER_IblockElementsExport2\"                => \"Export elements with fields and properties\\nExport images, files and lists\",\r\n        \"BUILDER_IblockElementsExport_IblockId\"        => \"Select information block\",\r\n        \"BUILDER_IblockElementsExport_Properties\"      => \"Select properties\",\r\n        \"BUILDER_IblockElementsExport_Fields\"          => \"Select fields\",\r\n        \"BUILDER_IblockElementsExport_Filter\"          => \"Select elements\",\r\n        \"BUILDER_IblockElementsExport_SelectSomeId\"    => \"Enter elements ID\",\r\n        \"BUILDER_IblockElementsExport_FilterListId\"    => \"Enter elements ID by comma\",\r\n        \"BUILDER_IblockElementsExport_SelectSomeXmlId\" => \"Enter elements XML_ID\",\r\n        \"BUILDER_IblockElementsExport_FilterListXmlId\" => \"Enter elements XML_ID by comma\",\r\n        \"BUILDER_IblockElementsExport_UpdateMode\"      => \"Export settings\",\r\n        \"BUILDER_IblockElementsExport_SelectAll\"       => \"Select all\",\r\n        \"BUILDER_IblockElementsExport_SelectNone\"      => \"Select none\",\r\n        \"BUILDER_IblockElementsExport_SelectSome\"      => \"Select some\",\r\n        \"BUILDER_IblockElementsExport_NotUpdate\"       => \"Only add elements\",\r\n        \"BUILDER_IblockElementsExport_UpdateByCode\"    => \"Update existing elements by CODE\",\r\n        \"BUILDER_IblockElementsExport_UpdateByXmlId\"   => \"Update existing elements by XML_ID\",\r\n        \"BUILDER_IblockCategoryExport1\"                => \"Export information block categories\",\r\n        \"BUILDER_IblockCategoryExport2\"                => \"Export information block categories without images\",\r\n        \"BUILDER_IblockCategoryExport_IblockId\"        => \"Select information block\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\",\r\n    [\r\n        \"BUILDER_HlblockElementsExport1\"          => \"Export highload block elements\",\r\n        \"BUILDER_HlblockElementsExport2\"          => \"Export highload block elements\\nExport images, files and lists\",\r\n        \"BUILDER_HlblockElementsExport_HlblockId\" => \"Select highload block\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\",\r\n    [\r\n        \"BUILDER_UserOptionsExport_Title\"         => \"Create migration for user options\",\r\n        \"BUILDER_UserOptionsExport_What\"          => \"Select export items\",\r\n        \"BUILDER_UserOptionsExport_WhatUserForm\"  => \"User form\",\r\n        \"BUILDER_UserOptionsExport_WhatUserList\"  => \"User list\",\r\n        \"BUILDER_UserOptionsExport_WhatGroupList\" => \"User group list\",\r\n        \"BUILDER_HlblockExport1\"                  => \"Create migration for highload block\",\r\n        \"BUILDER_HlblockExport_HlblockId\"         => \"Select highload blocks\",\r\n        \"BUILDER_UserTypeEntities1\"               => \"Create migration for user type entities\",\r\n        \"BUILDER_UserTypeEntities_EntityId\"       => \"Select entity id\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\",\r\n    [\r\n        \"BUILDER_FormExport1\"              => \"Create migration for web form\",\r\n        \"BUILDER_FormExport_FormId\"        => \"Select web form\",\r\n        \"BUILDER_FormExport_What\"          => \"Select export items\",\r\n        \"BUILDER_FormExport_Form\"          => \"Form\",\r\n        \"BUILDER_FormExport_Fields\"        => \"Form questionsn\",\r\n        \"BUILDER_FormExport_Statuses\"      => \"Form statuses\",\r\n        \"BUILDER_OptionExport1\"            => \"Create migration for module options\",\r\n        \"BUILDER_OptionExport_module_id\"   => \"Select modules\",\r\n        \"BUILDER_CacheCleaner1\"            => \"Cache clean\",\r\n        \"BUILDER_CacheCleaner2\"            => \"Execute BXClearCache(true)\",\r\n        \"BUILDER_Configurator\"             => \"Create configuration\",\r\n        \"BUILDER_Archive\"                  => \"Create archive configuration\",\r\n        \"BUILDER_Configurator_config_name\" => \"Name\",\r\n        \"BUILDER_Configurator_error\"       => \"Error creating configuration\",\r\n        \"BUILDER_Configurator_success\"     => \"Configuration created\",\r\n        \"BUILDER_Cleaner\"                  => \"Delete configuration\",\r\n        \"BUILDER_Cleaner_desc\"             => \"Delete configuration file, migration files and migration records\",\r\n        \"BUILDER_Cleaner_config_name\"      => \"Name\",\r\n        \"BUILDER_Cleaner_error\"            => \"Error deleting configuration\",\r\n        \"BUILDER_Cleaner_success\"          => \"Configuration deleted\",\r\n        \"BUILDER_SchemaImport\"             => \"Install data schema\",\r\n        \"BUILDER_SchemaExport\"             => \"Create data schema\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\", [\r\n        \"BUILDER_MedialibElements1\"             => \"Export media library images\",\r\n        \"BUILDER_MedialibElements_CollectionId\" => \"Select collections\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\",\r\n    [\r\n        \"GOTO_MIGRATION\"         => \"Admin interface\",\r\n        \"GOTO_OPTIONS\"           => \"Settings\",\r\n        \"OPTIONS_REMOVE\"         => \"Reset module options\",\r\n        \"OPTIONS_REMOVE_success\" => \"Options reset\",\r\n        \"MARK\"                   => \"Mark migration\",\r\n        \"MARK_FIELD1\"            => \"Select migration\",\r\n        \"MARK_FIELD2\"            => \"Marks as\",\r\n        \"MARK_VERSION\"           => \"Name|installed|new|unknown\",\r\n        \"MARK_AS_NEW\"            => \"new\",\r\n        \"MARK_AS_INSTALLED\"      => \"installed\",\r\n        \"MARK_SUCCESS1\"          => \"Migration #VERSION# mark as new\",\r\n        \"MARK_SUCCESS2\"          => \"Migration #VERSION# mark as installed\",\r\n        \"MARK_SUCCESS3\"          => \"Migration #VERSION# deleted\",\r\n        \"MARK_ERROR1\"            => \"Migration #VERSION# already new\",\r\n        \"MARK_ERROR2\"            => \"Migration #VERSION# already installed\",\r\n        \"MARK_ERROR3\"            => \"Migration #VERSION# not changed\",\r\n        \"MARK_ERROR4\"            => \"No migrations for change found\",\r\n        \"MARK_NEW_AS_INSTALLED\"  => \"Mark as installed\",\r\n        \"MARK_INSTALLED_AS_NEW\"  => \"Mark as new\",\r\n        \"MARK_UNKNOWN_AS_NEW\"    => \"Delete\",\r\n        \"DELETE\"                 => \"Delete\",\r\n        \"DELETE_OK\"              => \"Migration #VERSION# deleted\",\r\n        \"DELETE_ERROR1\"          => \"Migrations for delete not found\",\r\n        \"DELETE_ERROR2\"          => \"Migration #VERSION# not found\",\r\n        \"TRANSFER_OK\"            => \"Migration #VERSION# transfer\",\r\n        \"TRANSFER_OK_CNT\"        => \"Transfer migrations: #CNT#\",\r\n        \"TRANSFER_ERROR1\"        => \"Migrations for transfer not found\",\r\n        \"TRANSFER_ERROR2\"        => \"Migration is already in this configuration\",\r\n        \"CREATE\"                 => \"Create migration\",\r\n        \"VERSION_NOT_FOUND\"      => \"Migration not found\",\r\n        \"RIGHT_D\"                => \"Access deny\",\r\n        \"RIGHT_W\"                => \"Full access\",\r\n        \"MODIFIED_SCHEMA\"        => \"Data schema was modified after install\",\r\n        \"MODIFIED_VERSION\"       => \"Migration file was modified after install\",\r\n        \"MODIFIED_LABEL\"         => \"M\",\r\n        \"OLDER_VERSION\"          => \"Migration file created in a later version of the module #V1#\\nPerhaps it uses features that are not implemented in the current version #V2#\",\r\n        \"OLDER_LABEL\"            => \"!\",\r\n        \"TAG\"                    => \"Migration tag\",\r\n        \"SETTAG\"                 => \"Set tag\",\r\n        \"SETTAG_OK\"              => \"Tag for migration #VERSION# setting\",\r\n        \"SETTAG_ERROR1\"          => \"Migrations for setting tag not found\",\r\n        \"SETTAG_ERROR2\"          => \"Migration #VERSION# not found\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\",\r\n    [\r\n        \"SCHEMA_DIFF\"                  => \"Show difference\",\r\n        \"SCHEMA_IMPORT\"                => \"Install data schema\",\r\n        \"SCHEMA_EXPORT\"                => \"Create data schema\",\r\n        \"SCHEMA_AGENT\"                 => \"Data schema agents\",\r\n        \"SCHEMA_AGENT_DESC\"            => \"Agents: #COUNT#\",\r\n        \"SCHEMA_EVENT\"                 => \"Data schema event types\",\r\n        \"SCHEMA_EVENT_DESC\"            => \"Event types: #COUNT#\",\r\n        \"SCHEMA_EVENT_MESSAGES_DESC\"   => \"Event messages: #COUNT#\",\r\n        \"SCHEMA_USER_GROUP\"            => \"Data schema user groups\",\r\n        \"SCHEMA_USER_GROUP_DESC\"       => \"User groups: #COUNT#\",\r\n        \"SCHEMA_HLBLOCK\"               => \"Data schema highload blocks\",\r\n        \"SCHEMA_HLBLOCK_DESC\"          => \"Highload blocks: #COUNT#\",\r\n        \"SCHEMA_HLBLOCK_FIELDS_DESC\"   => \"Highload blocks fields: #COUNT#\",\r\n        \"SCHEMA_IBLOCK\"                => \"Data schema information blocks\",\r\n        \"SCHEMA_IBLOCK_TYPE_DESC\"      => \"Information blocks types: #COUNT#\",\r\n        \"SCHEMA_IBLOCK_DESC\"           => \"Information blocks: #COUNT#\",\r\n        \"SCHEMA_IBLOCK_PROPS_DESC\"     => \"Information blocks properties: #COUNT#\",\r\n        \"SCHEMA_IBLOCK_FORMS_DESC\"     => \"Information blocks user options: #COUNT#\",\r\n        \"SCHEMA_OPTION\"                => \"Data schema module options\",\r\n        \"SCHEMA_OPTION_DESC\"           => \"Module options: #COUNT#\",\r\n        \"SCHEMA_USER_TYPE_ENTITY\"      => \"Data schema user type entities\",\r\n        \"SCHEMA_USER_TYPE_ENTITY_DESC\" => \"User type entities: #COUNT#\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\",\r\n    [\r\n        \"ERR_BUILDER_NOT_FOUND\"             => \"Builder not found\",\r\n        \"ERR_CANT_CREATE_DIRECTORY\"         => \"Cant create directory #NAME#\",\r\n        \"ERR_MSSQL_NOT_SUPPORTED\"           => \"MSSQL not supported\",\r\n        \"ERR_JSON_NOT_SUPPORTED\"            => \"Install php-ext json\",\r\n        \"ERR_PHP_NOT_SUPPORTED\"             => \"\\\"#NAME#\\\" not supported\",\r\n        \"ERR_EXCHANGE_DISABLED\"             => \"Exchange disabled, install required bitrix modules\",\r\n        \"ERR_EXCHANGE_DISABLED_XML\"         => \"Exchange disabled, install php-ext XMLReader and XMLWriter\",\r\n        \"ERR_CLASS_NOT_FOUND\"               => \"Class \\\"#NAME#\\\" not found\",\r\n        \"ERR_MIGRATION_FAIL\"                => \"Migration fail\",\r\n        \"ERR_SOME_MIGRATIONS_FAILS\"         => \"Some migrations fails\",\r\n        \"ERR_VERSION_NOT_FOUND\"             => \"Migration not found\",\r\n        \"ERR_INVALID_ARGUMENTS\"             => \"Invalid arguments, see help\",\r\n        \"ERR_COMMAND_NOT_FOUND\"             => \"Command \\\"#NAME#\\\" not found, смотрите помощь\",\r\n        \"ERR_METHOD_NOT_FOUND\"              => \"Method \\\"#NAME#\\\"  not found\",\r\n        \"ERR_CANT_CREATE_FILE\"              => \"Cant create file \\\"#NAME#\\\"\",\r\n        \"ERR_FORM_NOT_FOUND\"                => \"Form \\\"#NAME#\\\" not found\",\r\n        \"ERR_EMPTY_REQ_FIELD\"               => \"Required field \\\"#NAME#\\\" is empty\",\r\n        \"ERR_HELPER_DISABLED\"               => \"Helper class \\\"#NAME#\\\" disabled\",\r\n        \"ERR_AGENT_NOT_ADDED\"               => \"Agent \\\"#NAME#\\\" not created\",\r\n        \"ERR_EVENT_TYPE_NOT_UPDATED\"        => \"Event type not updated\",\r\n        \"ERR_CANT_DELETE_FORM\"              => \"Error deleting form \\\"#NAME#\\\"\",\r\n        \"ERR_CANT_DELETE_EVENT_TYPE\"        => \"Error deleting event type \\\"#NAME#\\\"\",\r\n        \"ERR_CANT_DELETE_EVENT_MESSAGE\"     => \"Error deleting event message \\\"#NAME#\\\"\",\r\n        \"ERR_EVENT_TYPE_NOT_ADDED\"          => \"Event type \\\"#NAME#\\\" not created\",\r\n        \"ERR_EVENT_MESSAGE_NOT_ADDED\"       => \"Event message \\\"#NAME#\\\" not created\",\r\n        \"ERR_HLBLOCK_NOT_FOUND\"             => \"Highload block \\\"#HLBLOCK#\\\" not found\",\r\n        \"ERR_HLBLOCK_FIELD_NOT_FOUND\"       => \"Highload block field not found\",\r\n        \"ERR_DEFAULT_LANGUAGE_NOT_FOUND\"    => \"Default language not found\",\r\n        \"ERR_ACTIVE_LANGUAGES_NOT_FOUND\"    => \"Active languages not found\",\r\n        \"ERR_DEFAULT_SITE_NOT_FOUND\"        => \"Default site not found\",\r\n        \"ERR_ACTIVE_SITES_NOT_FOUND\"        => \"Active sites not found\",\r\n        \"ERR_USER_GROUP_CODE_NOT_FOUND\"     => \"User group code not found\",\r\n        \"ERR_SET_FIELDS_FOR_UPDATE_GROUP\"   => \"Set user group fields for update\",\r\n        \"ERR_USERTYPE_NOT_ADDED\"            => \"User type entity \\\"#NAME#\\\" not created\",\r\n        \"ERR_USERTYPE_NOT_UPDATED\"          => \"User type entity \\\"#NAME#\\\" not updated\",\r\n        \"ERR_USERTYPE_NOT_DELETED\"          => \"User type entity \\\"#NAME#\\\" not deleted\",\r\n        \"ERR_USERTYPE_EXPORT\"               => \"Error exporting user type \\\"#USER_TYPE_ID#\\\":\",\r\n        \"ERR_IB_PROPERTY_CODE_NOT_FOUND\"    => \"Information block property code not found\",\r\n        \"ERR_IB_CODE_NOT_FOUND\"             => \"Information block \\\"#IBLOCK_ID#\\\" code not found\",\r\n        \"ERR_TYPE_OF_IB_NOT_FOUND\"          => \"Type of information block not found for \\\"#IBLOCK_ID#\\\"\",\r\n        \"ERR_IB_SECTION_NAME_NOT_FOUND\"     => \"Section name not found\",\r\n        \"ERR_IB_NOT_FOUND\"                  => \"Information block \\\"#IBLOCK#\\\" not found\",\r\n        \"ERR_IB_TYPE_NOT_FOUND\"             => \"Information block type \\\"#IBLOCK_TYPE_ID#\\\" not found\",\r\n        \"ERR_CANT_DELETE_IBLOCK\"            => \"Error deleting information block \\\"#NAME#\\\"\",\r\n        \"ERR_CANT_DELETE_IBLOCK_TYPE\"       => \"Error deleting information block type \\\"#NAME#\\\"\",\r\n        \"ERR_IB_FORM_OPTIONS_NOT_FOUND\"     => \"Information block form options not found\",\r\n        \"ERR_SCHEMA_EMPTY\"                  => \"Data schema \\\"#NAME#\\\" empty\",\r\n        \"ERR_SCHEMA_CREATED\"                => \"Data schema \\\"#NAME#\\\" saved\",\r\n        \"ERR_EXCHANGE_FILE_NOT_FOUND\"       => \"Exchange file not found\",\r\n        \"ERR_EXCHANGE_VERSION\"              => \"Exchange file \\\"#NAME#\\\" not supported in this version of module.\\nPlease recreate it\",\r\n        \"ERR_IB_SECTION_ID_EMPTY\"           => \"Section in iblock \\\"#IBLOCK_ID#\\\" empty\",\r\n        \"ERR_IB_SECTION_ID_NOT_FOUND\"       => \"Section \\\"#SECTION_ID#\\\" in iblock \\\"#IBLOCK_ID#\\\" not found\",\r\n        \"ERR_IB_SECTION_ON_LEVEL_NOT_FOUND\" => \"Section \\\"#SECTION_NAME#\\\" on level \\\"#DEPTH_LEVEL#\\\" not found\",\r\n        \"ERR_SAVE_COLLECTION_BY_PATH\"       => \"Collection by path \\\"#PATH#\\\" not created\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\",\r\n    [\r\n        \"AGENT_CREATED\"            => \"Agent \\\"#NAME#\\\" created\",\r\n        \"AGENT_UPDATED\"            => \"Agent \\\"#NAME#\\\" updated\",\r\n        \"AGENT_EQUAL\"              => \"Agent \\\"#NAME#\\\" equivalent\",\r\n        \"AGENT_DELETED\"            => \"Agent \\\"#NAME#\\\" deleted\",\r\n        \"EVENT_MESSAGE_CREATED\"    => \"Event message \\\"#NAME#\\\" created\",\r\n        \"EVENT_MESSAGE_UPDATED\"    => \"Event message \\\"#NAME#\\\" updated\",\r\n        \"EVENT_MESSAGE_EQUAL\"      => \"Event message \\\"#NAME#\\\" equivalent\",\r\n        \"EVENT_MESSAGE_DELETED\"    => \"Event message \\\"#NAME#\\\" deleted\",\r\n        \"EVENT_TYPE_CREATED\"       => \"Event type \\\"#NAME#\\\" created\",\r\n        \"EVENT_TYPE_UPDATED\"       => \"Event type \\\"#NAME#\\\" updated\",\r\n        \"EVENT_TYPE_EQUAL\"         => \"Event type \\\"#NAME#\\\" equivalent\",\r\n        \"EVENT_TYPE_DELETED\"       => \"Event type \\\"#NAME#\\\" deleted\",\r\n        \"HLBLOCK_CREATED\"          => \"Highload block \\\"#NAME#\\\" created\",\r\n        \"HLBLOCK_UPDATED\"          => \"Highload block \\\"#NAME#\\\" updated\",\r\n        \"HLBLOCK_EQUAL\"            => \"Highload block \\\"#NAME#\\\" equivalent\",\r\n        \"HLBLOCK_DELETED\"          => \"Highload block \\\"#NAME#\\\" deleted\",\r\n        \"OPTION_CREATED\"           => \"Option \\\"#NAME#\\\" created\",\r\n        \"OPTION_UPDATED\"           => \"Option \\\"#NAME#\\\" updated\",\r\n        \"OPTION_EQUAL\"             => \"Option \\\"#NAME#\\\" equivalent\",\r\n        \"USER_GROUP_CREATED\"       => \"User group \\\"#NAME#\\\" created\",\r\n        \"USER_GROUP_UPDATED\"       => \"User group \\\"#NAME#\\\" updated\",\r\n        \"USER_GROUP_EQUAL\"         => \"User group \\\"#NAME#\\\" equivalent\",\r\n        \"USER_GROUP_DELETED\"       => \"User group \\\"#NAME#\\\" deleted\",\r\n        \"USER_OPTION_LIST_CREATED\" => \"User option list \\\"#NAME#\\\" saved\",\r\n        \"USER_OPTION_LIST_EQUAL\"   => \"User option list \\\"#NAME#\\\" equivalent\",\r\n        \"USER_OPTION_GRID_CREATED\" => \"User option grid \\\"#NAME#\\\" saved\",\r\n        \"USER_OPTION_GRID_EQUAL\"   => \"User option grid \\\"#NAME#\\\" equivalent\",\r\n        \"USER_OPTION_FORM_CREATED\" => \"User option form \\\"#NAME#\\\" saved\",\r\n        \"USER_OPTION_FORM_EQUAL\"   => \"User option form \\\"#NAME#\\\" equivalent\",\r\n        \"USER_TYPE_ENTITY_CREATED\" => \"User type entity \\\"#NAME#\\\" created\",\r\n        \"USER_TYPE_ENTITY_UPDATED\" => \"User type entity \\\"#NAME#\\\" updated\",\r\n        \"USER_TYPE_ENTITY_EQUAL\"   => \"User type entity \\\"#NAME#\\\" equivalent\",\r\n        \"USER_TYPE_ENTITY_DELETED\" => \"User type entity \\\"#NAME#\\\" deleted\",\r\n        \"IB_PROPERTY_CREATED\"      => \"Information block \\\"#IBLOCK_ID#\\\": property \\\"#NAME#\\\" created\",\r\n        \"IB_PROPERTY_UPDATED\"      => \"Information block \\\"#IBLOCK_ID#\\\": property \\\"#NAME#\\\" updated\",\r\n        \"IB_PROPERTY_EQUAL\"        => \"Information block \\\"#IBLOCK_ID#\\\": property \\\"#NAME#\\\" equivalent\",\r\n        \"IB_PROPERTY_DELETED\"      => \"Information block \\\"#IBLOCK_ID#\\\": property \\\"#NAME#\\\" deleted\",\r\n        \"IB_CREATED\"               => \"Information block \\\"#NAME#\\\" created\",\r\n        \"IB_UPDATED\"               => \"Information block \\\"#NAME#\\\" updated\",\r\n        \"IB_EQUAL\"                 => \"Information block \\\"#NAME#\\\" equivalent\",\r\n        \"IB_DELETED\"               => \"Information block \\\"#NAME#\\\" deleted\",\r\n        \"IB_FIELDS_CREATED\"        => \"Information block \\\"#NAME#\\\": fields created\",\r\n        \"IB_FIELDS_UPDATED\"        => \"Information block \\\"#NAME#\\\": fields updated\",\r\n        \"IB_FIELDS_EQUAL\"          => \"Information block \\\"#NAME#\\\": fields equivalent\",\r\n        \"IB_TYPE_CREATED\"          => \"Information block type \\\"#NAME#\\\" created\",\r\n        \"IB_TYPE_UPDATED\"          => \"Information block type \\\"#NAME#\\\" updated\",\r\n        \"IB_TYPE_EQUAL\"            => \"Information block type \\\"#NAME#\\\" equivalent\",\r\n        \"IB_TYPE_DELETED\"          => \"Information block type \\\"#NAME#\\\" deleted\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\",\r\n    [\r\n        \"GD_INSTALL\"          => \"Install gadgets: \\\"Migration summary\\\"\",\r\n        \"GD_INSTALL_success\"  => \"Gadgets installed\",\r\n        \"GD_SELECT_CONFIGS\"   => \"Configs\",\r\n        \"GD_CHECK_SCHEMAS\"    => \"Check data schemas\",\r\n        \"GD_INFO_NAME\"        => \"Migration summary\",\r\n        \"GD_INFO_DESC\"        => \"Migration summary\",\r\n        \"GD_TYPE\"             => \"Type\",\r\n        \"GD_STATE\"            => \"State\",\r\n        \"GD_SHOW\"             => \"Show\",\r\n        \"GD_SHOW_SCHEMAS\"     => \"Show data schemas\",\r\n        \"GD_SHOW_MIGRATIONS\"  => \"Show migrations\",\r\n        \"GD_MIGRATIONS\"       => \"Migrations\",\r\n        \"GD_MIGRATIONS_RED\"   => \"Some migrations not installed\",\r\n        \"GD_MIGRATIONS_GREEN\" => \"All migrations installed\",\r\n        \"GD_SCHEMAS\"          => \"Data schemas\",\r\n        \"GD_SCHEMA_RED\"       => \"Not installed\",\r\n        \"GD_SCHEMA_GREEN\"     => \"Installed\",\r\n    ]\r\n);\r\n\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"en\",\r\n    [\r\n        \"BUILDER_GROUP_Main\"     => \"Main module\",\r\n        \"BUILDER_GROUP_Iblock\"   => \"Information blocks\",\r\n        \"BUILDER_GROUP_Hlblock\"  => \"Highload information blocks\",\r\n        \"BUILDER_GROUP_Form\"     => \"Web Forms\",\r\n        \"BUILDER_GROUP_Medialib\" => \"Media Library\",\r\n        \"BUILDER_GROUP_Tools\"    => \"Tools\",\r\n    ]\r\n);\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/locale/en.php b/local/modules/sprint.migration/locale/en.php
--- a/local/modules/sprint.migration/locale/en.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/locale/en.php	(date 1670844554000)
@@ -67,6 +67,7 @@
         "BUILDER_RESET"            => "Reset",
         "SELECT_ALL"               => "Select all",
         "SELECT_ONE"               => "Select one",
+        "RESTART_AGAIN"            => "Restart again",
     ]
 );
 \Sprint\Migration\Locale::loadLocale(
@@ -74,12 +75,13 @@
     [
         "CONFIG_archive"                     => "Archive",
         "CONFIG_migration_dir"               => "Directory for migration",
+        "CONFIG_migration_dir_absolute"      => "Is absolute path migration_dir",
+        "CONFIG_exchange_dir"                => "Directory for exchange files",
+        "CONFIG_exchange_dir_absolute"       => "Is absolute path exchange_dir",
         "CONFIG_migration_extend_class"      => "Class to inherit by migrations",
         "CONFIG_migration_table"             => "Table in the database with migrations",
         "CONFIG_version_prefix"              => "Name prefix for migrations",
         "CONFIG_version_builders"            => "Builders",
-        "CONFIG_version_filter"              => "Migrations filter",
-        "CONFIG_stop_on_errors"              => "Stop error migrations",
         "CONFIG_show_admin_interface"        => "Show admin interface",
         "CONFIG_console_user"                => "User who run migrations from console",
         "CONFIG_console_auth_events_disable" => "Disable auth events in console",
@@ -89,6 +91,7 @@
         "CONFIG_yes"                         => "yes",
         "CONFIG_no"                          => "no",
         "CONFIG_version_name_template"       => "Version name template",
+        "CONFIG_tracker_task_url"            => "Task url template",
     ]
 );
 \Sprint\Migration\Locale::loadLocale(
@@ -130,9 +133,9 @@
         "BUILDER_IblockElementsExport_Fields"          => "Select fields",
         "BUILDER_IblockElementsExport_Filter"          => "Select elements",
         "BUILDER_IblockElementsExport_SelectSomeId"    => "Enter elements ID",
-        "BUILDER_IblockElementsExport_FilterListId"    => "Enter elements ID by comma",
+        "BUILDER_IblockElementsExport_FilterListId"    => "Enter elements ID by space",
         "BUILDER_IblockElementsExport_SelectSomeXmlId" => "Enter elements XML_ID",
-        "BUILDER_IblockElementsExport_FilterListXmlId" => "Enter elements XML_ID by comma",
+        "BUILDER_IblockElementsExport_FilterListXmlId" => "Enter elements XML_ID by space",
         "BUILDER_IblockElementsExport_UpdateMode"      => "Export settings",
         "BUILDER_IblockElementsExport_SelectAll"       => "Select all",
         "BUILDER_IblockElementsExport_SelectNone"      => "Select none",
@@ -325,12 +328,16 @@
         "ERR_IB_FORM_OPTIONS_NOT_FOUND"     => "Information block form options not found",
         "ERR_SCHEMA_EMPTY"                  => "Data schema \"#NAME#\" empty",
         "ERR_SCHEMA_CREATED"                => "Data schema \"#NAME#\" saved",
-        "ERR_EXCHANGE_FILE_NOT_FOUND"       => "Exchange file not found",
+        "ERR_EXCHANGE_FILE_NOT_FOUND"       => "Exchange file not found: #FILE#",
         "ERR_EXCHANGE_VERSION"              => "Exchange file \"#NAME#\" not supported in this version of module.\nPlease recreate it",
         "ERR_IB_SECTION_ID_EMPTY"           => "Section in iblock \"#IBLOCK_ID#\" empty",
         "ERR_IB_SECTION_ID_NOT_FOUND"       => "Section \"#SECTION_ID#\" in iblock \"#IBLOCK_ID#\" not found",
-        "ERR_IB_SECTION_ON_LEVEL_NOT_FOUND" => "Section \"#SECTION_NAME#\" on level \"#DEPTH_LEVEL#\" not found",
+        "ERR_IB_SECTION_BY_FILTER_NOT_FOUND" => "Section \"#NAME#\" on level \"#DEPTH_LEVEL#\" in iblock \"#IBLOCK_ID#\" not found",
         "ERR_SAVE_COLLECTION_BY_PATH"       => "Collection by path \"#PATH#\" not created",
+        "ERR_IB_ELEMENT_ID_EMPTY"            => "Element in iblock \"#IBLOCK_ID#\" empty",
+        "ERR_IB_ELEMENT_ID_NOT_FOUND"        => "Element \"#ELEMENT_ID#\" in iblock \"#IBLOCK_ID#\" not found",
+        "ERR_IB_ELEMENT_BY_FILTER_NOT_FOUND" => "Element \"#NAME#\" in iblock \"#IBLOCK_ID#\" not found",
+
     ]
 );
 \Sprint\Migration\Locale::loadLocale(
Index: local/modules/sprint.migration/locale/ru.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once __DIR__ . \"/../lib/locale.php\";\r\n\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\",\r\n    [\r\n        \"MODULE_NAME\"              => \"Миграции для разработчиков\",\r\n        \"MODULE_DESCRIPTION\"       => \"Модуль для управления миграциями бд, создание, установка, откат миграций\",\r\n        \"PARTNER_NAME\"             => \"Андрей Рябин\",\r\n        \"PARTNER_URI\"              => \"https://packagist.org/packages/andreyryabin/sprint.migration\",\r\n        \"ACCESS_DENIED\"            => \"Доступ запрещен\",\r\n        \"MENU_SPRINT\"              => \"Миграции для разработчиков\",\r\n        \"MENU_SCHEMAS\"             => \"Схемы данных\",\r\n        \"TITLE\"                    => \"Миграции\",\r\n        \"FORM_DESCR\"               => \"Описание\",\r\n        \"FORM_PREFIX\"              => \"Заголовок\",\r\n        \"LIST_EMPTY\"               => \"нет\",\r\n        \"UP\"                       => \"Установить\",\r\n        \"DOWN\"                     => \"Откатить\",\r\n        \"UP_START\"                 => \"Установить новые\",\r\n        \"UP_START_WITH_TAG\"        => \"Установить новые с тегом\",\r\n        \"DOWN_START\"               => \"Откатить все\",\r\n        \"DELETE_UNKNOWN\"           => \"Удалить все неизвестные\",\r\n        \"VIEW_FILE\"                => \"Просмотреть\",\r\n        \"TRANSFER_TO\"              => \"Перенести в\",\r\n        \"TOGGLE_LIST\"              => \"Все\",\r\n        \"TOGGLE_NEW\"               => \"Новые\",\r\n        \"TOGGLE_STATUS\"            => \"Суммарно\",\r\n        \"TOGGLE_INSTALLED\"         => \"Установленные\",\r\n        \"TOGGLE_MODIFIED\"          => \"Измененные\",\r\n        \"TOGGLE_OLDER\"             => \"Не поддерживаемые\",\r\n        \"TOGGLE_TAG\"               => \"Тег\",\r\n        \"LINK_MP\"                  => \"Маркетплейс\",\r\n        \"LINK_DOC\"                 => \"Документация\",\r\n        \"LINK_ARTICLES\"            => \"Статьи\",\r\n        \"LINK_COMPOSER\"            => \"Composer\",\r\n        \"LINK_TASKS\"               => \"Задачи\",\r\n        \"LINK_TELEGRAM\"            => \"Группа в телеграме\",\r\n        \"LINK_IMPROVE_TRANSLATION\" => \"Улучшите перевод на английский, создайте пул-реквест с этим файлом\",\r\n        \"NEW\"                      => \"Новые миграции\",\r\n        \"INSTALLED\"                => \"Установленные\",\r\n        \"UNKNOWN\"                  => \"Неизвестные\",\r\n        \"VERSION_NEW\"              => \"Новая\",\r\n        \"VERSION_INSTALLED\"        => \"Установленная\",\r\n        \"DESC_NEW\"                 => \"(только файл)\",\r\n        \"DESC_INSTALLED\"           => \"(файл + запись об установке)\",\r\n        \"DESC_UNKNOWN\"             => \"(только запись об установке)\",\r\n        \"META_NEW\"                 => \"Новые\",\r\n        \"META_INSTALLED\"           => \"Установленные\",\r\n        \"META_UNKNOWN\"             => \"Неизвестные\",\r\n        \"CREATED_SUCCESS\"          => \"Миграция #VERSION# создана\",\r\n        \"SEARCH\"                   => \"Поиск\",\r\n        \"ADMIN_INTERFACE_HIDDEN\"   => \"Управление миграциями через админку отключено\",\r\n        \"CONFIG_LIST\"              => \"Список конфигураций\",\r\n        \"COMMAND_RUN\"              => \"Выполнение команд\",\r\n        \"COMMAND_HELP\"             => \"Помощь по командам\",\r\n        \"COMMAND_CONFIG\"           => \"Просмотр конфигурации\",\r\n        \"CURRENT_USER\"             => \"Текущий пользователь\",\r\n        \"BITRIX_VERSION\"           => \"Версия bitrix\",\r\n        \"MODULE_VERSION\"           => \"Версия модуля\",\r\n        \"CFG_TITLE\"                => \"Миграции\",\r\n        \"SCH_TITLE\"                => \"Схемы данных\",\r\n        \"CONFIG\"                   => \"Конфигурация\",\r\n        \"BUILDER_ERROR\"            => \"Ошибка\",\r\n        \"BUILDER_NEXT\"             => \"Далее\",\r\n        \"BUILDER_RESET\"            => \"Сбросить\",\r\n        \"SELECT_ALL\"               => \"Выбрать все\",\r\n        \"SELECT_ONE\"               => \"Выбрать\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\",\r\n    [\r\n        \"CONFIG_archive\"                     => \"Архив\",\r\n        \"CONFIG_migration_dir\"               => \"Директория для миграций\",\r\n        \"CONFIG_migration_extend_class\"      => \"Класс, наследуемый миграциями\",\r\n        \"CONFIG_migration_table\"             => \"Таблица в бд с миграциями\",\r\n        \"CONFIG_version_prefix\"              => \"Заголовок класса миграции\",\r\n        \"CONFIG_version_builders\"            => \"Конструкторы\",\r\n        \"CONFIG_version_filter\"              => \"Фильтр списка миграций\",\r\n        \"CONFIG_stop_on_errors\"              => \"Останавливать выполнение миграций при ошибках\",\r\n        \"CONFIG_show_admin_interface\"        => \"Показывать сервис миграций в админке\",\r\n        \"CONFIG_console_user\"                => \"Пользователь, от которого запускаются миграции в консоли\",\r\n        \"CONFIG_console_auth_events_disable\" => \"Отключить обработчики авторизации в консоли\",\r\n        \"CONFIG_config_file\"                 => \"Файл конфигурации\",\r\n        \"CONFIG_title\"                       => \"Название конфигурации\",\r\n        \"CONFIG_version_schemas\"             => \"Схемы данных\",\r\n        \"CONFIG_yes\"                         => \"да\",\r\n        \"CONFIG_no\"                          => \"нет\",\r\n        \"CONFIG_version_name_template\"       => \"Шаблон названия миграции\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\",\r\n    [\r\n        \"BUILDER_Transfer1\"                  => \"Перенести миграции\",\r\n        \"BUILDER_TransferTo\"                 => \"Перенести в другую конфигурацию\",\r\n        \"BUILDER_TransferAll\"                => \"Все\",\r\n        \"BUILDER_TransferNew\"                => \"Новые\",\r\n        \"BUILDER_TransferInstalled\"          => \"Установленные\",\r\n        \"BUILDER_TransferUnknown\"            => \"Неизвестные\",\r\n        \"BUILDER_TransferSelect\"             => \"Выбрать миграции\",\r\n        \"BUILDER_EventExport1\"               => \"Создать миграцию для почтовых событий\",\r\n        \"BUILDER_EventExport_event_types\"    => \"Выберите типы почтовых событий\",\r\n        \"BUILDER_AgentExport1\"               => \"Создать миграцию для агентов\",\r\n        \"BUILDER_AgentExport_agent_id\"       => \"Выберите агенты\",\r\n        \"BUILDER_Version1\"                   => \"Создать простую миграцию\",\r\n        \"BUILDER_UserGroupExport1\"           => \"Создать миграцию для групп пользователей\",\r\n        \"BUILDER_UserGroupExport_user_group\" => \"Выберите группы\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\",\r\n    [\r\n        \"BUILDER_IblockExport1\"                        => \"Создать миграцию для инфоблока\",\r\n        \"BUILDER_IblockExport_IblockId\"                => \"Выберите инфоблок\",\r\n        \"BUILDER_IblockExport_Properties\"              => \"Выберите свойства\",\r\n        \"BUILDER_IblockExport_What\"                    => \"Что переносим\",\r\n        \"BUILDER_IblockExport_WhatIblock\"              => \"Инфоблок\",\r\n        \"BUILDER_IblockExport_WhatIblockType\"          => \"Тип инфоблока\",\r\n        \"BUILDER_IblockExport_WhatIblockFields\"        => \"Поля инфоблока\",\r\n        \"BUILDER_IblockExport_WhatIblockProperties\"    => \"Свойства инфоблока\",\r\n        \"BUILDER_IblockExport_WhatIblockUserOptions\"   => \"Настройки формы редактирования и списка\",\r\n        \"BUILDER_IblockExport_WhatIblockPermissions\"   => \"Доступ к инфоблоку\",\r\n        \"BUILDER_IblockElementsExport1\"                => \"Перенести элементы инфоблоков\",\r\n        \"BUILDER_IblockElementsExport2\"                => \"Переносит элементы с полями и свойствами\\nПереносит изображения, файлы и списки\",\r\n        \"BUILDER_IblockElementsExport_IblockId\"        => \"Выберите инфоблок\",\r\n        \"BUILDER_IblockElementsExport_Properties\"      => \"Выберите свойства\",\r\n        \"BUILDER_IblockElementsExport_Fields\"          => \"Выберите поля\",\r\n        \"BUILDER_IblockElementsExport_Filter\"          => \"Выберите элементы\",\r\n        \"BUILDER_IblockElementsExport_SelectSomeId\"    => \"Указать ID элементов\",\r\n        \"BUILDER_IblockElementsExport_FilterListId\"    => \"Укажите ID элементов через запятую\",\r\n        \"BUILDER_IblockElementsExport_SelectSomeXmlId\" => \"Указать XML_ID элементов\",\r\n        \"BUILDER_IblockElementsExport_FilterListXmlId\" => \"Укажите XML_ID элементов через запятую\",\r\n        \"BUILDER_IblockElementsExport_UpdateMode\"      => \"Настройка переноса\",\r\n        \"BUILDER_IblockElementsExport_SelectAll\"       => \"Выбрать все\",\r\n        \"BUILDER_IblockElementsExport_SelectNone\"      => \"Не выбирать ничего\",\r\n        \"BUILDER_IblockElementsExport_SelectSome\"      => \"Выбрать несколько\",\r\n        \"BUILDER_IblockElementsExport_NotUpdate\"       => \"Простое добавление элементов\",\r\n        \"BUILDER_IblockElementsExport_UpdateByCode\"    => \"Добавить или обновить элементы с такими же CODE\",\r\n        \"BUILDER_IblockElementsExport_UpdateByXmlId\"   => \"Добавить или обновить элементы с такими же XML_ID\",\r\n        \"BUILDER_IblockCategoryExport1\"                => \"Перенести категории инфоблоков\",\r\n        \"BUILDER_IblockCategoryExport2\"                => \"Переносит категории инфоблоков без изображений\",\r\n        \"BUILDER_IblockCategoryExport_IblockId\"        => \"Выберите инфоблок\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\",\r\n    [\r\n        \"BUILDER_HlblockElementsExport1\"          => \"Перенести элементы highload-блоков\",\r\n        \"BUILDER_HlblockElementsExport2\"          => \"Переносит элементы\\nПереносит изображения, файлы и списки\",\r\n        \"BUILDER_HlblockElementsExport_HlblockId\" => \"Выберите highload-блок\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\",\r\n    [\r\n        \"BUILDER_UserOptionsExport_Title\"         => \"Создать миграцию для пользовательских настроек\",\r\n        \"BUILDER_UserOptionsExport_What\"          => \"Что переносим\",\r\n        \"BUILDER_UserOptionsExport_WhatUserForm\"  => \"Настрока формы редактирования пользователей\",\r\n        \"BUILDER_UserOptionsExport_WhatUserList\"  => \"Настрока списка пользователей\",\r\n        \"BUILDER_UserOptionsExport_WhatGroupList\" => \"Настрока списка групп\",\r\n        \"BUILDER_HlblockExport1\"                  => \"Создать миграцию для highload-блока\",\r\n        \"BUILDER_HlblockExport_HlblockId\"         => \"Выберите highload-блоки\",\r\n        \"BUILDER_UserTypeEntities1\"               => \"Создать миграцию для пользовательских полей\",\r\n        \"BUILDER_UserTypeEntities_EntityId\"       => \"Укажите поле для выгрузки\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\",\r\n    [\r\n        \"BUILDER_FormExport1\"              => \"Создать миграцию для веб-формы\",\r\n        \"BUILDER_FormExport_FormId\"        => \"Выберите форму\",\r\n        \"BUILDER_FormExport_What\"          => \"Что переносим?\",\r\n        \"BUILDER_FormExport_Form\"          => \"Форму\",\r\n        \"BUILDER_FormExport_Fields\"        => \"Поля формы\",\r\n        \"BUILDER_FormExport_Statuses\"      => \"Статусы\",\r\n        \"BUILDER_OptionExport1\"            => \"Создать миграцию для настроек модулей\",\r\n        \"BUILDER_OptionExport_module_id\"   => \"Выберите модули\",\r\n        \"BUILDER_CacheCleaner1\"            => \"Очистка кеша\",\r\n        \"BUILDER_CacheCleaner2\"            => \"Выполнить BXClearCache(true)\",\r\n        \"BUILDER_Configurator\"             => \"Создать конфигурацию\",\r\n        \"BUILDER_Configurator_config_name\" => \"Название (лат буквы и цифры)\",\r\n        \"BUILDER_Configurator_error\"       => \"Ошибка создания конфигурации\",\r\n        \"BUILDER_Configurator_success\"     => \"Конфигурация создана\",\r\n        \"BUILDER_Archive\"                  => \"Создать архивную конфигурацию\",\r\n        \"BUILDER_Cleaner\"                  => \"Удалить конфигурацию\",\r\n        \"BUILDER_Cleaner_desc\"             => \"Удаление файла конфигурации, файлов миграций и записей в таблице миграций\",\r\n        \"BUILDER_Cleaner_config_name\"      => \"Название (лат буквы и цифры)\",\r\n        \"BUILDER_Cleaner_error\"            => \"Ошибка удаления конфигурации\",\r\n        \"BUILDER_Cleaner_success\"          => \"Конфигурация удалена\",\r\n        \"BUILDER_SchemaImport\"             => \"Установка схемы\",\r\n        \"BUILDER_SchemaExport\"             => \"Создание схемы\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\", [\r\n        \"BUILDER_MedialibElements1\"             => \"Перенести изображения медиабиблиотеки\",\r\n        \"BUILDER_MedialibElements2\"             => \"Переносит изображения по коллекциям\\nСоздает коллекции если их не было\\nОбновляет изображения и коллекции с таким же названием\",\r\n        \"BUILDER_MedialibElements_CollectionId\" => \"Выбрать коллекции\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\",\r\n    [\r\n        \"GOTO_MIGRATION\"         => \"Админка миграций\",\r\n        \"GOTO_OPTIONS\"           => \"Настройки модуля\",\r\n        \"OPTIONS_REMOVE\"         => \"Сбросить настройки модуля\",\r\n        \"OPTIONS_REMOVE_success\" => \"Настройки сброшены\",\r\n        \"MARK\"                   => \"Отметить миграцию\",\r\n        \"MARK_FIELD1\"            => \"Выбрать миграцию\",\r\n        \"MARK_FIELD2\"            => \"Отметить как\",\r\n        \"MARK_VERSION\"           => \"Название|installed|new|unknown\",\r\n        \"MARK_AS_NEW\"            => \"новую\",\r\n        \"MARK_AS_INSTALLED\"      => \"установленную\",\r\n        \"MARK_SUCCESS1\"          => \"Миграция #VERSION# отмечена как новая\",\r\n        \"MARK_SUCCESS2\"          => \"Миграция #VERSION# отмечена как установленная\",\r\n        \"MARK_SUCCESS3\"          => \"Миграция #VERSION# удалена\",\r\n        \"MARK_ERROR1\"            => \"Миграция #VERSION# уже является новой\",\r\n        \"MARK_ERROR2\"            => \"Миграция #VERSION# уже была установлена\",\r\n        \"MARK_ERROR3\"            => \"Миграция #VERSION# не изменена\",\r\n        \"MARK_ERROR4\"            => \"Не найдено миграций для изменения\",\r\n        \"MARK_NEW_AS_INSTALLED\"  => \"Отметить как установленную\",\r\n        \"MARK_INSTALLED_AS_NEW\"  => \"Отметить как новую\",\r\n        \"MARK_UNKNOWN_AS_NEW\"    => \"Удалить\",\r\n        \"DELETE\"                 => \"Удалить\",\r\n        \"DELETE_OK\"              => \"Миграция #VERSION# удалена\",\r\n        \"DELETE_ERROR1\"          => \"Миграций для удаления не найдено\",\r\n        \"DELETE_ERROR2\"          => \"Миграция #VERSION# не найдена\",\r\n        \"TRANSFER_OK\"            => \"Миграция #VERSION# перенесена\",\r\n        \"TRANSFER_OK_CNT\"        => \"Перенесено миграций: #CNT#\",\r\n        \"TRANSFER_ERROR1\"        => \"Миграции для переноса не найдены\",\r\n        \"TRANSFER_ERROR2\"        => \"Миграция уже находится в этой конфигурации\",\r\n        \"CREATE\"                 => \"Создать миграцию\",\r\n        \"VERSION_NOT_FOUND\"      => \"Миграция не найдена\",\r\n        \"RIGHT_D\"                => \"Доступ запрещен\",\r\n        \"RIGHT_W\"                => \"Доступ разрешен\",\r\n        \"MODIFIED_SCHEMA\"        => \"Содержимое схемы было изменено после установки\",\r\n        \"MODIFIED_VERSION\"       => \"Код миграции был изменен после установки\",\r\n        \"MODIFIED_LABEL\"         => \"M\",\r\n        \"OLDER_VERSION\"          => \"Код миграции был создан в более поздней версии модуля #V1#\\nВозможно, он использует возможности, которые не реализованы в текущей версии #V2#\",\r\n        \"OLDER_LABEL\"            => \"!\",\r\n        \"TAG\"                    => \"Миграция отмечена тегом\",\r\n        \"SETTAG\"                 => \"Поставить тег\",\r\n        \"SETTAG_OK\"              => \"Тег для миграции #VERSION# задан\",\r\n        \"SETTAG_ERROR1\"          => \"Миграций для установки тега не найдено\",\r\n        \"SETTAG_ERROR2\"          => \"Миграция #VERSION# не найдена\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\",\r\n    [\r\n        \"SCHEMA_DIFF\"                  => \"Проверить изменения\",\r\n        \"SCHEMA_IMPORT\"                => \"Установить схему\",\r\n        \"SCHEMA_EXPORT\"                => \"Создать схему\",\r\n        \"SCHEMA_AGENT\"                 => \"Схема агентов\",\r\n        \"SCHEMA_AGENT_DESC\"            => \"Агенты: #COUNT#\",\r\n        \"SCHEMA_EVENT\"                 => \"Схема почтовых событий\",\r\n        \"SCHEMA_EVENT_DESC\"            => \"Типы почтовых событий: #COUNT#\",\r\n        \"SCHEMA_EVENT_MESSAGES_DESC\"   => \"Почтовые шаблоны: #COUNT#\",\r\n        \"SCHEMA_USER_GROUP\"            => \"Схема групп пользователей\",\r\n        \"SCHEMA_USER_GROUP_DESC\"       => \"Группы пользователей: #COUNT#\",\r\n        \"SCHEMA_HLBLOCK\"               => \"Схема highload-блоков\",\r\n        \"SCHEMA_HLBLOCK_DESC\"          => \"Highload-блоки: #COUNT#\",\r\n        \"SCHEMA_HLBLOCK_FIELDS_DESC\"   => \"Полей: #COUNT#\",\r\n        \"SCHEMA_IBLOCK\"                => \"Схема инфоблоков\",\r\n        \"SCHEMA_IBLOCK_TYPE_DESC\"      => \"Типы инфоблоков: #COUNT#\",\r\n        \"SCHEMA_IBLOCK_DESC\"           => \"Инфоблоков: #COUNT#\",\r\n        \"SCHEMA_IBLOCK_PROPS_DESC\"     => \"Свойств инфоблоков: #COUNT#\",\r\n        \"SCHEMA_IBLOCK_FORMS_DESC\"     => \"Форм редактирования: #COUNT#\",\r\n        \"SCHEMA_OPTION\"                => \"Схема настроек модулей\",\r\n        \"SCHEMA_OPTION_DESC\"           => \"Настроек: #COUNT#\",\r\n        \"SCHEMA_USER_TYPE_ENTITY\"      => \"Схема пользовательских полей\",\r\n        \"SCHEMA_USER_TYPE_ENTITY_DESC\" => \"Полей: #COUNT#\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\",\r\n    [\r\n        \"ERR_BUILDER_NOT_FOUND\"             => \"Конструктор не найден\",\r\n        \"ERR_CANT_CREATE_DIRECTORY\"         => \"Ошибка создания директории #NAME#\",\r\n        \"ERR_MSSQL_NOT_SUPPORTED\"           => \"MSSQL не поддерживается\",\r\n        \"ERR_JSON_NOT_SUPPORTED\"            => \"Установите php-расширение json\",\r\n        \"ERR_PHP_NOT_SUPPORTED\"             => \"\\\"#NAME#\\\" не поддерживается\",\r\n        \"ERR_EXCHANGE_DISABLED\"             => \"Обмен отключен, подключите недостающие модули\",\r\n        \"ERR_EXCHANGE_DISABLED_XML\"         => \"Обмен отключен, установите php-расширение XMLReader и XMLWriter\",\r\n        \"ERR_CLASS_NOT_FOUND\"               => \"Класс \\\"#NAME#\\\" не найден\",\r\n        \"ERR_MIGRATION_FAIL\"                => \"Миграция не выполнилась\",\r\n        \"ERR_SOME_MIGRATIONS_FAILS\"         => \"Некоторые миграции не выполнились\",\r\n        \"ERR_VERSION_NOT_FOUND\"             => \"Миграция не найдена\",\r\n        \"ERR_INVALID_ARGUMENTS\"             => \"Укажите корректные аргументы, смотрите помощь\",\r\n        \"ERR_COMMAND_NOT_FOUND\"             => \"Команда \\\"#NAME#\\\" не найдена, смотрите помощь\",\r\n        \"ERR_METHOD_NOT_FOUND\"              => \"Метод \\\"#NAME#\\\"  не найден\",\r\n        \"ERR_CANT_CREATE_FILE\"              => \"Ошибка создания файла \\\"#NAME#\\\"\",\r\n        \"ERR_FORM_NOT_FOUND\"                => \"Форма \\\"#NAME#\\\" не найдена\",\r\n        \"ERR_EMPTY_REQ_FIELD\"               => \"Обязательное поле \\\"#NAME#\\\" не заполнено\",\r\n        \"ERR_HELPER_DISABLED\"               => \"Помощник \\\"#NAME#\\\" отключен\",\r\n        \"ERR_AGENT_NOT_ADDED\"               => \"Агент \\\"#NAME#\\\" не добавлен\",\r\n        \"ERR_EVENT_TYPE_NOT_UPDATED\"        => \"Тип почтового события не обновлен\",\r\n        \"ERR_CANT_DELETE_FORM\"              => \"Ошибка удаления формы \\\"#NAME#\\\"\",\r\n        \"ERR_CANT_DELETE_EVENT_TYPE\"        => \"Ошибка удаления типа почтового события \\\"#NAME#\\\"\",\r\n        \"ERR_CANT_DELETE_EVENT_MESSAGE\"     => \"Ошибка удаления почтового шаблона \\\"#NAME#\\\"\",\r\n        \"ERR_EVENT_TYPE_NOT_ADDED\"          => \"Тип почтового события \\\"#NAME#\\\" не добавлен\",\r\n        \"ERR_EVENT_MESSAGE_NOT_ADDED\"       => \"Почтовый шаблон \\\"#NAME#\\\" не добавлен\",\r\n        \"ERR_HLBLOCK_NOT_FOUND\"             => \"Highload-блок \\\"#HLBLOCK#\\\" не найден\",\r\n        \"ERR_HLBLOCK_FIELD_NOT_FOUND\"       => \"Поле для highload-блока не найдено\",\r\n        \"ERR_DEFAULT_LANGUAGE_NOT_FOUND\"    => \"Основной яык не найден\",\r\n        \"ERR_ACTIVE_LANGUAGES_NOT_FOUND\"    => \"Языки не найдены\",\r\n        \"ERR_DEFAULT_SITE_NOT_FOUND\"        => \"Основной сайт не найден\",\r\n        \"ERR_ACTIVE_SITES_NOT_FOUND\"        => \"Сайты не найдены\",\r\n        \"ERR_USER_GROUP_CODE_NOT_FOUND\"     => \"Не найден код группы\",\r\n        \"ERR_SET_FIELDS_FOR_UPDATE_GROUP\"   => \"Заполните поля для обновления группы\",\r\n        \"ERR_USERTYPE_NOT_ADDED\"            => \"Пользовательское поле \\\"#NAME#\\\" не добавлено\",\r\n        \"ERR_USERTYPE_NOT_UPDATED\"          => \"Пользовательское поле \\\"#NAME#\\\" не обновлено\",\r\n        \"ERR_USERTYPE_NOT_DELETED\"          => \"Пользовательское поле \\\"#NAME#\\\" не удалено\",\r\n        \"ERR_USERTYPE_EXPORT\"               => \"Ошибка экспорта пользовательского поля \\\"#USER_TYPE_ID#\\\":\",\r\n        \"ERR_IB_PROPERTY_CODE_NOT_FOUND\"    => \"Не заполнен символьный код свойства\",\r\n        \"ERR_IB_CODE_NOT_FOUND\"             => \"Не заполнен символьный код инфоблока \\\"#IBLOCK_ID#\\\"\",\r\n        \"ERR_TYPE_OF_IB_NOT_FOUND\"          => \"Не найден тип у инфоблока \\\"#IBLOCK_ID#\\\"\",\r\n        \"ERR_IB_SECTION_NAME_NOT_FOUND\"     => \"Не заполнено название категории инфоблока\",\r\n        \"ERR_IB_NOT_FOUND\"                  => \"Инфоблок \\\"#IBLOCK#\\\" не найден\",\r\n        \"ERR_IB_TYPE_NOT_FOUND\"             => \"Тип инфоблока \\\"#IBLOCK_TYPE_ID#\\\" не найден\",\r\n        \"ERR_CANT_DELETE_IBLOCK\"            => \"Ошибка удаления инфоблок \\\"#NAME#\\\"\",\r\n        \"ERR_CANT_DELETE_IBLOCK_TYPE\"       => \"Ошибка удаления типа инфоблока \\\"#NAME#\\\"\",\r\n        \"ERR_IB_FORM_OPTIONS_NOT_FOUND\"     => \"Не найдены настройки формы элемента инфоблока\",\r\n        \"ERR_SCHEMA_EMPTY\"                  => \"Схема \\\"#NAME#\\\" не содержит данных\",\r\n        \"ERR_SCHEMA_CREATED\"                => \"Схема \\\"#NAME#\\\" сохранена\",\r\n        \"ERR_EXCHANGE_FILE_NOT_FOUND\"       => \"Файл с данными не найден\",\r\n        \"ERR_EXCHANGE_VERSION\"              => \"Файл для переноса данных \\\"#NAME#\\\" не поддерживается текущей версией модуля.\\nПожалуйста создайте его заново.\",\r\n        \"ERR_IB_SECTION_ID_EMPTY\"           => \"Категория в инфоблоке \\\"#IBLOCK_ID#\\\" не указана\",\r\n        \"ERR_IB_SECTION_ID_NOT_FOUND\"       => \"Категория \\\"#SECTION_ID#\\\" в инфоблоке \\\"#IBLOCK_ID#\\\" не найдена\",\r\n        \"ERR_IB_SECTION_ON_LEVEL_NOT_FOUND\" => \"Категория \\\"#SECTION_NAME#\\\" на уровне \\\"#DEPTH_LEVEL#\\\" не найдена\",\r\n        \"ERR_SAVE_COLLECTION_BY_PATH\"       => \"Не удалось сохранить коллекцию по пути \\\"#PATH#\\\"\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\",\r\n    [\r\n        \"AGENT_CREATED\"            => \"Агент \\\"#NAME#\\\" добавлен\",\r\n        \"AGENT_UPDATED\"            => \"Агент \\\"#NAME#\\\" обновлен\",\r\n        \"AGENT_EQUAL\"              => \"Агент \\\"#NAME#\\\" совпадает\",\r\n        \"AGENT_DELETED\"            => \"Агент \\\"#NAME#\\\" удален\",\r\n        \"EVENT_MESSAGE_CREATED\"    => \"Почтовый шаблон \\\"#NAME#\\\" добавлен\",\r\n        \"EVENT_MESSAGE_UPDATED\"    => \"Почтовый шаблон \\\"#NAME#\\\" обновлен\",\r\n        \"EVENT_MESSAGE_EQUAL\"      => \"Почтовый шаблон \\\"#NAME#\\\" совпадает\",\r\n        \"EVENT_MESSAGE_DELETED\"    => \"Почтовый шаблон \\\"#NAME#\\\" удален\",\r\n        \"EVENT_TYPE_CREATED\"       => \"Тип почтового события \\\"#NAME#\\\" добавлен\",\r\n        \"EVENT_TYPE_UPDATED\"       => \"Тип почтового события \\\"#NAME#\\\" обновлен\",\r\n        \"EVENT_TYPE_EQUAL\"         => \"Тип почтового события \\\"#NAME#\\\" совпадает\",\r\n        \"EVENT_TYPE_DELETED\"       => \"Тип почтового события \\\"#NAME#\\\" удален\",\r\n        \"HLBLOCK_CREATED\"          => \"Highload-блок \\\"#NAME#\\\" добавлен\",\r\n        \"HLBLOCK_UPDATED\"          => \"Highload-блок \\\"#NAME#\\\" обновлен\",\r\n        \"HLBLOCK_EQUAL\"            => \"Highload-блок \\\"#NAME#\\\" совпадает\",\r\n        \"HLBLOCK_DELETED\"          => \"Highload-блок \\\"#NAME#\\\" удален\",\r\n        \"OPTION_CREATED\"           => \"Настройка \\\"#NAME#\\\" добавлена\",\r\n        \"OPTION_UPDATED\"           => \"Настройка \\\"#NAME#\\\" обновлена\",\r\n        \"OPTION_EQUAL\"             => \"Настройка \\\"#NAME#\\\" совпадает\",\r\n        \"USER_GROUP_CREATED\"       => \"Группа \\\"#NAME#\\\" добавлена\",\r\n        \"USER_GROUP_UPDATED\"       => \"Группа \\\"#NAME#\\\" обновлена\",\r\n        \"USER_GROUP_EQUAL\"         => \"Группа \\\"#NAME#\\\" совпадает\",\r\n        \"USER_GROUP_DELETED\"       => \"Группа \\\"#NAME#\\\" удалена\",\r\n        \"USER_OPTION_LIST_CREATED\" => \"Список \\\"#NAME#\\\" сохранен\",\r\n        \"USER_OPTION_LIST_EQUAL\"   => \"Список \\\"#NAME#\\\" совпадает\",\r\n        \"USER_OPTION_GRID_CREATED\" => \"Грид \\\"#NAME#\\\" сохранен\",\r\n        \"USER_OPTION_GRID_EQUAL\"   => \"Грид \\\"#NAME#\\\" совпадает\",\r\n        \"USER_OPTION_FORM_CREATED\" => \"Форма редактирования \\\"#NAME#\\\" сохранена\",\r\n        \"USER_OPTION_FORM_EQUAL\"   => \"Форма редактирования \\\"#NAME#\\\" совпадает\",\r\n        \"USER_TYPE_ENTITY_CREATED\" => \"Пользовательское поле \\\"#NAME#\\\" добавлено\",\r\n        \"USER_TYPE_ENTITY_UPDATED\" => \"Пользовательское поле \\\"#NAME#\\\" обновлено\",\r\n        \"USER_TYPE_ENTITY_EQUAL\"   => \"Пользовательское поле \\\"#NAME#\\\" совпадает\",\r\n        \"USER_TYPE_ENTITY_DELETED\" => \"Пользовательское поле \\\"#NAME#\\\" удалено\",\r\n        \"IB_PROPERTY_CREATED\"      => \"Инфоблок \\\"#IBLOCK_ID#\\\": свойство \\\"#NAME#\\\" добавлено\",\r\n        \"IB_PROPERTY_UPDATED\"      => \"Инфоблок \\\"#IBLOCK_ID#\\\": свойство \\\"#NAME#\\\" обновлено\",\r\n        \"IB_PROPERTY_EQUAL\"        => \"Инфоблок \\\"#IBLOCK_ID#\\\": свойство \\\"#NAME#\\\" совпадает\",\r\n        \"IB_PROPERTY_DELETED\"      => \"Инфоблок \\\"#IBLOCK_ID#\\\": свойство \\\"#NAME#\\\" удалено\",\r\n        \"IB_CREATED\"               => \"Инфоблок \\\"#NAME#\\\" добавлен\",\r\n        \"IB_UPDATED\"               => \"Инфоблок \\\"#NAME#\\\" обновлен\",\r\n        \"IB_EQUAL\"                 => \"Инфоблок \\\"#NAME#\\\" совпадает\",\r\n        \"IB_DELETED\"               => \"Инфоблок \\\"#NAME#\\\" удален\",\r\n        \"IB_FIELDS_CREATED\"        => \"Инфоблок \\\"#NAME#\\\": поля добавлены\",\r\n        \"IB_FIELDS_UPDATED\"        => \"Инфоблок \\\"#NAME#\\\": поля обновлены\",\r\n        \"IB_FIELDS_EQUAL\"          => \"Инфоблок \\\"#NAME#\\\": поля совпадают\",\r\n        \"IB_TYPE_CREATED\"          => \"Тип инфоблока \\\"#NAME#\\\" добавлен\",\r\n        \"IB_TYPE_UPDATED\"          => \"Тип инфоблока \\\"#NAME#\\\" обновлен\",\r\n        \"IB_TYPE_EQUAL\"            => \"Тип инфоблока \\\"#NAME#\\\" совпадает\",\r\n        \"IB_TYPE_DELETED\"          => \"Тип инфоблока \\\"#NAME#\\\" удален\",\r\n    ]\r\n);\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\",\r\n    [\r\n        \"GD_INSTALL\"          => \"Установить гаджеты: \\\"Сводка по миграциям\\\"\",\r\n        \"GD_INSTALL_success\"  => \"Гаджеты установлены\",\r\n        \"GD_SELECT_CONFIGS\"   => \"Конфигурации\",\r\n        \"GD_CHECK_SCHEMAS\"    => \"Показывать статус для схем\",\r\n        \"GD_INFO_NAME\"        => \"Сводка по миграциям\",\r\n        \"GD_INFO_DESC\"        => \"Сводка по миграциям\",\r\n        \"GD_TYPE\"             => \"Тип\",\r\n        \"GD_STATE\"            => \"Состояние\",\r\n        \"GD_SHOW\"             => \"Перейти\",\r\n        \"GD_SHOW_SCHEMAS\"     => \"Перейти к схемам\",\r\n        \"GD_SHOW_MIGRATIONS\"  => \"Перейти к миграциям\",\r\n        \"GD_MIGRATIONS\"       => \"Миграции\",\r\n        \"GD_MIGRATIONS_RED\"   => \"Есть неустановленные миграции\",\r\n        \"GD_MIGRATIONS_GREEN\" => \"Все миграции установлены\",\r\n        \"GD_SCHEMAS\"          => \"Схемы данных\",\r\n        \"GD_SCHEMA_RED\"       => \"Не установлена\",\r\n        \"GD_SCHEMA_GREEN\"     => \"Установлена\",\r\n    ]\r\n);\r\n\r\n\\Sprint\\Migration\\Locale::loadLocale(\r\n    \"ru\",\r\n    [\r\n        \"BUILDER_GROUP_Main\"     => \"Главный модуль\",\r\n        \"BUILDER_GROUP_Iblock\"   => \"Инфоблоки\",\r\n        \"BUILDER_GROUP_Hlblock\"  => \"Highload-блоки\",\r\n        \"BUILDER_GROUP_Form\"     => \"Веб-формы\",\r\n        \"BUILDER_GROUP_Medialib\" => \"Медиабиблиотека\",\r\n        \"BUILDER_GROUP_Tools\"    => \"Инструменты\",\r\n    ]\r\n);\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/locale/ru.php b/local/modules/sprint.migration/locale/ru.php
--- a/local/modules/sprint.migration/locale/ru.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/locale/ru.php	(date 1670844554000)
@@ -67,6 +67,7 @@
         "BUILDER_RESET"            => "Сбросить",
         "SELECT_ALL"               => "Выбрать все",
         "SELECT_ONE"               => "Выбрать",
+        "RESTART_AGAIN"            => "Запустить снова",
     ]
 );
 \Sprint\Migration\Locale::loadLocale(
@@ -74,12 +75,13 @@
     [
         "CONFIG_archive"                     => "Архив",
         "CONFIG_migration_dir"               => "Директория для миграций",
+        "CONFIG_migration_dir_absolute"      => "Абсолютный путь до migration_dir",
+        "CONFIG_exchange_dir"                => "Директория для файлов данных",
+        "CONFIG_exchange_dir_absolute"       => "Абсолютный путь до exchange_dir",
         "CONFIG_migration_extend_class"      => "Класс, наследуемый миграциями",
         "CONFIG_migration_table"             => "Таблица в бд с миграциями",
         "CONFIG_version_prefix"              => "Заголовок класса миграции",
         "CONFIG_version_builders"            => "Конструкторы",
-        "CONFIG_version_filter"              => "Фильтр списка миграций",
-        "CONFIG_stop_on_errors"              => "Останавливать выполнение миграций при ошибках",
         "CONFIG_show_admin_interface"        => "Показывать сервис миграций в админке",
         "CONFIG_console_user"                => "Пользователь, от которого запускаются миграции в консоли",
         "CONFIG_console_auth_events_disable" => "Отключить обработчики авторизации в консоли",
@@ -89,6 +91,7 @@
         "CONFIG_yes"                         => "да",
         "CONFIG_no"                          => "нет",
         "CONFIG_version_name_template"       => "Шаблон названия миграции",
+        "CONFIG_tracker_task_url"            => "Шаблон ссылки на трекер задач",
     ]
 );
 \Sprint\Migration\Locale::loadLocale(
@@ -130,9 +133,9 @@
         "BUILDER_IblockElementsExport_Fields"          => "Выберите поля",
         "BUILDER_IblockElementsExport_Filter"          => "Выберите элементы",
         "BUILDER_IblockElementsExport_SelectSomeId"    => "Указать ID элементов",
-        "BUILDER_IblockElementsExport_FilterListId"    => "Укажите ID элементов через запятую",
+        "BUILDER_IblockElementsExport_FilterListId"    => "Укажите ID элементов через пробел",
         "BUILDER_IblockElementsExport_SelectSomeXmlId" => "Указать XML_ID элементов",
-        "BUILDER_IblockElementsExport_FilterListXmlId" => "Укажите XML_ID элементов через запятую",
+        "BUILDER_IblockElementsExport_FilterListXmlId" => "Укажите XML_ID элементов через пробел",
         "BUILDER_IblockElementsExport_UpdateMode"      => "Настройка переноса",
         "BUILDER_IblockElementsExport_SelectAll"       => "Выбрать все",
         "BUILDER_IblockElementsExport_SelectNone"      => "Не выбирать ничего",
@@ -278,60 +281,63 @@
 \Sprint\Migration\Locale::loadLocale(
     "ru",
     [
-        "ERR_BUILDER_NOT_FOUND"             => "Конструктор не найден",
-        "ERR_CANT_CREATE_DIRECTORY"         => "Ошибка создания директории #NAME#",
-        "ERR_MSSQL_NOT_SUPPORTED"           => "MSSQL не поддерживается",
-        "ERR_JSON_NOT_SUPPORTED"            => "Установите php-расширение json",
-        "ERR_PHP_NOT_SUPPORTED"             => "\"#NAME#\" не поддерживается",
-        "ERR_EXCHANGE_DISABLED"             => "Обмен отключен, подключите недостающие модули",
-        "ERR_EXCHANGE_DISABLED_XML"         => "Обмен отключен, установите php-расширение XMLReader и XMLWriter",
-        "ERR_CLASS_NOT_FOUND"               => "Класс \"#NAME#\" не найден",
-        "ERR_MIGRATION_FAIL"                => "Миграция не выполнилась",
-        "ERR_SOME_MIGRATIONS_FAILS"         => "Некоторые миграции не выполнились",
-        "ERR_VERSION_NOT_FOUND"             => "Миграция не найдена",
-        "ERR_INVALID_ARGUMENTS"             => "Укажите корректные аргументы, смотрите помощь",
-        "ERR_COMMAND_NOT_FOUND"             => "Команда \"#NAME#\" не найдена, смотрите помощь",
-        "ERR_METHOD_NOT_FOUND"              => "Метод \"#NAME#\"  не найден",
-        "ERR_CANT_CREATE_FILE"              => "Ошибка создания файла \"#NAME#\"",
-        "ERR_FORM_NOT_FOUND"                => "Форма \"#NAME#\" не найдена",
-        "ERR_EMPTY_REQ_FIELD"               => "Обязательное поле \"#NAME#\" не заполнено",
-        "ERR_HELPER_DISABLED"               => "Помощник \"#NAME#\" отключен",
-        "ERR_AGENT_NOT_ADDED"               => "Агент \"#NAME#\" не добавлен",
-        "ERR_EVENT_TYPE_NOT_UPDATED"        => "Тип почтового события не обновлен",
-        "ERR_CANT_DELETE_FORM"              => "Ошибка удаления формы \"#NAME#\"",
-        "ERR_CANT_DELETE_EVENT_TYPE"        => "Ошибка удаления типа почтового события \"#NAME#\"",
-        "ERR_CANT_DELETE_EVENT_MESSAGE"     => "Ошибка удаления почтового шаблона \"#NAME#\"",
-        "ERR_EVENT_TYPE_NOT_ADDED"          => "Тип почтового события \"#NAME#\" не добавлен",
-        "ERR_EVENT_MESSAGE_NOT_ADDED"       => "Почтовый шаблон \"#NAME#\" не добавлен",
-        "ERR_HLBLOCK_NOT_FOUND"             => "Highload-блок \"#HLBLOCK#\" не найден",
-        "ERR_HLBLOCK_FIELD_NOT_FOUND"       => "Поле для highload-блока не найдено",
-        "ERR_DEFAULT_LANGUAGE_NOT_FOUND"    => "Основной яык не найден",
-        "ERR_ACTIVE_LANGUAGES_NOT_FOUND"    => "Языки не найдены",
-        "ERR_DEFAULT_SITE_NOT_FOUND"        => "Основной сайт не найден",
-        "ERR_ACTIVE_SITES_NOT_FOUND"        => "Сайты не найдены",
-        "ERR_USER_GROUP_CODE_NOT_FOUND"     => "Не найден код группы",
-        "ERR_SET_FIELDS_FOR_UPDATE_GROUP"   => "Заполните поля для обновления группы",
-        "ERR_USERTYPE_NOT_ADDED"            => "Пользовательское поле \"#NAME#\" не добавлено",
-        "ERR_USERTYPE_NOT_UPDATED"          => "Пользовательское поле \"#NAME#\" не обновлено",
-        "ERR_USERTYPE_NOT_DELETED"          => "Пользовательское поле \"#NAME#\" не удалено",
-        "ERR_USERTYPE_EXPORT"               => "Ошибка экспорта пользовательского поля \"#USER_TYPE_ID#\":",
-        "ERR_IB_PROPERTY_CODE_NOT_FOUND"    => "Не заполнен символьный код свойства",
-        "ERR_IB_CODE_NOT_FOUND"             => "Не заполнен символьный код инфоблока \"#IBLOCK_ID#\"",
-        "ERR_TYPE_OF_IB_NOT_FOUND"          => "Не найден тип у инфоблока \"#IBLOCK_ID#\"",
-        "ERR_IB_SECTION_NAME_NOT_FOUND"     => "Не заполнено название категории инфоблока",
-        "ERR_IB_NOT_FOUND"                  => "Инфоблок \"#IBLOCK#\" не найден",
-        "ERR_IB_TYPE_NOT_FOUND"             => "Тип инфоблока \"#IBLOCK_TYPE_ID#\" не найден",
-        "ERR_CANT_DELETE_IBLOCK"            => "Ошибка удаления инфоблок \"#NAME#\"",
-        "ERR_CANT_DELETE_IBLOCK_TYPE"       => "Ошибка удаления типа инфоблока \"#NAME#\"",
-        "ERR_IB_FORM_OPTIONS_NOT_FOUND"     => "Не найдены настройки формы элемента инфоблока",
-        "ERR_SCHEMA_EMPTY"                  => "Схема \"#NAME#\" не содержит данных",
-        "ERR_SCHEMA_CREATED"                => "Схема \"#NAME#\" сохранена",
-        "ERR_EXCHANGE_FILE_NOT_FOUND"       => "Файл с данными не найден",
-        "ERR_EXCHANGE_VERSION"              => "Файл для переноса данных \"#NAME#\" не поддерживается текущей версией модуля.\nПожалуйста создайте его заново.",
-        "ERR_IB_SECTION_ID_EMPTY"           => "Категория в инфоблоке \"#IBLOCK_ID#\" не указана",
-        "ERR_IB_SECTION_ID_NOT_FOUND"       => "Категория \"#SECTION_ID#\" в инфоблоке \"#IBLOCK_ID#\" не найдена",
-        "ERR_IB_SECTION_ON_LEVEL_NOT_FOUND" => "Категория \"#SECTION_NAME#\" на уровне \"#DEPTH_LEVEL#\" не найдена",
-        "ERR_SAVE_COLLECTION_BY_PATH"       => "Не удалось сохранить коллекцию по пути \"#PATH#\"",
+        "ERR_BUILDER_NOT_FOUND"              => "Конструктор не найден",
+        "ERR_CANT_CREATE_DIRECTORY"          => "Ошибка создания директории #NAME#",
+        "ERR_MSSQL_NOT_SUPPORTED"            => "MSSQL не поддерживается",
+        "ERR_JSON_NOT_SUPPORTED"             => "Установите php-расширение json",
+        "ERR_PHP_NOT_SUPPORTED"              => "\"#NAME#\" не поддерживается",
+        "ERR_EXCHANGE_DISABLED"              => "Обмен отключен, подключите недостающие модули",
+        "ERR_EXCHANGE_DISABLED_XML"          => "Обмен отключен, установите php-расширение XMLReader и XMLWriter",
+        "ERR_CLASS_NOT_FOUND"                => "Класс \"#NAME#\" не найден",
+        "ERR_MIGRATION_FAIL"                 => "Миграция не выполнилась",
+        "ERR_SOME_MIGRATIONS_FAILS"          => "Некоторые миграции не выполнились",
+        "ERR_VERSION_NOT_FOUND"              => "Миграция не найдена",
+        "ERR_INVALID_ARGUMENTS"              => "Укажите корректные аргументы, смотрите помощь",
+        "ERR_COMMAND_NOT_FOUND"              => "Команда \"#NAME#\" не найдена, смотрите помощь",
+        "ERR_METHOD_NOT_FOUND"               => "Метод \"#NAME#\"  не найден",
+        "ERR_CANT_CREATE_FILE"               => "Ошибка создания файла \"#NAME#\"",
+        "ERR_FORM_NOT_FOUND"                 => "Форма \"#NAME#\" не найдена",
+        "ERR_EMPTY_REQ_FIELD"                => "Обязательное поле \"#NAME#\" не заполнено",
+        "ERR_HELPER_DISABLED"                => "Помощник \"#NAME#\" отключен",
+        "ERR_AGENT_NOT_ADDED"                => "Агент \"#NAME#\" не добавлен",
+        "ERR_EVENT_TYPE_NOT_UPDATED"         => "Тип почтового события не обновлен",
+        "ERR_CANT_DELETE_FORM"               => "Ошибка удаления формы \"#NAME#\"",
+        "ERR_CANT_DELETE_EVENT_TYPE"         => "Ошибка удаления типа почтового события \"#NAME#\"",
+        "ERR_CANT_DELETE_EVENT_MESSAGE"      => "Ошибка удаления почтового шаблона \"#NAME#\"",
+        "ERR_EVENT_TYPE_NOT_ADDED"           => "Тип почтового события \"#NAME#\" не добавлен",
+        "ERR_EVENT_MESSAGE_NOT_ADDED"        => "Почтовый шаблон \"#NAME#\" не добавлен",
+        "ERR_HLBLOCK_NOT_FOUND"              => "Highload-блок \"#HLBLOCK#\" не найден",
+        "ERR_HLBLOCK_FIELD_NOT_FOUND"        => "Поле для highload-блока не найдено",
+        "ERR_DEFAULT_LANGUAGE_NOT_FOUND"     => "Основной яык не найден",
+        "ERR_ACTIVE_LANGUAGES_NOT_FOUND"     => "Языки не найдены",
+        "ERR_DEFAULT_SITE_NOT_FOUND"         => "Основной сайт не найден",
+        "ERR_ACTIVE_SITES_NOT_FOUND"         => "Сайты не найдены",
+        "ERR_USER_GROUP_CODE_NOT_FOUND"      => "Не найден код группы",
+        "ERR_SET_FIELDS_FOR_UPDATE_GROUP"    => "Заполните поля для обновления группы",
+        "ERR_USERTYPE_NOT_ADDED"             => "Пользовательское поле \"#NAME#\" не добавлено",
+        "ERR_USERTYPE_NOT_UPDATED"           => "Пользовательское поле \"#NAME#\" не обновлено",
+        "ERR_USERTYPE_NOT_DELETED"           => "Пользовательское поле \"#NAME#\" не удалено",
+        "ERR_USERTYPE_EXPORT"                => "Ошибка экспорта пользовательского поля \"#USER_TYPE_ID#\":",
+        "ERR_IB_PROPERTY_CODE_NOT_FOUND"     => "Не заполнен символьный код свойства",
+        "ERR_IB_CODE_NOT_FOUND"              => "Не заполнен символьный код инфоблока \"#IBLOCK_ID#\"",
+        "ERR_TYPE_OF_IB_NOT_FOUND"           => "Не найден тип у инфоблока \"#IBLOCK_ID#\"",
+        "ERR_IB_SECTION_NAME_NOT_FOUND"      => "Не заполнено название категории инфоблока",
+        "ERR_IB_NOT_FOUND"                   => "Инфоблок \"#IBLOCK#\" не найден",
+        "ERR_IB_TYPE_NOT_FOUND"              => "Тип инфоблока \"#IBLOCK_TYPE_ID#\" не найден",
+        "ERR_CANT_DELETE_IBLOCK"             => "Ошибка удаления инфоблок \"#NAME#\"",
+        "ERR_CANT_DELETE_IBLOCK_TYPE"        => "Ошибка удаления типа инфоблока \"#NAME#\"",
+        "ERR_IB_FORM_OPTIONS_NOT_FOUND"      => "Не найдены настройки формы элемента инфоблока",
+        "ERR_SCHEMA_EMPTY"                   => "Схема \"#NAME#\" не содержит данных",
+        "ERR_SCHEMA_CREATED"                 => "Схема \"#NAME#\" сохранена",
+        "ERR_EXCHANGE_FILE_NOT_FOUND"        => "Файл с данными не найден:  #FILE#",
+        "ERR_EXCHANGE_VERSION"               => "Файл для переноса данных \"#NAME#\" не поддерживается текущей версией модуля.\nПожалуйста создайте его заново.",
+        "ERR_IB_SECTION_ID_EMPTY"            => "Категория в инфоблоке \"#IBLOCK_ID#\" не указана",
+        "ERR_IB_SECTION_ID_NOT_FOUND"        => "Категория \"#SECTION_ID#\" в инфоблоке \"#IBLOCK_ID#\" не найдена",
+        "ERR_IB_SECTION_BY_FILTER_NOT_FOUND" => "Категория \"#NAME#\" на уровне \"#DEPTH_LEVEL#\" в инфоблоке \"#IBLOCK_ID#\" не найдена",
+        "ERR_SAVE_COLLECTION_BY_PATH"        => "Не удалось сохранить коллекцию по пути \"#PATH#\"",
+        "ERR_IB_ELEMENT_ID_EMPTY"            => "Элемент в инфоблоке \"#IBLOCK_ID#\" не указан",
+        "ERR_IB_ELEMENT_ID_NOT_FOUND"        => "Элемент \"#ELEMENT_ID#\" в инфоблоке \"#IBLOCK_ID#\" не найден",
+        "ERR_IB_ELEMENT_BY_FILTER_NOT_FOUND" => "Элемент \"#NAME#\" в инфоблоке \"#IBLOCK_ID#\" не найден",
     ]
 );
 \Sprint\Migration\Locale::loadLocale(
Index: local/modules/sprint.migration/examples/Version20170213000008.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Sprint\\Migration;\r\n\r\n\r\nclass Version20170213000008 extends Version\r\n{\r\n\r\n    protected $description = \"Пример работы миграции с сохранением промежуточных данных в бд\";\r\n\r\n    /**\r\n     * @throws Exceptions\\ExchangeException\r\n     * @return bool|void\r\n     */\r\n    public function up()\r\n    {\r\n        //сохраняем данные этой миграции\r\n        $this->saveData('var1', '1234567');\r\n        $this->saveData('var2', [\r\n            'bbb' => 'axcx',\r\n            'bbbb' => 'axcx',\r\n        ]);\r\n\r\n        //получаем данные этой миграции\r\n        $var1 = $this->getSavedData('var1');\r\n        $var2 = $this->getSavedData('var2');\r\n\r\n        //удаляем выбранные данные этой миграции\r\n        $this->deleteSavedData('var1');\r\n\r\n        //удаляем все данные этой миграции\r\n        $this->deleteSavedData();\r\n\r\n        //получаем сохраненные данные какой-либо другой миграции\r\n        $storage = $this->getStorageManager();\r\n        $var1 = $storage->getSavedData('Version20170213000007', 'var1');\r\n\r\n    }\r\n\r\n    /**\r\n     * @return bool|void\r\n     */\r\n    public function down()\r\n    {\r\n        //your code ...\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/local/modules/sprint.migration/examples/Version20170213000008.php b/local/modules/sprint.migration/examples/Version20170213000008.php
--- a/local/modules/sprint.migration/examples/Version20170213000008.php	(revision 3e159ee2f41f0bf608cf767554e7e5679cc76ff0)
+++ b/local/modules/sprint.migration/examples/Version20170213000008.php	(date 1670844554000)
@@ -2,39 +2,38 @@
 
 namespace Sprint\Migration;
 
-
 class Version20170213000008 extends Version
 {
-
     protected $description = "Пример работы миграции с сохранением промежуточных данных в бд";
 
     /**
-     * @throws Exceptions\ExchangeException
+     * @throws Exceptions\MigrationException
      * @return bool|void
      */
     public function up()
     {
         //сохраняем данные этой миграции
-        $this->saveData('var1', '1234567');
-        $this->saveData('var2', [
-            'bbb' => 'axcx',
+        $storage1 = $this->getStorageManager();
+
+        $storage1->saveData('var1', '1234567');
+        $storage1->saveData('var2', [
+            'bbb'  => 'axcx',
             'bbbb' => 'axcx',
         ]);
 
         //получаем данные этой миграции
-        $var1 = $this->getSavedData('var1');
-        $var2 = $this->getSavedData('var2');
+        $var1 = $storage1->getSavedData('var1');
+        $var2 = $storage1->getSavedData('var2');
 
         //удаляем выбранные данные этой миграции
-        $this->deleteSavedData('var1');
+        $storage1->deleteSavedData('var1');
 
         //удаляем все данные этой миграции
-        $this->deleteSavedData();
+        $storage1->deleteSavedData();
 
         //получаем сохраненные данные какой-либо другой миграции
-        $storage = $this->getStorageManager();
-        $var1 = $storage->getSavedData('Version20170213000007', 'var1');
-
+        $storage2 = $this->getStorageManager('Version20170213000007');
+        $var1 = $storage2->getSavedData('var1');
     }
 
     /**
@@ -44,5 +43,4 @@
     {
         //your code ...
     }
-
 }
